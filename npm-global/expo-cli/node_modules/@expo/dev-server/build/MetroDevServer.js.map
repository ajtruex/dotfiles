{"version":3,"file":"MetroDevServer.js","sourceRoot":"","sources":["../src/MetroDevServer.ts"],"names":[],"mappings":"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","sourcesContent":["import Log from '@expo/bunyan';\nimport { getConfig, Platform, projectHasModule } from '@expo/config';\nimport * as ExpoMetroConfig from '@expo/metro-config';\nimport { createDevServerMiddleware } from '@react-native-community/cli-server-api';\nimport bodyParser from 'body-parser';\nimport http from 'http';\nimport type Metro from 'metro';\n\nimport LogReporter from './LogReporter';\nimport clientLogsMiddleware from './middleware/clientLogsMiddleware';\n\nexport type MetroDevServerOptions = ExpoMetroConfig.LoadOptions & {\n  logger: Log;\n  quiet?: boolean;\n};\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: Platform;\n  dev?: boolean;\n  minify?: boolean;\n  sourceMapUrl?: string;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\nexport type BundleOutput = {\n  code: string;\n  map: string;\n  assets: readonly BundleAssetWithFileHashes[];\n};\n\nexport async function runMetroDevServerAsync(\n  projectRoot: string,\n  options: MetroDevServerOptions\n): Promise<{ server: http.Server; middleware: any }> {\n  const Metro = importMetroFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n\n  const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n\n  const { middleware, attachToServer } = createDevServerMiddleware({\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(options.logger));\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  // @ts-ignore can't mutate readonly config\n  metroConfig.server.enhanceMiddleware = (metroMiddleware: any, server: Metro.Server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, { hmrEnabled: true });\n\n  const { eventsSocket } = attachToServer(serverInstance);\n  reporter.reportEvent = eventsSocket.reportEvent;\n\n  return {\n    server: serverInstance,\n    middleware,\n  };\n}\n\nlet nextBuildID = 0;\n\nexport async function bundleAsync(\n  projectRoot: string,\n  options: MetroDevServerOptions,\n  bundles: BundleOptions[]\n): Promise<BundleOutput[]> {\n  const metro = importMetroFromProject(projectRoot);\n  const Server = importMetroServerFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n  const config = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n  const buildID = `bundle_${nextBuildID++}`;\n\n  const metroServer = await metro.runMetro(config, {\n    watch: false,\n  });\n\n  const buildAsync = async (bundle: BundleOptions): Promise<BundleOutput> => {\n    const bundleOptions: Metro.BundleOptions = {\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      bundleType: 'bundle',\n      platform: bundle.platform,\n      entryFile: bundle.entryPoint,\n      dev: bundle.dev ?? false,\n      minify: bundle.minify ?? !bundle.dev,\n      inlineSourceMap: false,\n      sourceMapUrl: bundle.sourceMapUrl,\n      createModuleIdFactory: config.serializer.createModuleIdFactory,\n      onProgress: (transformedFileCount: number, totalFileCount: number) => {\n        if (!options.quiet) {\n          reporter.update({\n            buildID,\n            type: 'bundle_transform_progressed',\n            transformedFileCount,\n            totalFileCount,\n          });\n        }\n      },\n    };\n    reporter.update({\n      buildID,\n      type: 'bundle_build_started',\n      bundleDetails: {\n        bundleType: bundleOptions.bundleType,\n        platform: bundle.platform,\n        entryFile: bundle.entryPoint,\n        dev: bundle.dev ?? false,\n        minify: bundle.minify ?? false,\n      },\n    });\n    const { code, map } = await metroServer.build(bundleOptions);\n    const assets = (await metroServer.getAssets(\n      bundleOptions\n    )) as readonly BundleAssetWithFileHashes[];\n    reporter.update({\n      buildID,\n      type: 'bundle_build_done',\n    });\n    return { code, map, assets };\n  };\n\n  try {\n    return await Promise.all(bundles.map((bundle: BundleOptions) => buildAsync(bundle)));\n  } finally {\n    metroServer.end();\n  }\n}\n\nfunction importMetroFromProject(projectRoot: string): typeof Metro {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const resolvedPath = projectHasModule('metro', projectRoot, exp);\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing package \"metro\" in the project at ' +\n        projectRoot +\n        '. ' +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n\nfunction importMetroServerFromProject(projectRoot: string): typeof Metro.Server {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const resolvedPath = projectHasModule('metro/src/Server', projectRoot, exp);\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing module \"metro/src/Server\" in the project. ' +\n        'This usually means React Native is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n"]}