declare type Device = {
    pid?: string;
    name: string;
    type: 'emulator' | 'device';
    isBooted: boolean;
    isAuthorized: boolean;
};
export declare function getAllAvailableDevicesAsync(): Promise<Device[]>;
export declare function getAttachedDevicesAsync(): Promise<Device[]>;
export declare function isPlatformSupported(): boolean;
export declare function getAdbOutputAsync(args: string[]): Promise<string>;
export declare function downloadApkAsync(url?: string, downloadProgressCallback?: (roundedProgress: number) => void): Promise<string>;
export declare function installExpoAsync({ device, url, version, }: {
    device: Device;
    url?: string;
    version?: string;
}): Promise<string>;
export declare function isDeviceBootedAsync({ name, }?: {
    name?: string;
}): Promise<Device | null>;
export declare function uninstallExpoAsync(device: Device): Promise<string | undefined>;
export declare function upgradeExpoAsync(options?: {
    url?: string;
    version?: string;
}): Promise<boolean>;
export declare function openProjectAsync({ projectRoot, shouldPrompt, }: {
    projectRoot: string;
    shouldPrompt?: boolean;
}): Promise<{
    success: true;
    url: string;
} | {
    success: false;
    error: string;
}>;
export declare function openWebProjectAsync({ projectRoot, shouldPrompt, }: {
    projectRoot: string;
    shouldPrompt?: boolean;
}): Promise<{
    success: true;
    url: string;
} | {
    success: false;
    error: string;
}>;
export declare function startAdbReverseAsync(projectRoot: string): Promise<boolean>;
export declare function stopAdbReverseAsync(projectRoot: string): Promise<void>;
/**
 * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen
 * providing `Logger` feedback upon problems.
 * @param projectDir - directory of the expo project
 * @since SDK33
 */
export declare function checkSplashScreenImages(projectDir: string): Promise<void>;
export declare function maybeStopAdbDaemonAsync(): Promise<boolean>;
export {};
