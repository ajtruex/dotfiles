"use strict";

function _delayAsync() {
  const data = _interopRequireDefault(require("delay-async"));

  _delayAsync = function () {
    return data;
  };

  return data;
}

function SimControl() {
  const data = _interopRequireWildcard(require("../SimControl"));

  SimControl = function () {
    return data;
  };

  return data;
}

function Simulator() {
  const data = _interopRequireWildcard(require("../Simulator"));

  Simulator = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe.skip('simulator', () => {
  it('opens and loads url in expo', async () => {
    // This tests depends on the simulator, and could take some time to boot
    jest.setTimeout(60000); // Determine if we can run this test or not, if simulator isn't available warn and stop

    if (!(await Simulator().isSimulatorInstalledAsync())) {
      return console.warn("Simulator isn't installed on this computer; can't run this test.");
    } // Quit the simulator to start the test


    if (await Simulator().isSimulatorBootedAsync()) {
      await SimControl().killAllAsync();
      await Simulator().closeSimulatorAppAsync();
    }

    await (0, _delayAsync().default)(1000); // 1s
    // Open the simulator

    const sim = await Simulator().ensureSimulatorOpenAsync(); // await delayAsync(9000); // 9s
    // If its not running now, we can't test

    if (!(await Simulator().isSimulatorBootedAsync())) {
      throw new Error("Simulator should be running after being opened, but we're detecting that it isn't.");
    } // Use a fresh Expo install for this test


    await Simulator().uninstallExpoAppFromSimulatorAsync(sim);
    await Simulator().installExpoOnSimulatorAsync({
      simulator: sim
    });

    if (!(await Simulator().isExpoClientInstalledOnSimulatorAsync(sim))) {
      throw new Error("Expo app should be installed on this simulator but it isn't");
    } // Try opening an Expo project, even when it doesn't exists Expo should be open


    await SimControl().openURLAsync({
      url: 'exp://exp.host/@exponent/fluxpybird'
    });
    await (0, _delayAsync().default)(6000); // 6s

    await Simulator().uninstallExpoAppFromSimulatorAsync();

    if (await Simulator().isExpoClientInstalledOnSimulatorAsync(sim)) {
      throw new Error("Expo app shouldn't be installed on this simulator but it is (2)");
    }

    await Simulator().closeSimulatorAppAsync();

    if (await Simulator().isSimulatorBootedAsync()) {
      throw new Error("Simulator shouldn't be running but it is");
    }
  });
});
//# sourceMappingURL=../__sourcemaps__/__integration_tests__/Simulator-test.js.map
