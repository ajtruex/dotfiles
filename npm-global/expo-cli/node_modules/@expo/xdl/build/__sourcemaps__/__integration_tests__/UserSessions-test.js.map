{"version":3,"sources":["__integration_tests__/UserSessions-test.ts"],"names":["_makeShortId","salt","minLength","hashIds","HashIds","encode","Date","now","describe","skip","userForTest","userForTestPassword","beforeAll","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","loginAsync","user","getCurrentUserAsync","expect","not","toBeNull","toBe","sessionSecret","undefined","auth","UserSettings","getAsync","response","status","UserManagerInstance","initialize"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport path from 'path';\nimport uuid from 'uuid';\n\nimport ApiV2Client from '../ApiV2';\nimport { User, UserManagerInstance } from '../User';\nimport UserSettings from '../UserSettings';\n\nconst _makeShortId = (salt: string, minLength = 10) => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\n// Note: these tests are actually calling the API,\n// in the unit test \"User-test.ts\" the API is mocked and the same tests are executed.\ndescribe.skip('User Sessions', () => {\n  let userForTest: User;\n  let userForTestPassword: string;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should login successfully, and persist a session token upon login', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n      // testSession: true,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    // expect session to be cached\n    expect(user.username).toBe(userForTest.username);\n    expect(user.sessionSecret).not.toBe(undefined);\n\n    // expect session to be in state.json\n    const auth = await UserSettings.getAsync('auth', null);\n    expect(auth?.sessionSecret).not.toBe(undefined);\n  });\n\n  it('should remove a session token upon logout', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    await UserManager.logoutAsync();\n\n    // expect session to be removed\n    const auth = await UserSettings.getAsync('auth', null);\n    expect(auth?.sessionSecret).toBe(undefined);\n  });\n\n  it('should use the token in apiv2', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    const api = ApiV2Client.clientForUser(user);\n    const response = await api.getAsync('auth/intercomUserHash', {}, {}, true);\n    expect(response.status).toBe(200);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize();\n  return UserManager;\n}\n"],"file":"../../__integration_tests__/UserSessions-test.js","sourceRoot":"/@expo/xdl@58.0.16/src"}