{"version":3,"sources":["__integration_tests__/UserManager-test.ts"],"names":["_makeShortId","salt","minLength","hashIds","HashIds","encode","Date","now","describe","skip","userForTest","userForTestPassword","beforeAll","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","default","require","expect","toBeDefined","initialize","ensureLoggedInAsync","message","toEqual","loginAsync","user","getCurrentUserAsync","not","toBeNull","toBe","sessionSecret","toBeFalsy","_getProfileSpy","jest","fn","_getProfileAsync","toHaveBeenCalled","_currentUser","first","second","Promise","all","toHaveBeenCalledTimes","UserManagerInstance"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport path from 'path';\nimport uuid from 'uuid';\n\nimport ApiV2Client from '../ApiV2';\nimport { User, UserManagerInstance } from '../User';\n\nconst _makeShortId = (salt: string, minLength = 10) => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\n// Note: these tests are actually calling the API,\n// in the unit test \"User-test.ts\" the API is mocked and the same tests are executed.\ndescribe.skip('UserManager', () => {\n  let userForTest: User;\n  let userForTestPassword: string;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should make available a global, shared UserManager singleton', () => {\n    const { default: UserManager } = require('../User');\n    expect(UserManager).toBeDefined();\n    expect(UserManager.initialize).toBeDefined();\n  });\n\n  it('should not have a currently logged in user', async () => {\n    const UserManager = _newTestUserManager();\n    try {\n      await UserManager.ensureLoggedInAsync();\n    } catch (e) {\n      expect(e.message).toEqual('Not logged in');\n    }\n  });\n\n  it('should login successfully', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    expect(user.username).toBe(userForTest.username);\n    expect(user.sessionSecret).not.toBeFalsy();\n  });\n\n  it('should use cached user after first run of getCurrentUserAsync() instead of making call to www', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    await UserManager.getCurrentUserAsync();\n\n    expect(_getProfileSpy).not.toHaveBeenCalled();\n  });\n\n  it('should correctly use lock to prevent getting session twice, simulatenously', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    UserManager._currentUser = null;\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    const [first, second] = await Promise.all([\n      UserManager.getCurrentUserAsync(),\n      UserManager.getCurrentUserAsync(),\n    ]);\n\n    expect(_getProfileSpy).toHaveBeenCalledTimes(1);\n\n    // This shouldn't have changed, but just double check it\n    expect(first?.sessionSecret).toEqual(second?.sessionSecret);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize();\n  return UserManager;\n}\n"],"file":"../../__integration_tests__/UserManager-test.js","sourceRoot":"/@expo/xdl@58.0.16/src"}