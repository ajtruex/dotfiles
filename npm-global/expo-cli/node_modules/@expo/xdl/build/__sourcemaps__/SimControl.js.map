{"version":3,"sources":["SimControl.ts"],"names":["isSimulatorRunningAsync","zeroMeansNo","osascript","execAsync","trim","getDefaultSimulatorDeviceUDIDAsync","stdout","defaultDeviceUDID","e","getContainerPathAsync","udid","bundleIdentifier","xcrunAsync","deviceUDIDOrBooted","error","stderr","match","openURLAsync","options","simctlAsync","url","bootAsync","isSimulatorBootedAsync","getBootedSimulatorsAsync","simulatorDeviceInfo","listAsync","Object","values","devices","reduce","prev","runtime","concat","filter","device","state","find","bootedDevice","installAsync","dir","uninstallAsync","type","query","result","info","JSON","parse","keys","runtimeSuffix","split","pop","osType","osVersionComponents","osVersion","join","sims","windowName","name","shutdownAsync","message","includes","updatePermissionsAsync","action","permission","setAppearanceAsync","theme","eraseAsync","eraseAllAsync","addMediaAsync","mediaPath","captureScreenAsync","captureType","outputFilePath","path","extname","deleteUnavailableAsync","command","args","xcrunWithLogging","Boolean","isSimulatorAppRunningAsync","openSimulatorAppAsync","push","killAllAsync","isLicenseOutOfDate","text","lower","toLowerCase","isXcrunInstalledAsync","console","log","XDLError","Logger","global"],"mappings":"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","sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync, { SpawnOptions } from '@expo/spawn-async';\nimport path from 'path';\n\nimport Logger from './Logger';\nimport XDLError from './XDLError';\n\ntype DeviceState = 'Shutdown' | 'Booted';\n\nexport type Device = {\n  availabilityError: 'runtime profile not found';\n  /**\n   * '/Users/name/Library/Developer/CoreSimulator/Devices/00E55DC0-0364-49DF-9EC6-77BE587137D4/data'\n   */\n  dataPath: string;\n  /**\n   * '/Users/name/Library/Logs/CoreSimulator/00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  logPath: string;\n  /**\n   * '00E55DC0-0364-49DF-9EC6-77BE587137D4'\n   */\n  udid: string;\n  /**\n   * com.apple.CoreSimulator.SimRuntime.tvOS-13-4\n   */\n  runtime: string;\n  isAvailable: boolean;\n  /**\n   * 'com.apple.CoreSimulator.SimDeviceType.Apple-TV-1080p'\n   */\n  deviceTypeIdentifier: string;\n  state: DeviceState;\n  /**\n   * 'Apple TV'\n   */\n  name: string;\n\n  osType: OSType;\n  /**\n   * '13.4'\n   */\n  osVersion: string;\n  /**\n   * 'iPhone 11 (13.6)'\n   */\n  windowName: string;\n};\n\ntype OSType = 'iOS' | 'tvOS' | 'watchOS';\n\ntype PermissionName =\n  | 'all'\n  | 'calendar'\n  | 'contacts-limited'\n  | 'contacts'\n  | 'location'\n  | 'location-always'\n  | 'photos-add'\n  | 'photos'\n  | 'media-library'\n  | 'microphone'\n  | 'motion'\n  | 'reminders'\n  | 'siri';\n\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: Device[];\n  };\n};\n\nexport async function isSimulatorRunningAsync() {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\nexport async function getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Returns the local path for the installed tar.app. Returns null when the app isn't installed.\n *\n * @param udid\n * @param bundleIdentifier\n */\nexport async function getContainerPathAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  try {\n    const { stdout } = await xcrunAsync([\n      'simctl',\n      'get_app_container',\n      deviceUDIDOrBooted(udid),\n      bundleIdentifier,\n    ]);\n    return stdout.trim();\n  } catch (error) {\n    if (error.stderr?.match(/No such file or directory/)) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport async function openURLAsync(options: { udid?: string; url: string }) {\n  return simctlAsync(['openurl', deviceUDIDOrBooted(options.udid), options.url]);\n}\n\n// This will only boot in headless mode if the Simulator app is not running.\nexport async function bootAsync({ udid }: { udid: string }): Promise<Device | null> {\n  try {\n    // Skip logging since this is likely to fail.\n    await xcrunAsync(['simctl', 'boot', udid]);\n  } catch (error) {\n    // Silly errors\n    if (!error.stderr?.match(/Unable to boot device in current state: Booted/)) {\n      throw error;\n    }\n  }\n  return await isSimulatorBootedAsync({ udid });\n}\n\nexport async function getBootedSimulatorsAsync(): Promise<Device[]> {\n  const simulatorDeviceInfo = await listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime.filter(device => device.state === 'Booted'));\n  }, []);\n}\n\nexport async function isSimulatorBootedAsync({ udid }: { udid?: string }): Promise<Device | null> {\n  // Simulators can be booted even if the app isn't running :(\n  const devices = await getBootedSimulatorsAsync();\n  if (udid) {\n    return devices.find(bootedDevice => bootedDevice.udid === udid) ?? null;\n  } else {\n    return devices[0] ?? null;\n  }\n}\n\nexport async function installAsync(options: { udid: string; dir: string }): Promise<any> {\n  return simctlAsync(['install', deviceUDIDOrBooted(options.udid), options.dir]);\n}\nexport async function uninstallAsync(options: {\n  udid?: string;\n  bundleIdentifier: string;\n}): Promise<any> {\n  return simctlAsync(['uninstall', deviceUDIDOrBooted(options.udid), options.bundleIdentifier]);\n}\n\n// TODO: Compare with\n// const results = await SimControl.xcrunAsync(['instruments', '-s']);\nexport async function listAsync(\n  type: 'devices' | 'devicetypes' | 'runtimes' | 'pairs',\n  query?: string | 'available'\n): Promise<SimulatorDeviceList> {\n  const result = await simctlAsync(['list', type, '--json', query]);\n  const info = JSON.parse(result.stdout) as SimulatorDeviceList;\n\n  for (const runtime of Object.keys(info.devices)) {\n    // Given a string like 'com.apple.CoreSimulator.SimRuntime.tvOS-13-4'\n    const runtimeSuffix = runtime.split('com.apple.CoreSimulator.SimRuntime.').pop()!;\n    // Create an array [tvOS, 13, 4]\n    const [osType, ...osVersionComponents] = runtimeSuffix.split('-');\n    // Join the end components [13, 4] -> '13.4'\n    const osVersion = osVersionComponents.join('.');\n    const sims = info.devices[runtime];\n    for (const device of sims) {\n      device.runtime = runtime;\n      device.osVersion = osVersion;\n      device.windowName = `${device.name} (${osVersion})`;\n      device.osType = osType as OSType;\n    }\n  }\n  return info;\n}\n\nexport async function shutdownAsync(udid?: string) {\n  try {\n    return simctlAsync(['shutdown', deviceUDIDOrBooted(udid)]);\n  } catch (e) {\n    if (!e.message?.includes('No devices are booted.')) {\n      throw e;\n    }\n  }\n}\n\n// Some permission changes will terminate the application if running\nexport async function updatePermissionsAsync(\n  udid: string,\n  action: 'grant' | 'revoke' | 'reset',\n  permission: PermissionName,\n  bundleIdentifier?: string\n) {\n  return simctlAsync(['privacy', deviceUDIDOrBooted(udid), action, permission, bundleIdentifier]);\n}\n\nexport async function setAppearanceAsync(udid: string, theme: 'light' | 'dark') {\n  return simctlAsync(['ui', deviceUDIDOrBooted(udid), theme]);\n}\n\n// Cannot be invoked unless the simulator is `shutdown`\nexport async function eraseAsync(udid: string) {\n  return simctlAsync(['erase', deviceUDIDOrBooted(udid)]);\n}\n\nexport async function eraseAllAsync() {\n  return simctlAsync(['erase', 'all']);\n}\n\n// Add photos and videos to the simulator's gallery\nexport async function addMediaAsync(udid: string, mediaPath: string) {\n  return simctlAsync(['addmedia', deviceUDIDOrBooted(udid), mediaPath]);\n}\n\nexport async function captureScreenAsync(\n  udid: string,\n  captureType: 'screenshot' | 'recordVideo',\n  outputFilePath: string\n) {\n  return simctlAsync([\n    'io',\n    deviceUDIDOrBooted(udid),\n    captureType,\n    `—type=${path.extname(outputFilePath)}`,\n    outputFilePath,\n  ]);\n}\n\n// Clear all unused simulators\nexport async function deleteUnavailableAsync() {\n  return simctlAsync(['delete', 'unavailable']);\n}\n\nexport async function simctlAsync(\n  [command, ...args]: (string | undefined)[],\n  options?: SpawnOptions\n) {\n  return xcrunWithLogging(\n    // @ts-ignore\n    ['simctl', command, ...args.filter(Boolean)],\n    options\n  );\n}\n\nfunction deviceUDIDOrBooted(udid?: string): string {\n  return udid ? udid : 'booted';\n}\n\n/**\n * I think the app can be open while no simulators are booted.\n */\nexport async function isSimulatorAppRunningAsync(): Promise<boolean> {\n  const zeroMeansNo = (\n    await osascript.execAsync(\n      'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n    )\n  ).trim();\n  if (zeroMeansNo === '0') {\n    return false;\n  }\n\n  return true;\n}\n\nexport async function openSimulatorAppAsync({ udid }: { udid?: string }) {\n  const args = ['-a', 'Simulator'];\n  if (udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', udid);\n  }\n  return await spawnAsync('open', args);\n}\n\nexport async function killAllAsync() {\n  return await spawnAsync('killAll', ['Simulator']);\n}\n\nexport function isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  const lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nexport async function isXcrunInstalledAsync() {\n  try {\n    await spawnAsync('xcrun', ['--version']);\n    return true;\n  } catch (error) {\n    console.log('ERR: ', error);\n    return false;\n  }\n}\n\nexport async function xcrunAsync(args: string[], options?: SpawnOptions) {\n  try {\n    return await spawnAsync('xcrun', args, options);\n  } catch (e) {\n    if (isLicenseOutOfDate(e.stdout) || isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        'XCODE_LICENSE_NOT_ACCEPTED',\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    }\n    throw e;\n  }\n}\nexport async function xcrunWithLogging(args: string[], options?: SpawnOptions) {\n  try {\n    return await xcrunAsync(args, options);\n  } catch (e) {\n    Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr}`);\n    throw e;\n  }\n}\n"],"file":"../SimControl.js","sourceRoot":"/@expo/xdl@58.0.16/src"}