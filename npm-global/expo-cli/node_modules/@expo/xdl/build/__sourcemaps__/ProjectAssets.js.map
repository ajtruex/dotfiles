{"version":3,"sources":["ProjectAssets.ts"],"names":["EXPO_CDN","resolveGoogleServicesFile","projectRoot","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","getAssetFieldPathsForManifestAsync","sdkAssetFieldPaths","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","assetSchema","resolveManifestAssets","resolver","strict","assetSchemas","urls","Promise","all","map","manifestField","pathOrURL","match","existsSync","err","Error","localAssetPath","forEach","index","e","logMethod","ProjectUtils","logWarning","logError","message","_configureExpForAssets","exp","assets","assetBundlePatterns","fullPatterns","p","join","logger","global","info","bundledAssets","Set","asset","file","files","shouldBundle","__packager_asset","some","logDebug","fileHashes","hash","add","type","publishAssetsAsync","options","exportAssetsAsync","hostedUrl","assetPath","outputDir","bundles","assetCdnPath","collectAssets","length","saveAssetsAsync","uploadAssetsAsync","quiet","fetchMissingAssetsAsync","paths","user","UserManager","ensureLoggedInAsync","api","ApiV2","clientForUser","result","postAsync","keys","metas","metadata","missing","key","exists","logAssetTask","action","pathName","relativePath","replace","collectAssetPaths","Object","keyChunks","formData","FormData","append","createReadStream","uploadFormDataAsync","promises","push","copy","hostedAssetPrefix","manifestAssets","absolutePath"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes, BundleOutput } from '@expo/dev-server';\nimport fs from 'fs-extra';\nimport chunk from 'lodash/chunk';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\nimport md5hex from 'md5hex';\nimport minimatch from 'minimatch';\nimport path from 'path';\nimport urljoin from 'url-join';\n\nimport ApiV2 from './ApiV2';\nimport logger from './Logger';\nimport UserManager from './User';\nimport * as ExpSchema from './project/ExpSchema';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport FormData from './tools/FormData';\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\ntype BundlesByPlatform = { android: BundleOutput; ios: BundleOutput };\n\ntype ExportAssetsOptions = {\n  projectRoot: string;\n  exp: ExpoAppManifest;\n  hostedUrl: string;\n  assetPath: string;\n  bundles: BundlesByPlatform;\n  outputDir?: string;\n};\n\nexport async function resolveGoogleServicesFile(projectRoot: string, manifest: ExpoConfig) {\n  if (manifest.android?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios?.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nasync function getAssetFieldPathsForManifestAsync(manifest: ExpoAppManifest): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter(assetSchema => get(manifest, assetSchema));\n}\n\nexport async function resolveManifestAssets({\n  projectRoot,\n  manifest,\n  resolver,\n  strict = false,\n}: {\n  projectRoot: string;\n  manifest: ExpoAppManifest;\n  resolver: (assetPath: string) => Promise<string>;\n  strict?: boolean;\n}) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async manifestField => {\n        const pathOrURL = get(manifest, manifestField);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err: ManifestResolutionError = new Error('Could not resolve local asset.');\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot: string, exp: ExpoAppManifest, assets: Asset[]) {\n  // Add google services file if it exists\n  await resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns: string[] = exp.assetBundlePatterns.map((p: string) =>\n      path.join(projectRoot, p)\n    );\n    // Only log the patterns in debug mode, if they aren't already defined in the app.json, then all files will be targeted.\n    logger.global.info('\\nProcessing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set<string>();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        '__packager_asset' in asset &&\n        asset.__packager_asset &&\n        file &&\n        fullPatterns.some((p: string) => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add(\n            'asset_' + hash + ('type' in asset && asset.type ? '.' + asset.type : '')\n          )\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nexport async function publishAssetsAsync(\n  options: Pick<ExportAssetsOptions, 'projectRoot' | 'exp' | 'bundles'>\n) {\n  return exportAssetsAsync({\n    ...options,\n    hostedUrl: EXPO_CDN,\n    assetPath: '~assets',\n  });\n}\n\nexport async function exportAssetsAsync({\n  projectRoot,\n  exp,\n  hostedUrl,\n  assetPath,\n  outputDir,\n  bundles,\n}: ExportAssetsOptions) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, assetPath);\n  const assets = await collectAssets(projectRoot, exp, assetCdnPath, bundles);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    if (outputDir) {\n      await saveAssetsAsync(projectRoot, assets, outputDir);\n    } else {\n      // No output directory defined, use remote url.\n      await uploadAssetsAsync(projectRoot, assets);\n    }\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\n/**\n * Collect list of assets missing on host\n *\n * @param paths asset paths found locally that need to be uploaded.\n */\nasync function fetchMissingAssetsAsync(paths: string[]): Promise<string[]> {\n  const user = await UserManager.ensureLoggedInAsync();\n  const api = ApiV2.clientForUser(user);\n  const result = await api.postAsync('assets/metadata', { keys: paths });\n\n  const metas = result.metadata;\n  const missing = paths.filter(key => !metas[key].exists);\n  return missing;\n}\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  ProjectUtils.logDebug(projectRoot, 'expo', `${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  logger.global.info({ quiet: true }, `${action} ${relativePath}`);\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot: string, assets: Asset[]) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  const missing = await fetchMissingAssetsAsync(Object.keys(paths));\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n    return;\n  }\n\n  const keyChunks = chunk(missing, 5);\n\n  // Upload them in chunks of 5 to prevent network and system issues.\n  for (const keys of keyChunks) {\n    const formData = new FormData();\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'uploading', pathName);\n\n      formData.append(key, fs.createReadStream(pathName), pathName);\n    }\n\n    // TODO: Document what's going on\n    const user = await UserManager.ensureLoggedInAsync();\n    const api = ApiV2.clientForUser(user);\n    await api.uploadFormDataAsync('assets/upload', formData);\n  }\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nasync function saveAssetsAsync(projectRoot: string, assets: Asset[], outputDir: string) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      const pathName = paths[key];\n\n      logAssetTask(projectRoot, 'saving', pathName);\n\n      const assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      promises.push(fs.copy(pathName, assetPath));\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function collectAssets(\n  projectRoot: string,\n  exp: ExpoAppManifest,\n  hostedAssetPrefix: string,\n  bundles: BundlesByPlatform\n): Promise<Asset[]> {\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets: Asset[] = [];\n  await resolveManifestAssets({\n    projectRoot,\n    manifest: exp,\n    async resolver(assetPath) {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    strict: true,\n  });\n\n  return [...bundles.ios.assets, ...bundles.android.assets, ...manifestAssets];\n}\n"],"file":"../ProjectAssets.js","sourceRoot":"/@expo/xdl@58.0.16/src"}