{"version":3,"sources":["project/Doctor.ts"],"names":["NO_ISSUES","WARNING","ERROR","FATAL","MIN_WATCHMAN_VERSION","MIN_NPM_VERSION","CORRECT_NPM_VERSION","WARN_NPM_VERSION_RANGES","BAD_NPM_VERSION_RANGES","_isNpmVersionWithinRanges","npmVersion","ranges","some","range","semver","satisfies","_checkNpmVersionAsync","projectRoot","yarnVersionResponse","status","e","npmVersionResponse","stdout","trim","lt","ProjectUtils","logError","logWarning","clearNotification","_checkWatchmanVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","warningMessage","process","platform","validateWithSchema","exp","schema","configName","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","Schemer","rootDir","validateSchemaAsync","SchemerError","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","validationError","fieldPath","message","_validateExpJsonAsync","pkg","allowNetwork","skipSDKVersionRequirement","sdkVersion","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","sdkVersions","Versions","sdkVersionsAsync","Object","keys","ExpSchema","getSchemaAsync","reactNativeIssue","_validateReactNativeVersionAsync","validation","reactNativeVersionWarnings","reactNative","dependencies","devDependencies","peerDependencies","isDetached","test","reactNativeTag","match","sdkVersionObject","major","parseSdkVersionFromTag","_validateNodeModulesAsync","nodeModulesPath","path","resolve","result","fs","statSync","isDirectory","code","validateWithoutNetworkAsync","options","validateAsync","validateWithNetworkAsync","getenv","boolish","strict","expStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_INSTALLED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","mainFilePath","main","mainFile","readFile","includes","validateExpoServersAsync","domains","attempts","Promise","all","domain","reachable","failures","filter","attempt","forEach","failure","console","log"],"mappings":"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","sourcesContent":["import {\n  configFilename,\n  ExpoConfig,\n  getConfig,\n  getPackageJson,\n  PackageJSONConfig,\n  resolveModule,\n} from '@expo/config';\nimport Schemer, { SchemerError, ValidationError } from '@expo/schemer';\nimport spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport isReachable from 'is-reachable';\nimport path from 'path';\nimport semver from 'semver';\n\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = 'latest';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0 < 5.7.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion: string, ranges: string[]) {\n  return ranges.some(range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot: string) {\n  try {\n    try {\n      const yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    const npmVersionResponse = await spawnAsync('npm', ['--version']);\n    const npmVersion = npmVersionResponse.stdout.trim();\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend the latest version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot: string) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  const watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: string | undefined; assetsErrorMessage: string | undefined }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  const validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${\n        e.errors.length > 1 ? 's' : ''\n      } validating fields in ${configName}. See https://docs.expo.io/workflow/configuration/`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${\n          e.errors.length > 1 ? '' : 's'\n        } validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError: ValidationError) {\n  return `\\n • ${validationError.fieldPath ? 'Field: ' + validationError.fieldPath + ' - ' : ''}${\n    validationError.message\n  }.`;\n}\n\nasync function _validateExpJsonAsync(\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig,\n  projectRoot: string,\n  allowNetwork: boolean,\n  skipSDKVersionRequirement: boolean | undefined\n): Promise<number> {\n  if (!exp || !pkg) {\n    // getConfig already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const sdkVersion = exp.sdkVersion;\n  const configName = configFilename(projectRoot);\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n  const sdkVersions = await Versions.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!skipSDKVersionRequirement && (!sdkVersion || !sdkVersions[sdkVersion])) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${Object.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  // Skip validation if the correct token is set in env\n  if (sdkVersion && sdkVersion !== 'UNVERSIONED') {\n    try {\n      const schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      const { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  if (sdkVersion) {\n    const reactNativeIssue = await _validateReactNativeVersionAsync(\n      exp,\n      pkg,\n      projectRoot,\n      sdkVersions,\n      sdkVersion\n    );\n\n    if (reactNativeIssue !== NO_ISSUES) {\n      return reactNativeIssue;\n    }\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp: ExpoConfig,\n  pkg: PackageJSONConfig,\n  projectRoot: string,\n  sdkVersions: Versions.SDKVersions,\n  sdkVersion: string\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = null;\n\n    if (pkg.dependencies?.['react-native']) {\n      reactNative = pkg.dependencies['react-native'];\n    } else if (pkg.devDependencies?.['react-native']) {\n      reactNative = pkg.devDependencies['react-native'];\n    } else if (pkg.peerDependencies?.['react-native']) {\n      reactNative = pkg.peerDependencies['react-native'];\n    }\n\n    // react-native is required\n    if (!reactNative) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: Can't find react-native in package.json dependencies`,\n        'doctor-no-react-native-in-package-json'\n      );\n      return ERROR;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n    if (!exp.isDetached) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n    }\n\n    // Expo fork of react-native is required\n    if (!/expo\\/react-native/.test(reactNative)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      const reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      const sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject['expoReactNativeTag']}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _validateNodeModulesAsync(projectRoot: string): Promise<number> {\n  // Just need `nodeModulesPath` so it doesn't matter if expo is installed or the sdkVersion is defined.\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    const result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react-native is installed\n  try {\n    resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: react-native is not installed. Please run \\`npm install\\` or \\`yarn\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    } else {\n      throw e;\n    }\n  }\n  return NO_ISSUES;\n}\n\nexport async function validateWithoutNetworkAsync(\n  projectRoot: string,\n  options: { skipSDKVersionRequirement?: boolean } = {}\n): Promise<number> {\n  return validateAsync(projectRoot, false, options.skipSDKVersionRequirement);\n}\n\nexport async function validateWithNetworkAsync(\n  projectRoot: string,\n  options: { skipSDKVersionRequirement?: boolean } = {}\n): Promise<number> {\n  return validateAsync(projectRoot, true, options.skipSDKVersionRequirement);\n}\n\nasync function validateAsync(\n  projectRoot: string,\n  allowNetwork: boolean,\n  skipSDKVersionRequirement: boolean | undefined\n): Promise<number> {\n  if (getenv.boolish('EXPO_NO_DOCTOR', false)) {\n    return NO_ISSUES;\n  }\n\n  const { exp, pkg } = getConfig(projectRoot, {\n    strict: true,\n    skipSDKVersionRequirement,\n  });\n\n  ProjectUtils.clearNotification(projectRoot, 'doctor-config-json-not-read');\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(\n    exp,\n    pkg,\n    projectRoot,\n    allowNetwork,\n    skipSDKVersionRequirement\n  );\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  status = Math.max(status, expStatus);\n\n  if (exp && !exp.ignoreNodeModulesValidation) {\n    const nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\ntype ExpoSdkStatus = 0 | 1 | 2;\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<ExpoSdkStatus> {\n  const { pkg } = getPackageJson(projectRoot);\n\n  try {\n    if (\n      !(\n        pkg.dependencies?.['expo'] ||\n        pkg.devDependencies?.['expo'] ||\n        pkg.peerDependencies?.['expo']\n      )\n    ) {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    const mainFilePath = path.join(projectRoot, pkg.main);\n    const mainFile = await fs.readFile(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from 'expo'`) || mainFile.includes(`require('expo')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n\nexport async function validateExpoServersAsync(projectRoot: string): Promise<number> {\n  const domains = [\n    'expo.io',\n    'expo.fyi',\n    'expo.dev',\n    'static.expo.dev',\n    // 'exp.host', - This is causing some intermittent false errors\n  ];\n  const attempts = await Promise.all(\n    domains.map(async domain => ({\n      domain,\n      reachable: await isReachable(domain),\n    }))\n  );\n  const failures = attempts.filter(attempt => !attempt.reachable);\n\n  if (failures.length) {\n    failures.forEach(failure => {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: could not reach \\`${failure.domain}\\`.`,\n        `doctor-server-dashboard-not-reachable-${failure.domain}`\n      );\n    });\n    console.log();\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `We couldn't reach some of our domains, this might cause issues on our website or services.\\nPlease check your network configuration and try to access these domains in your browser.`,\n      'doctor-server-dashboard-not-reachable'\n    );\n    console.log();\n    return WARNING;\n  }\n  return NO_ISSUES;\n}\n"],"file":"../../project/Doctor.js","sourceRoot":"/@expo/xdl@58.0.16/src"}