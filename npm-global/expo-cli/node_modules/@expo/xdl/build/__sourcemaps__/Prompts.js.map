{"version":3,"sources":["Prompts.ts"],"names":["listeners","addInteractionListener","callback","push","removeInteractionListener","listenerIndex","findIndex","_callback","Error","splice","pauseInteractions","options","listener","pause","resumeInteractions","confirmAsync","value","type","name"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,MAAMA,SAAgC,GAAG,EAAzC;AAEA;;;;;;AAKO,SAASC,sBAAT,CAAgCC,QAAhC,EAA+D;AACpEF,EAAAA,SAAS,CAACG,IAAV,CAAeD,QAAf;AACD;;AAEM,SAASE,yBAAT,CAAmCF,QAAnC,EAAkE;AACvE,QAAMG,aAAa,GAAGL,SAAS,CAACM,SAAV,CAAoBC,SAAS,IAAIA,SAAS,KAAKL,QAA/C,CAAtB;;AACA,MAAIG,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxB,UAAM,IAAIG,KAAJ,CACJ,mFADI,CAAN;AAGD;;AACDR,EAAAA,SAAS,CAACS,MAAV,CAAiBJ,aAAjB,EAAgC,CAAhC;AACD;;AAEM,SAASK,iBAAT,CAA2BC,OAA0C,GAAG,EAAxE,EAA4E;AACjF,OAAK,MAAMC,QAAX,IAAuBZ,SAAvB,EAAkC;AAChCY,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAe,SAAGF;AAAlB,KAAD,CAAR;AACD;AACF;;AAEM,SAASG,kBAAT,CAA4BH,OAA0C,GAAG,EAAzE,EAA6E;AAClF,OAAK,MAAMC,QAAX,IAAuBZ,SAAvB,EAAkC;AAChCY,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgB,SAAGF;AAAnB,KAAD,CAAR;AACD;AACF;;AAEM,eAAeI,YAAf,CAA4BJ,OAA5B,EAGc;AACnBD,EAAAA,iBAAiB;AACjB,QAAM;AAAEM,IAAAA;AAAF,MAAY,MAAM,wBAAQ;AAC9BC,IAAAA,IAAI,EAAE,SADwB;AAE9BC,IAAAA,IAAI,EAAE,OAFwB;AAG9B,OAAGP;AAH2B,GAAR,CAAxB;AAKAG,EAAAA,kBAAkB;AAClB,SAAOE,KAAP;AACD","sourcesContent":["import prompts from 'prompts';\n\ntype InteractionOptions = { pause: boolean; canEscape?: boolean };\n\ntype InteractionCallback = (options: InteractionOptions) => void;\n\nconst listeners: InteractionCallback[] = [];\n\n/**\n * Used to pause/resume interaction observers while prompting (made for TerminalUI).\n *\n * @param callback\n */\nexport function addInteractionListener(callback: InteractionCallback) {\n  listeners.push(callback);\n}\n\nexport function removeInteractionListener(callback: InteractionCallback) {\n  const listenerIndex = listeners.findIndex(_callback => _callback === callback);\n  if (listenerIndex === -1) {\n    throw new Error(\n      'Logger.removeInteractionListener(): cannot remove an unregistered event listener.'\n    );\n  }\n  listeners.splice(listenerIndex, 1);\n}\n\nexport function pauseInteractions(options: Omit<InteractionOptions, 'pause'> = {}) {\n  for (const listener of listeners) {\n    listener({ pause: true, ...options });\n  }\n}\n\nexport function resumeInteractions(options: Omit<InteractionOptions, 'pause'> = {}) {\n  for (const listener of listeners) {\n    listener({ pause: false, ...options });\n  }\n}\n\nexport async function confirmAsync(options: {\n  initial?: boolean;\n  message: string;\n}): Promise<boolean> {\n  pauseInteractions();\n  const { value } = await prompts({\n    type: 'confirm',\n    name: 'value',\n    ...options,\n  });\n  resumeInteractions();\n  return value;\n}\n"],"file":"../Prompts.js","sourceRoot":"/@expo/xdl@58.0.16/src"}