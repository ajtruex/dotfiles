{"version":3,"sources":["Analytics.ts"],"names":["PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","_userId","_userTraits","AnalyticsClient","flush","segmentNodeInstance","setSegmentNodeKey","key","Segment","flushInterval","setUserProperties","userId","traits","ensureUserIdentified","setVersionName","version","logEvent","name","properties","track","event","context","getContext","userIdentifyCalled","identify","platform","os","ip","address","device","model","brand","release","app","defaultClient"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA,MAAMA,8BAA8D,GAAG;AACrEC,EAAAA,MAAM,EAAE,KAD6D;AAErEC,EAAAA,KAAK,EAAE,SAF8D;AAGrEC,EAAAA,KAAK,EAAE;AAH8D,CAAvE;;AAMA,IAAIC,OAAJ;;AACA,IAAIC,WAAJ;;AAEO,MAAMC,eAAN,CAAsB;AAAA;AAAA;;AAAA;;AAAA,gDAGW,KAHX;AAAA;;AAKpBC,EAAAA,KAAP,GAAe;AACb,QAAI,KAAKC,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyBD,KAAzB;AACD;AACF;;AAEME,EAAAA,iBAAP,CAAyBC,GAAzB,EAAsC;AACpC;AACA,SAAKF,mBAAL,GAA2B,KAAIG,wBAAJ,EAAYD,GAAZ,EAAiB;AAAEE,MAAAA,aAAa,EAAE;AAAjB,KAAjB,CAA3B;AACD;;AAEMC,EAAAA,iBAAP,CAAyBC,MAAzB,EAAyCC,MAAzC,EAAsD;AACpDX,IAAAA,OAAO,GAAGU,MAAV;AACAT,IAAAA,WAAW,GAAGU,MAAd;AAEA,SAAKC,oBAAL;AACD;;AAEMC,EAAAA,cAAP,CAAsBC,OAAtB,EAAuC;AACrC,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEMC,EAAAA,QAAP,CAAgBC,IAAhB,EAA8BC,UAAe,GAAG,EAAhD,EAAoD;AAClD,QAAI,KAAKb,mBAAL,IAA4BJ,OAAhC,EAAyC;AACvC,WAAKY,oBAAL;AACA,WAAKR,mBAAL,CAAyBc,KAAzB,CAA+B;AAC7BR,QAAAA,MAAM,EAAEV,OADqB;AAE7BmB,QAAAA,KAAK,EAAEH,IAFsB;AAG7BC,QAAAA,UAH6B;AAI7BG,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAJoB,OAA/B;AAMD;AACF;;AAEOT,EAAAA,oBAAR,GAA+B;AAC7B,QAAI,KAAKR,mBAAL,IAA4B,CAAC,KAAKkB,kBAAlC,IAAwDtB,OAA5D,EAAqE;AACnE,WAAKI,mBAAL,CAAyBmB,QAAzB,CAAkC;AAChCb,QAAAA,MAAM,EAAEV,OADwB;AAEhCW,QAAAA,MAAM,EAAEV,WAFwB;AAGhCmB,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAHuB,OAAlC;AAKA,WAAKC,kBAAL,GAA0B,IAA1B;AACD;AACF;;AAEOD,EAAAA,UAAR,GAAqB;AACnB,UAAMG,QAAQ,GAAG5B,8BAA8B,CAAC6B,cAAGD,QAAH,EAAD,CAA9B,IAAiDC,cAAGD,QAAH,EAAlE;;AACA,UAAMJ,OAAO,GAAG;AACdM,MAAAA,EAAE,EAAEA,cAAGC,OAAH,EADU;AAEdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEL,QADD;AAENM,QAAAA,KAAK,EAAEN;AAFD,OAFM;AAMdC,MAAAA,EAAE,EAAE;AACFT,QAAAA,IAAI,EAAEQ,QADJ;AAEFV,QAAAA,OAAO,EAAEW,cAAGM,OAAH;AAFP,OANU;AAUdC,MAAAA,GAAG,EAAE;AAVS,KAAhB;;AAaA,QAAI,KAAKlB,OAAT,EAAkB;AAChBM,MAAAA,OAAO,CAACY,GAAR,GAAc;AACZlB,QAAAA,OAAO,EAAE,KAAKA;AADF,OAAd;AAGD;;AAED,WAAOM,OAAP;AACD;;AAxE0B;;;AA2E7B,MAAMa,aAAa,GAAG,IAAI/B,eAAJ,EAAtB;eAEe+B,a","sourcesContent":["import Segment from 'analytics-node';\nimport os from 'os';\n\nimport ip from './ip';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nlet _userId: string | undefined;\nlet _userTraits: any;\n\nexport class AnalyticsClient {\n  private segmentNodeInstance: Segment | undefined;\n  private version: string | undefined;\n  private userIdentifyCalled: boolean = false;\n\n  public flush() {\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.flush();\n    }\n  }\n\n  public setSegmentNodeKey(key: string) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.segmentNodeInstance = new Segment(key, { flushInterval: 300 });\n  }\n\n  public setUserProperties(userId: string, traits: any) {\n    _userId = userId;\n    _userTraits = traits;\n\n    this.ensureUserIdentified();\n  }\n\n  public setVersionName(version: string) {\n    this.version = version;\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.segmentNodeInstance && _userId) {\n      this.ensureUserIdentified();\n      this.segmentNodeInstance.track({\n        userId: _userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private ensureUserIdentified() {\n    if (this.segmentNodeInstance && !this.userIdentifyCalled && _userId) {\n      this.segmentNodeInstance.identify({\n        userId: _userId,\n        traits: _userTraits,\n        context: this.getContext(),\n      });\n      this.userIdentifyCalled = true;\n    }\n  }\n\n  private getContext() {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this.version) {\n      context.app = {\n        version: this.version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"],"file":"../Analytics.js","sourceRoot":"/@expo/xdl@58.0.16/src"}