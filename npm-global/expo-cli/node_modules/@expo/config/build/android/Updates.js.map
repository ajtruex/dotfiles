{"version":3,"file":"Updates.js","sourceRoot":"","sources":["../../src/android/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpoConfig } from '../Config.types';\nimport {\n  addMetaDataItemToMainApplication,\n  Document,\n  getMainApplication,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n}\n\nexport function getUpdateUrl(config: ExpoConfig, username: string | null) {\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getRuntimeVersion(config: ExpoConfig) {\n  return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;\n}\n\nexport function getSDKVersion(config: ExpoConfig) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: ExpoConfig) {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: ExpoConfig) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(config: ExpoConfig) {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport async function setUpdatesConfig(\n  config: ExpoConfig,\n  manifestDocument: Document,\n  username: string | null\n) {\n  const mainApplication = getMainApplication(manifestDocument);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, manifestDocument);\n}\n\nexport function setVersionsConfig(config: ExpoConfig, manifestDocument: Document) {\n  const mainApplication = getMainApplication(manifestDocument);\n\n  const runtimeVersion = getRuntimeVersion(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return manifestDocument;\n}\n"]}