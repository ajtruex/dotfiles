"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Config;
(function (Config) {
    Config["ENABLED"] = "EXUpdatesEnabled";
    Config["CHECK_ON_LAUNCH"] = "EXUpdatesCheckOnLaunch";
    Config["LAUNCH_WAIT_MS"] = "EXUpdatesLaunchWaitMs";
    Config["RUNTIME_VERSION"] = "EXUpdatesRuntimeVersion";
    Config["SDK_VERSION"] = "EXUpdatesSDKVersion";
    Config["UPDATE_URL"] = "EXUpdatesURL";
})(Config = exports.Config || (exports.Config = {}));
function getUpdateUrl(config, username) {
    const user = typeof config.owner === 'string' ? config.owner : username;
    if (!user) {
        return undefined;
    }
    return `https://exp.host/@${user}/${config.slug}`;
}
exports.getUpdateUrl = getUpdateUrl;
function getRuntimeVersion(config) {
    return typeof config.runtimeVersion === 'string' ? config.runtimeVersion : null;
}
exports.getRuntimeVersion = getRuntimeVersion;
function getSDKVersion(config) {
    return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;
}
exports.getSDKVersion = getSDKVersion;
function getUpdatesEnabled(config) {
    var _a;
    return ((_a = config.updates) === null || _a === void 0 ? void 0 : _a.enabled) !== false;
}
exports.getUpdatesEnabled = getUpdatesEnabled;
function getUpdatesTimeout(config) {
    var _a, _b;
    return (_b = (_a = config.updates) === null || _a === void 0 ? void 0 : _a.fallbackToCacheTimeout) !== null && _b !== void 0 ? _b : 0;
}
exports.getUpdatesTimeout = getUpdatesTimeout;
function getUpdatesCheckOnLaunch(config) {
    var _a, _b;
    if (((_a = config.updates) === null || _a === void 0 ? void 0 : _a.checkAutomatically) === 'ON_ERROR_RECOVERY') {
        return 'NEVER';
    }
    else if (((_b = config.updates) === null || _b === void 0 ? void 0 : _b.checkAutomatically) === 'ON_LOAD') {
        return 'ALWAYS';
    }
    return 'ALWAYS';
}
exports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;
function setUpdatesConfig(config, expoPlist, username) {
    const newExpoPlist = Object.assign(Object.assign({}, expoPlist), { [Config.ENABLED]: getUpdatesEnabled(config), [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config), [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config) });
    const updateUrl = getUpdateUrl(config, username);
    if (updateUrl) {
        newExpoPlist[Config.UPDATE_URL] = updateUrl;
    }
    else {
        delete newExpoPlist[Config.UPDATE_URL];
    }
    return setVersionsConfig(config, newExpoPlist);
}
exports.setUpdatesConfig = setUpdatesConfig;
function setVersionsConfig(config, expoPlist) {
    const newExpoPlist = Object.assign({}, expoPlist);
    const runtimeVersion = getRuntimeVersion(config);
    const sdkVersion = getSDKVersion(config);
    if (runtimeVersion) {
        delete newExpoPlist[Config.SDK_VERSION];
        newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;
    }
    else if (sdkVersion) {
        delete newExpoPlist[Config.RUNTIME_VERSION];
        newExpoPlist[Config.SDK_VERSION] = sdkVersion;
    }
    else {
        delete newExpoPlist[Config.SDK_VERSION];
        delete newExpoPlist[Config.RUNTIME_VERSION];
    }
    return newExpoPlist;
}
exports.setVersionsConfig = setVersionsConfig;
//# sourceMappingURL=Updates.js.map