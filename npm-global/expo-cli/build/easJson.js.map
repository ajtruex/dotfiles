{"version":3,"sources":["../src/easJson.ts"],"names":["Workflow","CredentialsSource","EasJsonSchema","Joi","object","builds","android","pattern","string","workflow","valid","required","unknown","ios","AndroidGenericSchema","credentialsSource","default","gradleCommand","artifactPath","releaseChannel","withoutCredentials","boolean","AndroidManagedSchema","buildType","iOSGenericSchema","scheme","iOSManagedSchema","schemaBuildProfileMap","generic","managed","EasJsonReader","constructor","projectDir","platform","readAsync","buildProfileName","easJson","readFile","androidConfig","includes","validateBuildProfile","Platform","Android","iosConfig","iOS","buildProfile","Error","schema","value","error","validate","stripUnknown","convert","abortEarly","toString","rawFile","fs","path","join","json","JSON","parse"],"mappings":"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","sourcesContent":["import { Platform } from '@expo/eas-build-job';\nimport Joi from '@hapi/joi';\nimport fs from 'fs-extra';\nimport path from 'path';\n\n// TODO(wkozyra95): move it to @expo/config or to separate package\n\n// Workflow is representing different value than BuildType from @expo/eas-build-job\n// Each workflow has a set of BuildTypes available\n// - Generic workflow allows to build 'generic' and 'generic-client'\n// - Managed workflow allows to build 'managed' and 'managed-client'\nexport enum Workflow {\n  Generic = 'generic',\n  Managed = 'managed',\n}\n\nexport enum CredentialsSource {\n  LOCAL = 'local',\n  REMOTE = 'remote',\n  AUTO = 'auto',\n}\n\nexport interface AndroidManagedBuildProfile {\n  workflow: Workflow.Managed;\n  credentialsSource: CredentialsSource;\n  buildType?: 'apk' | 'app-bundle';\n  releaseChannel?: undefined;\n}\n\nexport interface AndroidGenericBuildProfile {\n  workflow: Workflow.Generic;\n  credentialsSource: CredentialsSource;\n  gradleCommand?: string;\n  artifactPath?: string;\n  withoutCredentials?: boolean;\n  releaseChannel?: string;\n}\n\nexport interface iOSManagedBuildProfile {\n  workflow: Workflow.Managed;\n  credentialsSource: CredentialsSource;\n  buildType?: 'archive' | 'simulator';\n  releaseChannel?: undefined;\n}\n\nexport interface iOSGenericBuildProfile {\n  workflow: Workflow.Generic;\n  credentialsSource: CredentialsSource;\n  scheme?: string;\n  artifactPath?: string;\n  releaseChannel?: string;\n}\n\nexport type AndroidBuildProfile = AndroidManagedBuildProfile | AndroidGenericBuildProfile;\nexport type iOSBuildProfile = iOSManagedBuildProfile | iOSGenericBuildProfile;\nexport type BuildProfile = AndroidBuildProfile | iOSBuildProfile;\n\ninterface EasJson {\n  builds: {\n    android?: { [key: string]: AndroidManagedBuildProfile | AndroidGenericBuildProfile };\n    ios?: { [key: string]: iOSManagedBuildProfile | iOSGenericBuildProfile };\n  };\n}\n\n// EasConfig represents eas.json with one specific profile\nexport interface EasConfig {\n  builds: {\n    android?: AndroidManagedBuildProfile | AndroidGenericBuildProfile;\n    ios?: iOSManagedBuildProfile | iOSGenericBuildProfile;\n  };\n}\n\nconst EasJsonSchema = Joi.object({\n  builds: Joi.object({\n    android: Joi.object().pattern(\n      Joi.string(),\n      Joi.object({\n        workflow: Joi.string().valid('generic', 'managed').required(),\n      }).unknown(true) // profile is validated further only if build is for that platform\n    ),\n    ios: Joi.object().pattern(\n      Joi.string(),\n      Joi.object({\n        workflow: Joi.string().valid('generic', 'managed').required(),\n      }).unknown(true) // profile is validated further only if build is for that platform\n    ),\n  }),\n});\n\nconst AndroidGenericSchema = Joi.object({\n  workflow: Joi.string().valid('generic').required(),\n  credentialsSource: Joi.string().valid('local', 'remote', 'auto').default('auto'),\n  gradleCommand: Joi.string(),\n  artifactPath: Joi.string(),\n  releaseChannel: Joi.string(),\n  withoutCredentials: Joi.boolean(),\n});\n\nconst AndroidManagedSchema = Joi.object({\n  workflow: Joi.string().valid('managed').required(),\n  credentialsSource: Joi.string().valid('local', 'remote', 'auto').default('auto'),\n  buildType: Joi.string().valid('apk', 'app-bundle').default('app-bundle'),\n});\n\nconst iOSGenericSchema = Joi.object({\n  workflow: Joi.string().valid('generic').required(),\n  credentialsSource: Joi.string().valid('local', 'remote', 'auto').default('auto'),\n  scheme: Joi.string(),\n  releaseChannel: Joi.string(),\n  artifactPath: Joi.string(),\n});\n\nconst iOSManagedSchema = Joi.object({\n  workflow: Joi.string().valid('managed').required(),\n  credentialsSource: Joi.string().valid('local', 'remote', 'auto').default('auto'),\n  buildType: Joi.string().valid('archive', 'simulator'),\n});\n\nconst schemaBuildProfileMap: Record<string, Record<string, Joi.Schema>> = {\n  android: {\n    generic: AndroidGenericSchema,\n    managed: AndroidManagedSchema,\n  },\n  ios: {\n    managed: iOSManagedSchema,\n    generic: iOSGenericSchema,\n  },\n};\n\nexport class EasJsonReader {\n  constructor(private projectDir: string, private platform: 'android' | 'ios' | 'all') {}\n\n  public async readAsync(buildProfileName: string): Promise<EasConfig> {\n    const easJson = await this.readFile();\n\n    let androidConfig;\n    if (['android', 'all'].includes(this.platform)) {\n      androidConfig = this.validateBuildProfile<AndroidBuildProfile>(\n        Platform.Android,\n        buildProfileName,\n        easJson.builds?.android?.[buildProfileName]\n      );\n    }\n    let iosConfig;\n    if (['ios', 'all'].includes(this.platform)) {\n      iosConfig = this.validateBuildProfile<iOSBuildProfile>(\n        Platform.iOS,\n        buildProfileName,\n        easJson.builds?.ios?.[buildProfileName]\n      );\n    }\n    return {\n      builds: {\n        ...(androidConfig ? { android: androidConfig } : {}),\n        ...(iosConfig ? { ios: iosConfig } : {}),\n      },\n    };\n  }\n\n  private validateBuildProfile<T extends BuildProfile>(\n    platform: 'android' | 'ios' | 'all',\n    buildProfileName: string,\n    buildProfile?: { workflow: Workflow } & object\n  ): T {\n    if (!buildProfile) {\n      throw new Error(`There is no profile named ${buildProfileName} for platform ${platform}`);\n    }\n    const schema = schemaBuildProfileMap[platform][buildProfile?.workflow];\n    if (!schema) {\n      throw new Error('invalid workflow'); // this should be validated earlier\n    }\n    const { value, error } = schema.validate(buildProfile, {\n      stripUnknown: true,\n      convert: true,\n      abortEarly: false,\n    });\n\n    if (error) {\n      throw new Error(\n        `Object \"${platform}.${buildProfileName}\" in eas.json is not valid [${error.toString()}]`\n      );\n    }\n    return value;\n  }\n\n  private async readFile(): Promise<EasJson> {\n    const rawFile = await fs.readFile(path.join(this.projectDir, 'eas.json'), 'utf-8');\n    const json = JSON.parse(rawFile);\n\n    const { value, error } = EasJsonSchema.validate(json, {\n      abortEarly: false,\n    });\n\n    if (error) {\n      throw new Error(`eas.json is not valid [${error.toString()}]`);\n    }\n    return value;\n  }\n}\n"],"file":"easJson.js"}