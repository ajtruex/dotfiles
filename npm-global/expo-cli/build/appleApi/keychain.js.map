{"version":3,"sources":["../../src/appleApi/keychain.ts"],"names":["KEYCHAIN_TYPE","IS_MAC","process","platform","NO_PASSWORD_REGEX","EXPO_NO_KEYCHAIN","getenv","boolish","deletePasswordAsync","username","serviceName","Promise","resolve","reject","keychain","deletePassword","account","service","type","error","message","match","getPasswordAsync","getPassword","password","setPasswordAsync","setPassword"],"mappings":";;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AADA;AAGA,MAAMA,aAAa,GAAG,UAAtB;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,QAAR,KAAqB,QAApC;AACA,MAAMC,iBAAiB,GAAG,yBAA1B,C,CAEA;AACA;;AACO,MAAMC,gBAAgB,GAAGC,kBAAOC,OAAP,CAAe,kBAAf,EAAmC,KAAnC,CAAzB;;;;AAQA,SAASC,mBAAT,CAA6B;AAClCC,EAAAA,QADkC;AAElCC,EAAAA;AAFkC,CAA7B,EAG6D;AAClE,MAAI,CAACT,MAAL,EAAa;AACX,WAAOU,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,SAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,wBAASC,cAAT,CACE;AAAEC,MAAAA,OAAO,EAAEP,QAAX;AAAqBQ,MAAAA,OAAO,EAAEP,WAA9B;AAA2CQ,MAAAA,IAAI,EAAElB;AAAjD,KADF,EAEGmB,KAAD,IAAkB;AAChB,UAAIA,KAAJ,EAAW;AACT,YAAIA,KAAK,CAACC,OAAN,CAAcC,KAAd,CAAoBjB,iBAApB,CAAJ,EAA4C;AAC1C,iBAAOQ,OAAO,CAAC,KAAD,CAAd;AACD;;AACDC,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD,OALD,MAKO;AACLP,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KAXH;AAaD,GAdM,CAAP;AAeD;;AAEM,SAASU,gBAAT,CAA0B;AAC/Bb,EAAAA,QAD+B;AAE/BC,EAAAA;AAF+B,CAA1B,EAGmE;AACxE,MAAI,CAACT,MAAL,EAAa;AACX,WAAOU,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,SAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,wBAASS,WAAT,CACE;AAAEP,MAAAA,OAAO,EAAEP,QAAX;AAAqBQ,MAAAA,OAAO,EAAEP,WAA9B;AAA2CQ,MAAAA,IAAI,EAAElB;AAAjD,KADF,EAEE,CAACmB,KAAD,EAAeK,QAAf,KAAoC;AAClC,UAAIL,KAAJ,EAAW;AACT,YAAIA,KAAK,CAACC,OAAN,CAAcC,KAAd,CAAoBjB,iBAApB,CAAJ,EAA4C;AAC1C,iBAAOQ,OAAO,CAAC,IAAD,CAAd;AACD;;AACDC,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD,OALD,MAKO;AACLP,QAAAA,OAAO,CAACY,QAAD,CAAP;AACD;AACF,KAXH;AAaD,GAdM,CAAP;AAeD;;AAEM,SAASC,gBAAT,CAA0B;AAC/Bf,EAAAA,WAD+B;AAE/BD,EAAAA,QAF+B;AAG/Be,EAAAA;AAH+B,CAA1B,EAI2B;AAChC,MAAI,CAACvB,MAAL,EAAa;AACX,WAAOU,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AACD,SAAO,IAAID,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,wBAASY,WAAT,CACE;AAAEV,MAAAA,OAAO,EAAEP,QAAX;AAAqBQ,MAAAA,OAAO,EAAEP,WAA9B;AAA2Cc,MAAAA,QAA3C;AAAqDN,MAAAA,IAAI,EAAElB;AAA3D,KADF,EAEGmB,KAAD,IAAkB;AAChB,UAAIA,KAAJ,EAAW;AACTN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACD,OAFD,MAEO;AACLP,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KARH;AAUD,GAXM,CAAP;AAYD","sourcesContent":["import getenv from 'getenv';\n// @ts-ignore\nimport keychain from 'keychain';\n\nconst KEYCHAIN_TYPE = 'internet';\nconst IS_MAC = process.platform === 'darwin';\nconst NO_PASSWORD_REGEX = /Could not find password/;\n\n// When enabled, the password will not only be skipped but also deleted.\n// This makes it easier to completely opt-out of Keychain functionality.\nexport const EXPO_NO_KEYCHAIN = getenv.boolish('EXPO_NO_KEYCHAIN', false);\n\ntype Credentials = {\n  serviceName: string;\n  username: string;\n  password: string;\n};\n\nexport function deletePasswordAsync({\n  username,\n  serviceName,\n}: Pick<Credentials, 'username' | 'serviceName'>): Promise<boolean> {\n  if (!IS_MAC) {\n    return Promise.resolve(false);\n  }\n\n  return new Promise((resolve, reject) => {\n    keychain.deletePassword(\n      { account: username, service: serviceName, type: KEYCHAIN_TYPE },\n      (error: Error) => {\n        if (error) {\n          if (error.message.match(NO_PASSWORD_REGEX)) {\n            return resolve(false);\n          }\n          reject(error);\n        } else {\n          resolve(true);\n        }\n      }\n    );\n  });\n}\n\nexport function getPasswordAsync({\n  username,\n  serviceName,\n}: Pick<Credentials, 'serviceName' | 'username'>): Promise<string | null> {\n  if (!IS_MAC) {\n    return Promise.resolve(null);\n  }\n\n  return new Promise((resolve, reject) => {\n    keychain.getPassword(\n      { account: username, service: serviceName, type: KEYCHAIN_TYPE },\n      (error: Error, password: string) => {\n        if (error) {\n          if (error.message.match(NO_PASSWORD_REGEX)) {\n            return resolve(null);\n          }\n          reject(error);\n        } else {\n          resolve(password);\n        }\n      }\n    );\n  });\n}\n\nexport function setPasswordAsync({\n  serviceName,\n  username,\n  password,\n}: Credentials): Promise<boolean> {\n  if (!IS_MAC) {\n    return Promise.resolve(false);\n  }\n  return new Promise((resolve, reject) => {\n    keychain.setPassword(\n      { account: username, service: serviceName, password, type: KEYCHAIN_TYPE },\n      (error: Error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(true);\n        }\n      }\n    );\n  });\n}\n"],"file":"keychain.js"}