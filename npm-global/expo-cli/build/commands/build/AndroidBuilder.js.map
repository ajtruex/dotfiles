{"version":3,"sources":["../../../src/commands/build/AndroidBuilder.ts"],"names":["ANDROID","PLATFORMS","AndroidBuilder","BaseBuilder","run","options","type","utils","askBuildType","apk","Android","checkSplashScreenImages","projectDir","checkForBuildInProgress","collectAndValidateCredentials","publishedExpIds","publicUrl","undefined","ensureReleaseExists","checkStatusBeforeBuild","build","checkProjectConfig","checkIfSdkIsSupported","manifest","sdkVersion","updateProjectConfig","platform","nonInteractive","parent","skipCredentialsCheck","ctx","Context","init","experienceName","owner","user","username","slug","clearCredentials","BuildError","RemoveKeystore","paramKeystore","keystore","skipKeystoreValidation","SetupAndroidKeystore","allowMissingKeystore"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,sBAApB;;AAEe,MAAMC,cAAN,SAA6BC,sBAA7B,CAAyC;AACtD,QAAMC,GAAN,GAA2B;AACzB;AACA,SAAKC,OAAL,CAAaC,IAAb,GAAoB,MAAMC,KAAK,GAACC,YAAN,CAAmB,KAAKH,OAAL,CAAaC,IAAhC,EAAuC;AAC/DG,MAAAA,GAAG,EAAE,+EAD0D;AAE/D,oBAAc;AAFiD,KAAvC,CAA1B,CAFyB,CAOzB;;AACA,UAAMC,eAAQC,uBAAR,CAAgC,KAAKC,UAArC,CAAN,CARyB,CAUzB;;AACA,UAAM,KAAKC,uBAAL,EAAN,CAXyB,CAYzB;;AACA,UAAM,KAAKC,6BAAL,EAAN,CAbyB,CAczB;;AACA,UAAMC,eAAe,GAAG,KAAKV,OAAL,CAAaW,SAAb,GAAyBC,SAAzB,GAAqC,MAAM,KAAKC,mBAAL,EAAnE;;AAEA,QAAI,CAAC,KAAKb,OAAL,CAAaW,SAAlB,EAA6B;AAC3B,YAAM,KAAKG,sBAAL,EAAN;AACD,KAnBwB,CAqBzB;;;AACA,UAAM,KAAKC,KAAL,CAAWL,eAAX,CAAN;AACD;;AAED,QAAMM,kBAAN,GAA0C;AACxC;AACA;AACA,UAAM,MAAMA,kBAAN,EAAN;AAEA,UAAMd,KAAK,GAACe,qBAAN,CAA4B,KAAKC,QAAL,CAAcC,UAA1C,EAAuDxB,OAAvD,CAAN,CALwC,CAOxC;;AACA,UAAM,+CAAsB,KAAKY,UAA3B,CAAN;AAEA,SAAKa,mBAAL;AACD;;AAEDC,EAAAA,QAAQ,GAAa;AACnB,WAAO1B,OAAP;AACD;;AAED,QAAMc,6BAAN,GAAqD;AAAA;;AACnD,UAAMa,cAAc,2BAAG,KAAKtB,OAAL,CAAauB,MAAhB,yDAAG,qBAAqBD,cAA5C;AACA,UAAME,oBAAoB,GAAG,KAAKxB,OAAL,CAAawB,oBAAb,KAAsC,IAAnE;AAEA,UAAMC,GAAG,GAAG,KAAIC,sBAAJ,GAAZ;AACA,UAAMD,GAAG,CAACE,IAAJ,CAAS,KAAKpB,UAAd,EAA0B;AAAEe,MAAAA;AAAF,KAA1B,CAAN;AAEA,UAAMM,cAAc,GAAI,IAAGH,GAAG,CAACP,QAAJ,CAAaW,KAAb,IAAsBJ,GAAG,CAACK,IAAJ,CAASC,QAAS,IAAGN,GAAG,CAACP,QAAJ,CAAac,IAAK,EAAxF;;AAEA,QAAI,KAAKhC,OAAL,CAAaiC,gBAAjB,EAAmC;AACjC,UAAIX,cAAJ,EAAoB;AAClB,cAAM,KAAIY,qBAAJ,EACJ,8KADI,CAAN;AAGD;;AACD,YAAM,oCAAsBT,GAAtB,EAA2B,KAAIU,iCAAJ,EAAmBP,cAAnB,CAA3B,CAAN;AACD;;AAED,UAAMQ,aAAa,GAAG,MAAM,8CAAsB,KAAKpC,OAA3B,CAA5B;;AACA,QAAIoC,aAAJ,EAAmB;AACjB,YAAM,oCAAYX,GAAZ,EAAiB;AACrBG,QAAAA,cADqB;AAErBS,QAAAA,QAAQ,EAAED,aAFW;AAGrBE,QAAAA,sBAAsB,EAAEd;AAHH,OAAjB,CAAN;AAKD,KAND,MAMO;AACL,YAAM,oCACJC,GADI,EAEJ,KAAIc,4CAAJ,EAAyBX,cAAzB,EAAyC;AACvCN,QAAAA,cADuC;AAEvCkB,QAAAA,oBAAoB,EAAE,IAFiB;AAGvCF,QAAAA,sBAAsB,EAAEd;AAHe,OAAzC,CAFI,CAAN;AAQD;AACF;;AA9EqD","sourcesContent":["import { Android } from '@expo/xdl';\n\nimport { Context } from '../../credentials';\nimport { runCredentialsManager } from '../../credentials/route';\nimport {\n  getKeystoreFromParams,\n  RemoveKeystore,\n  useKeystore,\n} from '../../credentials/views/AndroidKeystore';\nimport { SetupAndroidKeystore } from '../../credentials/views/SetupAndroidKeystore';\nimport { getOrPromptForPackage } from '../eject/ConfigValidation';\nimport BaseBuilder from './BaseBuilder';\nimport BuildError from './BuildError';\nimport { Platform, PLATFORMS } from './constants';\nimport * as utils from './utils';\n\nconst { ANDROID } = PLATFORMS;\n\nexport default class AndroidBuilder extends BaseBuilder {\n  async run(): Promise<void> {\n    // This gets run after all other validation to prevent users from having to answer this question multiple times.\n    this.options.type = await utils.askBuildType(this.options.type!, {\n      apk: 'Build a package to deploy to the store or install directly on Android devices',\n      'app-bundle': 'Build an optimized bundle for the store',\n    });\n\n    // Check SplashScreen images sizes\n    await Android.checkSplashScreenImages(this.projectDir);\n\n    // Check the status of any current builds\n    await this.checkForBuildInProgress();\n    // Check for existing credentials, collect any missing credentials, and validate them\n    await this.collectAndValidateCredentials();\n    // Publish the current experience, if necessary\n    const publishedExpIds = this.options.publicUrl ? undefined : await this.ensureReleaseExists();\n\n    if (!this.options.publicUrl) {\n      await this.checkStatusBeforeBuild();\n    }\n\n    // Initiate a build\n    await this.build(publishedExpIds);\n  }\n\n  async checkProjectConfig(): Promise<void> {\n    // Run this first because the error messages are related\n    // to ExpoKit which is harder to change than the bundle ID.\n    await super.checkProjectConfig();\n\n    await utils.checkIfSdkIsSupported(this.manifest.sdkVersion!, ANDROID);\n\n    // Check the android package name\n    await getOrPromptForPackage(this.projectDir);\n\n    this.updateProjectConfig();\n  }\n\n  platform(): Platform {\n    return ANDROID;\n  }\n\n  async collectAndValidateCredentials(): Promise<void> {\n    const nonInteractive = this.options.parent?.nonInteractive;\n    const skipCredentialsCheck = this.options.skipCredentialsCheck === true;\n\n    const ctx = new Context();\n    await ctx.init(this.projectDir, { nonInteractive });\n\n    const experienceName = `@${ctx.manifest.owner || ctx.user.username}/${ctx.manifest.slug}`;\n\n    if (this.options.clearCredentials) {\n      if (nonInteractive) {\n        throw new BuildError(\n          'Clearing your Android build credentials from our build servers is a PERMANENT and IRREVERSIBLE action, it\\'s not supported when combined with the \"--non-interactive\" option'\n        );\n      }\n      await runCredentialsManager(ctx, new RemoveKeystore(experienceName));\n    }\n\n    const paramKeystore = await getKeystoreFromParams(this.options);\n    if (paramKeystore) {\n      await useKeystore(ctx, {\n        experienceName,\n        keystore: paramKeystore,\n        skipKeystoreValidation: skipCredentialsCheck,\n      });\n    } else {\n      await runCredentialsManager(\n        ctx,\n        new SetupAndroidKeystore(experienceName, {\n          nonInteractive,\n          allowMissingKeystore: true,\n          skipKeystoreValidation: skipCredentialsCheck,\n        })\n      );\n    }\n  }\n}\n"],"file":"AndroidBuilder.js"}