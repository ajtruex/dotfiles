{"version":3,"sources":["../../../../src/commands/eas-build/build/metadata.ts"],"names":["packageJSON","require","collectMetadata","ctx","credentialsSource","appVersion","commandCtx","exp","version","cliVersion","workflow","buildProfile","sdkVersion","trackingContext","trackingCtx","releaseChannel"],"mappings":";;;;;;;AAGA;;;;;AAKA,MAAMA,WAAW,GAAGC,OAAO,CAAC,0BAAD,CAA3B;;AA6CA,eAAeC,eAAf,CACEC,GADF,EAEE;AACEC,EAAAA;AADF,CAFF,EAO0B;AACxB,SAAO;AACLC,IAAAA,UAAU,EAAEF,GAAG,CAACG,UAAJ,CAAeC,GAAf,CAAmBC,OAD1B;AAELC,IAAAA,UAAU,EAAET,WAAW,CAACQ,OAFnB;AAGLE,IAAAA,QAAQ,EAAEP,GAAG,CAACQ,YAAJ,CAAiBD,QAHtB;AAILN,IAAAA,iBAJK;AAKLQ,IAAAA,UAAU,EAAET,GAAG,CAACG,UAAJ,CAAeC,GAAf,CAAmBK,UAL1B;AAMLC,IAAAA,eAAe,EAAEV,GAAG,CAACW,WANhB;AAOLC,IAAAA,cAAc,EAAEZ,GAAG,CAACQ,YAAJ,CAAiBI;AAP5B,GAAP;AASD","sourcesContent":["import { CredentialsSource, Workflow } from '../../../easJson';\nimport { BuilderContext, Platform, TrackingContext } from '../types';\n\n/**\n * We use require() to exclude package.json from TypeScript's analysis since it lives outside\n * the src directory and would change the directory structure of the emitted files\n * under the build directory\n */\nconst packageJSON = require('../../../../package.json');\n\nexport type BuildMetadata = {\n  /**\n   * Application version (the expo.version key in app.json/app.config.js)\n   */\n  appVersion: string;\n\n  /**\n   * Expo CLI version\n   */\n  cliVersion: string;\n\n  /**\n   * Build workflow\n   * It's either 'generic' or 'managed'\n   */\n  workflow: Workflow;\n\n  /**\n   * Credentials source\n   * Credentials could be obtained either from credential.json or Expo servers.\n   */\n  credentialsSource?: CredentialsSource.LOCAL | CredentialsSource.REMOTE;\n\n  /**\n   * Expo SDK version\n   * It's determined by the expo package version in package.json.\n   * It's undefined if the expo package is not installed for the project.\n   */\n  sdkVersion?: string;\n\n  /**\n   * Release channel (for expo-updates)\n   * It's undefined if the expo-updates package is not installed for the project.\n   */\n  releaseChannel?: string;\n\n  /**\n   * Tracking context\n   * It's used to track build process across different Expo services and tools.\n   */\n  trackingContext: TrackingContext;\n};\n\nasync function collectMetadata<T extends Platform>(\n  ctx: BuilderContext<T>,\n  {\n    credentialsSource,\n  }: {\n    credentialsSource?: CredentialsSource.LOCAL | CredentialsSource.REMOTE;\n  }\n): Promise<BuildMetadata> {\n  return {\n    appVersion: ctx.commandCtx.exp.version!,\n    cliVersion: packageJSON.version,\n    workflow: ctx.buildProfile.workflow,\n    credentialsSource,\n    sdkVersion: ctx.commandCtx.exp.sdkVersion,\n    trackingContext: ctx.trackingCtx,\n    releaseChannel: ctx.buildProfile.releaseChannel,\n  };\n}\n\nexport { collectMetadata };\n"],"file":"metadata.js"}