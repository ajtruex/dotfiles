{"version":3,"sources":["../../../../src/commands/eas-build/utils/git.ts"],"names":["ensureGitRepoExistsAsync","err","Error","log","chalk","yellow","confirmInit","message","type","name","initial","validate","input","ensureGitStatusIsCleanAsync","changes","length","DirtyGitTreeError","makeProjectTarballAsync","tarPath","spinner","start","cwd","succeed","size","fs","stat","reviewAndCommitChangesAsync","commitMessage","nonInteractive","CommandError","newLine","confirm","modifyAndCommitAsync","callback","startMessage","successMessage","commitSuccessMessage","green","figures","tick","e","fail"],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport commandExists from 'command-exists';\nimport figures from 'figures';\nimport fs from 'fs-extra';\nimport ora from 'ora';\n\nimport CommandError from '../../../CommandError';\nimport {\n  gitDiffAsync,\n  gitDoesRepoExistAsync,\n  gitRootDirectory,\n  gitStatusAsync,\n} from '../../../git';\nimport log from '../../../log';\nimport prompts, { confirmAsync } from '../../../prompts';\n\nasync function ensureGitRepoExistsAsync(): Promise<void> {\n  try {\n    await commandExists('git');\n  } catch (err) {\n    throw new Error('git command has not been found, install it before proceeding');\n  }\n\n  if (await gitDoesRepoExistAsync()) {\n    return;\n  }\n\n  log(log.chalk.yellow(\"It looks like you haven't initialized the git repository yet.\"));\n  log(log.chalk.yellow('EAS Build requires you to use a git repository for your project.'));\n\n  const confirmInit = await confirmAsync({\n    message: `Would you like to run 'git init' in the current directory?`,\n  });\n  if (!confirmInit) {\n    throw new Error(\n      'A git repository is required for building your project. Initialize it and run this command again.'\n    );\n  }\n  await spawnAsync('git', ['init']);\n\n  log(\"We're going to make an initial commit for you repository.\");\n\n  const { message } = await prompts({\n    type: 'text',\n    name: 'message',\n    message: 'Commit message:',\n    initial: 'Initial commit',\n    validate: input => input !== '',\n  });\n  await spawnAsync('git', ['add', '-A']);\n  await spawnAsync('git', ['commit', '-m', message]);\n}\n\nasync function ensureGitStatusIsCleanAsync(): Promise<void> {\n  const changes = await gitStatusAsync();\n  if (changes.length > 0) {\n    throw new DirtyGitTreeError(\n      'Please commit all changes before building your project. Aborting...'\n    );\n  }\n}\n\nclass DirtyGitTreeError extends Error {}\n\nasync function makeProjectTarballAsync(tarPath: string): Promise<number> {\n  const spinner = ora('Making project tarball').start();\n  await spawnAsync(\n    'git',\n    ['archive', '--format=tar.gz', '--prefix', 'project/', '-o', tarPath, 'HEAD'],\n    { cwd: await gitRootDirectory() }\n  );\n  spinner.succeed('Project tarball created.');\n\n  const { size } = await fs.stat(tarPath);\n  return size;\n}\n\nasync function reviewAndCommitChangesAsync(\n  commitMessage: string,\n  { nonInteractive }: { nonInteractive: boolean }\n): Promise<void> {\n  if (nonInteractive) {\n    throw new CommandError(\n      'Cannot commit changes when --non-interactive is specified. Run the command in interactive mode to review and commit changes.'\n    );\n  }\n\n  log('Please review the following changes and pass the message to make the commit.');\n  log.newLine();\n  await gitDiffAsync();\n  log.newLine();\n\n  const confirm = await confirmAsync({\n    message: 'Can we commit these changes for you?',\n  });\n\n  if (!confirm) {\n    throw new Error('Aborting commit. Please review and commit the changes manually.');\n  }\n\n  const { message } = await prompts({\n    type: 'text',\n    name: 'message',\n    message: 'Commit message:',\n    initial: commitMessage,\n    validate: input => input !== '',\n  });\n\n  // Add changed files only\n  await spawnAsync('git', ['add', '-u']);\n  await spawnAsync('git', ['commit', '-m', message]);\n}\n\nasync function modifyAndCommitAsync(\n  callback: () => Promise<void>,\n  {\n    startMessage,\n    successMessage,\n    commitMessage,\n    commitSuccessMessage,\n    nonInteractive,\n  }: {\n    startMessage: string;\n    successMessage: string;\n    commitMessage: string;\n    commitSuccessMessage: string;\n    nonInteractive: boolean;\n  }\n) {\n  const spinner = ora(startMessage);\n\n  try {\n    await callback();\n\n    await ensureGitStatusIsCleanAsync();\n\n    spinner.succeed();\n  } catch (err) {\n    if (err instanceof DirtyGitTreeError) {\n      spinner.succeed(successMessage);\n      log.newLine();\n\n      try {\n        await reviewAndCommitChangesAsync(commitMessage, {\n          nonInteractive,\n        });\n\n        log(`${chalk.green(figures.tick)} ${commitSuccessMessage}.`);\n      } catch (e) {\n        throw new Error(\n          \"Aborting, run the command again once you're ready. Make sure to commit any changes you've made.\"\n        );\n      }\n    } else {\n      spinner.fail();\n      throw err;\n    }\n  }\n}\n\nexport {\n  DirtyGitTreeError,\n  ensureGitRepoExistsAsync,\n  ensureGitStatusIsCleanAsync,\n  makeProjectTarballAsync,\n  reviewAndCommitChangesAsync,\n  modifyAndCommitAsync,\n};\n"],"file":"git.js"}