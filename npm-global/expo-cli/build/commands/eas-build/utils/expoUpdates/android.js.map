{"version":3,"sources":["../../../../../src/commands/eas-build/utils/expoUpdates/android.ts"],"names":["getAndroidBuildScript","projectDir","exp","androidBuildScriptPath","Error","JSON","stringify","path","relative","join","setUpdatesVersionsAndroidAsync","isUpdatesConfigured","isUpdatesConfiguredAndroidAsync","CommandError","androidManifestPath","data","androidManifestJSON","getAndroidManifestJSONAsync","runtimeVersion","AndroidConfig","Updates","getRuntimeVersion","sdkVersion","getSDKVersion","currentRuntimeVersion","getAndroidMetadataValue","Config","RUNTIME_VERSION","currentSdkVersion","SDK_VERSION","result","setVersionsConfig","Manifest","writeAndroidManifestAsync","configureUpdatesAndroidAsync","username","UserManager","getCurrentUsernameAsync","buildGradlePath","getAndroidBuildGradlePath","buildGradleContent","getAndroidBuildGradleContentAsync","hasBuildScriptApply","androidBuildScript","fs","writeFile","isMetadataSetAndroid","setUpdatesConfig","pathExists","readFile","split","some","line","replace","Paths","getAndroidManifestAsync","readAndroidManifestAsync","currentUpdateUrl","getUpdateUrl","setUpdateUrl","UPDATE_URL","Boolean","isVersionsSetAndroid","name","mainApplication","manifest","application","filter","e","hasOwnProperty","item","find","$","undefined"],"mappings":"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","sourcesContent":["import { AndroidConfig, ExpoConfig, projectHasModule } from '@expo/config';\nimport { UserManager } from '@expo/xdl';\nimport * as fs from 'fs-extra';\nimport path from 'path';\n\nimport CommandError from '../../../../CommandError';\nimport getConfigurationOptionsAsync from './getConfigurationOptions';\nimport isExpoUpdatesInstalled from './isExpoUpdatesInstalled';\n\nfunction getAndroidBuildScript(projectDir: string, exp: ExpoConfig) {\n  const androidBuildScriptPath = projectHasModule(\n    'expo-updates/scripts/create-manifest-android.gradle',\n    projectDir,\n    exp\n  );\n\n  if (!androidBuildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  return `apply from: ${JSON.stringify(\n    path.relative(path.join(projectDir, 'android', 'app'), androidBuildScriptPath)\n  )}`;\n}\n\nexport async function setUpdatesVersionsAndroidAsync({\n  projectDir,\n  exp,\n}: {\n  projectDir: string;\n  exp: ExpoConfig;\n}) {\n  if (!isExpoUpdatesInstalled(projectDir)) {\n    return;\n  }\n\n  const isUpdatesConfigured = await isUpdatesConfiguredAndroidAsync(projectDir);\n\n  if (!isUpdatesConfigured) {\n    throw new CommandError(\n      '\"expo-updates\" is installed, but not configured in the project. Please run \"expo eas:build:init\" first to configure \"expo-updates\"'\n    );\n  }\n\n  const {\n    path: androidManifestPath,\n    data: androidManifestJSON,\n  } = await getAndroidManifestJSONAsync(projectDir);\n\n  const runtimeVersion = AndroidConfig.Updates.getRuntimeVersion(exp);\n  const sdkVersion = AndroidConfig.Updates.getSDKVersion(exp);\n\n  const currentRuntimeVersion = getAndroidMetadataValue(\n    androidManifestJSON,\n    AndroidConfig.Updates.Config.RUNTIME_VERSION\n  );\n\n  const currentSdkVersion = getAndroidMetadataValue(\n    androidManifestJSON,\n    AndroidConfig.Updates.Config.SDK_VERSION\n  );\n\n  if (\n    (runtimeVersion && runtimeVersion === currentRuntimeVersion) ||\n    (sdkVersion && sdkVersion === currentSdkVersion)\n  ) {\n    return;\n  }\n\n  const result = await AndroidConfig.Updates.setVersionsConfig(exp, androidManifestJSON);\n\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n}\n\nexport async function configureUpdatesAndroidAsync({\n  projectDir,\n  exp,\n}: {\n  projectDir: string;\n  exp: ExpoConfig;\n}) {\n  if (!isExpoUpdatesInstalled(projectDir)) {\n    return;\n  }\n\n  const username = await UserManager.getCurrentUsernameAsync();\n  const buildGradlePath = getAndroidBuildGradlePath(projectDir);\n  const buildGradleContent = await getAndroidBuildGradleContentAsync(buildGradlePath);\n\n  if (!hasBuildScriptApply(buildGradleContent, projectDir, exp)) {\n    const androidBuildScript = getAndroidBuildScript(projectDir, exp);\n\n    await fs.writeFile(\n      buildGradlePath,\n      `${buildGradleContent}\\n// Integration with Expo updates\\n${androidBuildScript}\\n`\n    );\n  }\n\n  const {\n    path: androidManifestPath,\n    data: androidManifestJSON,\n  } = await getAndroidManifestJSONAsync(projectDir);\n\n  if (!isMetadataSetAndroid(androidManifestJSON, exp, username)) {\n    const result = await AndroidConfig.Updates.setUpdatesConfig(exp, androidManifestJSON, username);\n\n    await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n  }\n}\n\nasync function isUpdatesConfiguredAndroidAsync(projectDir: string) {\n  const { exp, username } = await getConfigurationOptionsAsync(projectDir);\n\n  const buildGradlePath = getAndroidBuildGradlePath(projectDir);\n  const buildGradleContent = await getAndroidBuildGradleContentAsync(buildGradlePath);\n\n  if (!hasBuildScriptApply(buildGradleContent, projectDir, exp)) {\n    return false;\n  }\n\n  const { data: androidManifestJSON } = await getAndroidManifestJSONAsync(projectDir);\n\n  if (!isMetadataSetAndroid(androidManifestJSON, exp, username)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getAndroidBuildGradlePath(projectDir: string) {\n  const buildGradlePath = path.join(projectDir, 'android', 'app', 'build.gradle');\n\n  return buildGradlePath;\n}\n\nasync function getAndroidBuildGradleContentAsync(buildGradlePath: string) {\n  if (!(await fs.pathExists(buildGradlePath))) {\n    throw new Error(`Couldn't find gradle build script at ${buildGradlePath}`);\n  }\n\n  const buildGradleContent = await fs.readFile(buildGradlePath, 'utf-8');\n\n  return buildGradleContent;\n}\n\nfunction hasBuildScriptApply(\n  buildGradleContent: string,\n  projectDir: string,\n  exp: ExpoConfig\n): boolean {\n  const androidBuildScript = getAndroidBuildScript(projectDir, exp);\n\n  return (\n    buildGradleContent\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nasync function getAndroidManifestJSONAsync(projectDir: string) {\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectDir);\n\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectDir}\"`);\n  }\n\n  const androidManifestJSON = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n\n  return {\n    path: androidManifestPath,\n    data: androidManifestJSON,\n  };\n}\n\nfunction isMetadataSetAndroid(\n  androidManifestJSON: AndroidConfig.Manifest.Document,\n  exp: ExpoConfig,\n  username: string | null\n): boolean {\n  const currentUpdateUrl = AndroidConfig.Updates.getUpdateUrl(exp, username);\n\n  const setUpdateUrl = getAndroidMetadataValue(\n    androidManifestJSON,\n    AndroidConfig.Updates.Config.UPDATE_URL\n  );\n\n  return Boolean(\n    isVersionsSetAndroid(androidManifestJSON) &&\n      currentUpdateUrl &&\n      setUpdateUrl === currentUpdateUrl\n  );\n}\n\nfunction isVersionsSetAndroid(androidManifestJSON: AndroidConfig.Manifest.Document): boolean {\n  const runtimeVersion = getAndroidMetadataValue(\n    androidManifestJSON,\n    AndroidConfig.Updates.Config.RUNTIME_VERSION\n  );\n\n  const sdkVersion = getAndroidMetadataValue(\n    androidManifestJSON,\n    AndroidConfig.Updates.Config.SDK_VERSION\n  );\n\n  return Boolean(runtimeVersion || sdkVersion);\n}\n\nfunction getAndroidMetadataValue(\n  androidManifestJSON: AndroidConfig.Manifest.Document,\n  name: string\n): string | undefined {\n  const mainApplication = androidManifestJSON.manifest?.application?.filter(\n    (e: any) => e['$']['android:name'] === '.MainApplication'\n  )[0];\n\n  if (mainApplication?.hasOwnProperty('meta-data')) {\n    const item = mainApplication?.['meta-data']?.find((e: any) => e.$['android:name'] === name);\n\n    return item?.$['android:value'];\n  }\n\n  return undefined;\n}\n"],"file":"android.js"}