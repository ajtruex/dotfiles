{"version":3,"sources":["../../../../../src/commands/eas-build/utils/expoUpdates/ios.ts"],"names":["getIOSBuildScript","projectDir","exp","iOSBuildScriptPath","Error","path","relative","join","setUpdatesVersionsIOSAsync","isUpdatesConfigured","isUpdatesConfiguredIOSAsync","CommandError","modifyExpoPlistAsync","expoPlist","runtimeVersion","IOSConfig","Updates","getRuntimeVersion","sdkVersion","getSDKVersion","Config","RUNTIME_VERSION","SDK_VERSION","setVersionsConfig","configureUpdatesIOSAsync","username","UserManager","getCurrentUsernameAsync","pbxprojPath","getPbxprojPathAsync","project","getXcodeProjectAsync","bundleReactNative","getBundleReactNativePhaseAsync","iOSBuildScript","shellScript","includes","replace","fs","writeFile","writeSync","setUpdatesConfig","callback","expoPlistPath","getExpoPlistPath","pathExists","expoPlistContent","readFile","plist","parse","updatedExpoPlist","build","mkdirp","dirname","intentToAdd","expoPlistData","isMetadataSetIOS","currentUpdateUrl","getUpdateUrl","isVersionsSetIOS","UPDATE_URL","pbxprojPaths","Promise","resolve","reject","absolute","cwd","err","res","length","undefined","xcode","xcodeprojPath","basename","scriptBuildPhase","hash","objects","PBXShellScriptBuildPhase","Object","values","find","buildPhase","name"],"mappings":"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","sourcesContent":["import { ExpoConfig, IOSConfig, projectHasModule } from '@expo/config';\nimport plist from '@expo/plist';\nimport { UserManager } from '@expo/xdl';\nimport * as fs from 'fs-extra';\nimport glob from 'glob';\nimport path from 'path';\nimport xcode from 'xcode';\n\nimport CommandError from '../../../../CommandError';\nimport { gitAddAsync } from '../../../../git';\nimport getConfigurationOptionsAsync from './getConfigurationOptions';\nimport isExpoUpdatesInstalled from './isExpoUpdatesInstalled';\n\nfunction getIOSBuildScript(projectDir: string, exp: ExpoConfig) {\n  const iOSBuildScriptPath = projectHasModule(\n    'expo-updates/scripts/create-manifest-ios.sh',\n    projectDir,\n    exp\n  );\n\n  if (!iOSBuildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  return path.relative(path.join(projectDir, 'ios'), iOSBuildScriptPath);\n}\n\nexport async function setUpdatesVersionsIOSAsync({\n  projectDir,\n  exp,\n}: {\n  projectDir: string;\n  exp: ExpoConfig;\n}) {\n  if (!isExpoUpdatesInstalled(projectDir)) {\n    return;\n  }\n\n  const isUpdatesConfigured = await isUpdatesConfiguredIOSAsync(projectDir);\n\n  if (!isUpdatesConfigured) {\n    throw new CommandError(\n      '\"expo-updates\" is installed, but not configured in the project. Please run \"expo eas:build:init\" first to configure \"expo-updates\"'\n    );\n  }\n\n  await modifyExpoPlistAsync(projectDir, expoPlist => {\n    const runtimeVersion = IOSConfig.Updates.getRuntimeVersion(exp);\n    const sdkVersion = IOSConfig.Updates.getSDKVersion(exp);\n\n    if (\n      (runtimeVersion && expoPlist[IOSConfig.Updates.Config.RUNTIME_VERSION] === runtimeVersion) ||\n      (sdkVersion && expoPlist[IOSConfig.Updates.Config.SDK_VERSION] === sdkVersion)\n    ) {\n      return expoPlist;\n    }\n\n    return IOSConfig.Updates.setVersionsConfig(exp, expoPlist);\n  });\n}\n\nexport async function configureUpdatesIOSAsync({\n  projectDir,\n  exp,\n}: {\n  projectDir: string;\n  exp: ExpoConfig;\n}) {\n  if (!isExpoUpdatesInstalled(projectDir)) {\n    return;\n  }\n\n  const username = await UserManager.getCurrentUsernameAsync();\n  const pbxprojPath = await getPbxprojPathAsync(projectDir);\n  const project = await getXcodeProjectAsync(pbxprojPath);\n  const bundleReactNative = await getBundleReactNativePhaseAsync(project);\n  const iOSBuildScript = getIOSBuildScript(projectDir, exp);\n\n  if (!bundleReactNative.shellScript.includes(iOSBuildScript)) {\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${iOSBuildScript}\\\\n\"`;\n  }\n\n  await fs.writeFile(pbxprojPath, project.writeSync());\n\n  await modifyExpoPlistAsync(projectDir, expoPlist => {\n    return IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n  });\n}\n\nasync function modifyExpoPlistAsync(projectDir: string, callback: (expoPlist: any) => any) {\n  const pbxprojPath = await getPbxprojPathAsync(projectDir);\n  const expoPlistPath = getExpoPlistPath(projectDir, pbxprojPath);\n\n  let expoPlist = {};\n\n  if (await fs.pathExists(expoPlistPath)) {\n    const expoPlistContent = await fs.readFile(expoPlistPath, 'utf8');\n    expoPlist = plist.parse(expoPlistContent);\n  }\n\n  const updatedExpoPlist = callback(expoPlist);\n\n  if (updatedExpoPlist === expoPlist) {\n    return;\n  }\n\n  const expoPlistContent = plist.build(updatedExpoPlist);\n\n  await fs.mkdirp(path.dirname(expoPlistPath));\n  await fs.writeFile(expoPlistPath, expoPlistContent);\n  await gitAddAsync(expoPlistPath, { intentToAdd: true });\n}\n\nasync function isUpdatesConfiguredIOSAsync(projectDir: string) {\n  const { exp, username } = await getConfigurationOptionsAsync(projectDir);\n\n  const pbxprojPath = await getPbxprojPathAsync(projectDir);\n  const project = await getXcodeProjectAsync(pbxprojPath);\n  const bundleReactNative = await getBundleReactNativePhaseAsync(project);\n  const iOSBuildScript = getIOSBuildScript(projectDir, exp);\n\n  if (!bundleReactNative.shellScript.includes(iOSBuildScript)) {\n    return false;\n  }\n\n  const expoPlistPath = getExpoPlistPath(projectDir, pbxprojPath);\n\n  if (!(await fs.pathExists(expoPlistPath))) {\n    return false;\n  }\n\n  const expoPlist = await fs.readFile(expoPlistPath, 'utf8');\n  const expoPlistData = plist.parse(expoPlist);\n\n  return isMetadataSetIOS(expoPlistData, exp, username);\n}\n\nfunction isMetadataSetIOS(expoPlistData: any, exp: ExpoConfig, username: string | null) {\n  const currentUpdateUrl = IOSConfig.Updates.getUpdateUrl(exp, username);\n\n  if (\n    isVersionsSetIOS(expoPlistData) &&\n    currentUpdateUrl &&\n    expoPlistData[IOSConfig.Updates.Config.UPDATE_URL] === currentUpdateUrl\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isVersionsSetIOS(expoPlistData: any) {\n  if (\n    expoPlistData[IOSConfig.Updates.Config.RUNTIME_VERSION] ||\n    expoPlistData[IOSConfig.Updates.Config.SDK_VERSION]\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nasync function getPbxprojPathAsync(projectDir: string) {\n  const pbxprojPaths = await new Promise<string[]>((resolve, reject) =>\n    glob('ios/*/project.pbxproj', { absolute: true, cwd: projectDir }, (err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    })\n  );\n\n  const pbxprojPath = pbxprojPaths.length > 0 ? pbxprojPaths[0] : undefined;\n\n  if (!pbxprojPath) {\n    throw new Error(`Could not find Xcode project in project directory: \"${projectDir}\"`);\n  }\n\n  return pbxprojPath;\n}\n\nasync function getXcodeProjectAsync(pbxprojPath: string) {\n  const project = xcode.project(pbxprojPath);\n\n  await new Promise((resolve, reject) =>\n    project.parse(err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    })\n  );\n\n  return project;\n}\n\nfunction getExpoPlistPath(projectDir: string, pbxprojPath: string) {\n  const xcodeprojPath = path.resolve(pbxprojPath, '..');\n  const expoPlistPath = path.resolve(\n    projectDir,\n    'ios',\n    path.basename(xcodeprojPath).replace(/\\.xcodeproj$/, ''),\n    'Supporting',\n    'Expo.plist'\n  );\n\n  return expoPlistPath;\n}\n\nasync function getBundleReactNativePhaseAsync(project: xcode.XcodeProject) {\n  const scriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase;\n  const bundleReactNative = Object.values(scriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase script for \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n"],"file":"ios.js"}