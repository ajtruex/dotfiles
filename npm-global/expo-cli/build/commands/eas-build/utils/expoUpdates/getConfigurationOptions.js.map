{"version":3,"sources":["../../../../../src/commands/eas-build/utils/expoUpdates/getConfigurationOptions.ts"],"names":["getConfigurationOptionsAsync","projectDir","username","UserManager","getCurrentUsernameAsync","exp","skipSDKVersionRequirement","runtimeVersion","sdkVersion","Error"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEe,eAAeA,4BAAf,CACbC,UADa,EAE0C;AACvD,QAAMC,QAAQ,GAAG,MAAMC,mBAAYC,uBAAZ,EAAvB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAU,yBAAUJ,UAAV,EAAsB;AAAEK,IAAAA,yBAAyB,EAAE;AAA7B,GAAtB,CAAhB;;AAEA,MAAI,CAACD,GAAG,CAACE,cAAL,IAAuB,CAACF,GAAG,CAACG,UAAhC,EAA4C;AAC1C,UAAM,IAAIC,KAAJ,CACJ,uKADI,CAAN;AAGD;;AAED,SAAO;AAAEJ,IAAAA,GAAF;AAAOH,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { UserManager } from '@expo/xdl';\n\nexport default async function getConfigurationOptionsAsync(\n  projectDir: string\n): Promise<{ exp: ExpoConfig; username: string | null }> {\n  const username = await UserManager.getCurrentUsernameAsync();\n\n  const { exp } = getConfig(projectDir, { skipSDKVersionRequirement: true });\n\n  if (!exp.runtimeVersion && !exp.sdkVersion) {\n    throw new Error(\n      \"Couldn't find either 'runtimeVersion' or 'sdkVersion' to configure 'expo-updates'. Please specify at least one of these properties under the 'expo' key in 'app.json'\"\n    );\n  }\n\n  return { exp, username };\n}\n"],"file":"getConfigurationOptions.js"}