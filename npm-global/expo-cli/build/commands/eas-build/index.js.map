{"version":3,"sources":["../../../src/commands/eas-build/index.ts"],"names":["program","easJsonPath","path","join","process","cwd","hasEasJson","fs","pathExistsSync","command","description","helpGroup","option","asyncActionProjectDir","initAction","checkConfig","skipSDKVersionRequirement","credentialsSyncAction","buildAction","statusAction"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,kBAAUA,OAAV,EAA4B;AACzC;AACA,QAAMC,WAAW,GAAGC,gBAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAApB;;AACA,QAAMC,UAAU,GAAGC,mBAAGC,cAAH,CAAkBP,WAAlB,CAAnB;;AAEAD,EAAAA,OAAO,CACJS,OADH,CACW,uBADX,EAEGC,WAFH,CAEe,gDAFf,EAGGC,SAHH,CAGa,KAHb,EAIGC,MAJH,CAKI,0BALJ,EAMI,0CANJ,EAOI,sBAPJ,EASGA,MATH,CASU,0BATV,EASsC,2BATtC,EASmE,KATnE,EAUGC,qBAVH,CAUyBC,kBAVzB,EAUqC;AAAEC,IAAAA,WAAW,EAAE,IAAf;AAAqBC,IAAAA,yBAAyB,EAAE;AAAhD,GAVrC;;AAYA,MAAI,CAACV,UAAL,EAAiB;AACf;AACD;;AAEDN,EAAAA,OAAO,CACJS,OADH,CACW,6BADX,EAEGC,WAFH,CAEe,iEAFf,EAGGC,SAHH,CAGa,KAHb,EAIGE,qBAJH,CAIyBI,kBAJzB,EAIgD;AAC5CF,IAAAA,WAAW,EAAE,IAD+B;AAE5CC,IAAAA,yBAAyB,EAAE;AAFiB,GAJhD;AASAhB,EAAAA,OAAO,CACJS,OADH,CACW,kBADX,EAEGC,WAFH,CAEe,qCAFf,EAGGC,SAHH,CAGa,KAHb,EAIGC,MAJH,CAKI,0BALJ,EAMI,qDANJ,EAOI,sBAPJ,EASGA,MATH,CASU,0BATV,EASsC,2BATtC,EASmE,KATnE,EAUGA,MAVH,CAUU,8BAVV,EAU0C,8BAV1C,EAU0E,KAV1E,EAWGA,MAXH,CAWU,WAXV,EAWuB,yCAXvB,EAWkE,KAXlE,EAYGA,MAZH,CAYU,qBAZV,EAYiC,eAZjC,EAYkD,SAZlD,EAaGC,qBAbH,CAayBK,iBAbzB,EAasC;AAAEH,IAAAA,WAAW,EAAE,IAAf;AAAqBC,IAAAA,yBAAyB,EAAE;AAAhD,GAbtC;AAeAhB,EAAAA,OAAO,CACJS,OADH,CACW,yBADX,EAEGC,WAFH,CAEe,qDAFf,EAGGC,SAHH,CAGa,KAHb,EAIGC,MAJH,CAKI,0BALJ,EAMI,sDANJ,EAOI,sBAPJ,EASGA,MATH,CAUI,sBAVJ,EAWI,gFAXJ,EAYI,2CAZJ,EAcGA,MAdH,CAcU,0BAdV,EAcsC,wCAdtC,EAeGC,qBAfH,CAeyBM,kBAfzB,EAeuC;AAAEJ,IAAAA,WAAW,EAAE,IAAf;AAAqBC,IAAAA,yBAAyB,EAAE;AAAhD,GAfvC;AAgBD","sourcesContent":["import { Command } from 'commander';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport buildAction from './build/action';\nimport credentialsSyncAction from './credentialsSync/action';\nimport initAction from './init/action';\nimport statusAction from './status/action';\n\nexport default function (program: Command) {\n  // don't register `expo eas:build:*` commands if eas.json doesn't exist\n  const easJsonPath = path.join(process.cwd(), 'eas.json');\n  const hasEasJson = fs.pathExistsSync(easJsonPath);\n\n  program\n    .command('eas:build:init [path]')\n    .description('Initialize build configuration for the project')\n    .helpGroup('eas')\n    .option(\n      '-p --platform <platform>',\n      'Platform to configure: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option('--skip-credentials-check', 'Skip checking credentials', false)\n    .asyncActionProjectDir(initAction, { checkConfig: true, skipSDKVersionRequirement: true });\n\n  if (!hasEasJson) {\n    return;\n  }\n\n  program\n    .command('eas:credentials:sync [path]')\n    .description('Update credentials.json with credentials stored on Expo servers')\n    .helpGroup('eas')\n    .asyncActionProjectDir(credentialsSyncAction, {\n      checkConfig: true,\n      skipSDKVersionRequirement: true,\n    });\n\n  program\n    .command('eas:build [path]')\n    .description('Build an app binary for the project')\n    .helpGroup('eas')\n    .option(\n      '-p --platform <platform>',\n      'Build for the specified platform: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option('--skip-credentials-check', 'Skip checking credentials', false)\n    .option('--skip-project-configuration', 'Skip configuring the project', false)\n    .option('--no-wait', 'Exit immediately after scheduling build', false)\n    .option('--profile <profile>', 'Build profile', 'release')\n    .asyncActionProjectDir(buildAction, { checkConfig: true, skipSDKVersionRequirement: true });\n\n  program\n    .command('eas:build:status [path]')\n    .description('Log the status of the latest builds for the project')\n    .helpGroup('eas')\n    .option(\n      '-p --platform <platform>',\n      'Get builds for specified platform: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option(\n      '-s --status <status>',\n      'Get builds with the specified status: in-queue, in-progress, errored, finished',\n      /^(in-queue|in-progress|errored|finished)$/\n    )\n    .option('-b --build-id <build-id>', 'Get the build with a specific build id')\n    .asyncActionProjectDir(statusAction, { checkConfig: true, skipSDKVersionRequirement: true });\n}\n"],"file":"index.js"}