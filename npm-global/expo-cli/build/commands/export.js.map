{"version":3,"sources":["../../src/commands/export.ts"],"names":["promptPublicUrlAsync","value","type","name","validate","UrlUtils","isHttps","message","CommandError","ensurePublicUrlAsync","url","isDev","program","nonInteractive","validator","isURL","protocols","log","nestedWarn","exportFilesAsync","projectRoot","options","exportOptions","dumpAssetmap","dumpSourcemap","dev","publishOptions","resetCache","clear","target","absoluteOutputDir","path","resolve","process","cwd","outputDir","Project","exportForAppHosting","publicUrl","assetUrl","mergeSourceDirectoriresAsync","projectDir","mergeSrcDirs","length","srcDirs","mergeSrcDir","concat","mergeSrcUrl","join","nested","mergeAppDistributions","collectMergeSourceUrlsAsync","tmpFolder","fs","remove","ensureDir","downloadDecompressPromises","map","uniqFilename","basename","crypto","randomBytes","toString","tmpFolderUncompressed","push","Promise","all","collect","val","memo","action","outputPath","CreateApp","assertFolderEmptyAsync","folderName","overwrite","force","newLine","chalk","bold","exit","command","description","helpGroup","option","asyncActionProjectDir","checkConfig"],"mappings":"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","sourcesContent":["import { getDefaultTarget, ProjectTarget } from '@expo/config';\nimport { Project, UrlUtils } from '@expo/xdl';\nimport program, { Command } from 'commander';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport validator from 'validator';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport prompt from '../prompts';\nimport * as CreateApp from './utils/CreateApp';\nimport { downloadAndDecompressAsync } from './utils/Tar';\n\ntype Options = {\n  outputDir: string;\n  assetUrl: string;\n  publicUrl?: string;\n  mergeSrcUrl: string[];\n  mergeSrcDir: string[];\n  dev: boolean;\n  clear: boolean;\n  quiet: boolean;\n  target?: ProjectTarget;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n  maxWorkers?: number;\n  force: boolean;\n};\n\nexport async function promptPublicUrlAsync(): Promise<string> {\n  try {\n    const { value } = await prompt({\n      type: 'text',\n      name: 'value',\n      validate: UrlUtils.isHttps,\n      message: `What is the public url that will host the static files?`,\n    });\n    return value;\n  } catch {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n}\n\nexport async function ensurePublicUrlAsync(url: any, isDev?: boolean): Promise<string> {\n  if (!url) {\n    if (program.nonInteractive) {\n      throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n    }\n    url = await promptPublicUrlAsync();\n  }\n\n  // If we are not in dev mode, ensure that url is https\n  if (!isDev && !UrlUtils.isHttps(url)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!validator.isURL(url, { protocols: ['http', 'https'] })) {\n    log.nestedWarn(\n      `Dev Mode: --public-url ${url} does not conform to the required HTTP(S) protocol.`\n    );\n  }\n\n  return url;\n}\n\n// TODO: We shouldn't need to wrap a method that is only used for one purpose.\nasync function exportFilesAsync(\n  projectRoot: string,\n  options: Pick<\n    Options,\n    | 'dumpAssetmap'\n    | 'dumpSourcemap'\n    | 'dev'\n    | 'clear'\n    | 'target'\n    | 'outputDir'\n    | 'publicUrl'\n    | 'assetUrl'\n  >\n) {\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n    publishOptions: {\n      resetCache: !!options.clear,\n      target: options.target ?? getDefaultTarget(projectRoot),\n    },\n  };\n  const absoluteOutputDir = path.resolve(process.cwd(), options.outputDir);\n  return await Project.exportForAppHosting(\n    projectRoot,\n    options.publicUrl!,\n    options.assetUrl,\n    absoluteOutputDir,\n    exportOptions\n  );\n}\n\nasync function mergeSourceDirectoriresAsync(\n  projectDir: string,\n  mergeSrcDirs: string[],\n  options: Pick<Options, 'mergeSrcUrl' | 'mergeSrcDir' | 'outputDir'>\n): Promise<void> {\n  if (!mergeSrcDirs.length) {\n    return;\n  }\n  const srcDirs = options.mergeSrcDir.concat(options.mergeSrcUrl).join(' ');\n  log.nested(`Starting project merge of ${srcDirs} into ${options.outputDir}`);\n\n  // Merge app distributions\n  await Project.mergeAppDistributions(\n    projectDir,\n    [...mergeSrcDirs, options.outputDir], // merge stuff in srcDirs and outputDir together\n    options.outputDir\n  );\n  log.nested(\n    `Project merge was successful. Your merged files can be found in ${options.outputDir}`\n  );\n}\n\nexport async function collectMergeSourceUrlsAsync(\n  projectDir: string,\n  mergeSrcUrl: string[]\n): Promise<string[]> {\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = [];\n\n  // src urls were specified to merge in, so download and decompress them\n  if (mergeSrcUrl.length > 0) {\n    // delete .tmp if it exists and recreate it anew\n    const tmpFolder = path.resolve(projectDir, '.tmp');\n    await fs.remove(tmpFolder);\n    await fs.ensureDir(tmpFolder);\n\n    // Download the urls into a tmp dir\n    const downloadDecompressPromises = mergeSrcUrl.map(\n      async (url: string): Promise<void> => {\n        // Add the absolute paths to srcDir\n        const uniqFilename = `${path.basename(url, '.tar.gz')}_${crypto\n          .randomBytes(16)\n          .toString('hex')}`;\n\n        const tmpFolderUncompressed = path.resolve(tmpFolder, uniqFilename);\n        await fs.ensureDir(tmpFolderUncompressed);\n        await downloadAndDecompressAsync(url, tmpFolderUncompressed);\n        // add the decompressed folder to be merged\n        mergeSrcDirs.push(tmpFolderUncompressed);\n      }\n    );\n\n    await Promise.all(downloadDecompressPromises);\n  }\n  return mergeSrcDirs;\n}\n\nfunction collect<T>(val: T, memo: T[]): T[] {\n  memo.push(val);\n  return memo;\n}\n\nexport async function action(projectDir: string, options: Options) {\n  // Ensure URL\n  options.publicUrl = await ensurePublicUrlAsync(options.publicUrl, options.dev);\n\n  // Ensure the output directory is created\n  const outputPath = path.resolve(projectDir, options.outputDir);\n  await fs.ensureDir(outputPath);\n\n  // Assert if the folder has contents\n  if (\n    !(await CreateApp.assertFolderEmptyAsync({\n      projectRoot: outputPath,\n      folderName: options.outputDir,\n      overwrite: options.force,\n    }))\n  ) {\n    log.newLine();\n    log.nested(\n      `Try using a new directory name with ${log.chalk.bold(\n        '--output-dir'\n      )}, moving these files, or using ${log.chalk.bold('--force')} to overwrite them.`\n    );\n    log.newLine();\n    process.exit(1);\n  }\n\n  // Wrap the XDL method for exporting assets\n  await exportFilesAsync(projectDir, options);\n\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs: string[] = await collectMergeSourceUrlsAsync(projectDir, options.mergeSrcUrl);\n  // add any local src dirs to be merged\n  mergeSrcDirs.push(...options.mergeSrcDir);\n\n  await mergeSourceDirectoriresAsync(projectDir, mergeSrcDirs, options);\n\n  log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n\nexport default function (program: Command) {\n  program\n    .command('export [path]')\n    .description('Export the static files of the app for hosting it on a web server')\n    .helpGroup('core')\n    .option('-p, --public-url <url>', 'The public url that will host the static files. (Required)')\n    .option(\n      '--output-dir <dir>',\n      'The directory to export the static files to. Default directory is `dist`',\n      'dist'\n    )\n    .option(\n      '-a, --asset-url <url>',\n      \"The absolute or relative url that will host the asset files. Default is './assets', which will be resolved against the public-url.\",\n      './assets'\n    )\n    .option('-d, --dump-assetmap', 'Dump the asset map for further processing.')\n    .option('--dev', 'Configure static files for developing locally using a non-https server')\n    .option('-f, --force', 'Overwrite files in output directory without prompting for confirmation')\n    .option('-s, --dump-sourcemap', 'Dump the source map for debugging the JS bundle.')\n    .option('-q, --quiet', 'Suppress verbose output.')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this export is intended. Options are `managed` or `bare`.'\n    )\n    .option('--merge-src-dir [dir]', 'A repeatable source dir to merge in.', collect, [])\n    .option(\n      '--merge-src-url [url]',\n      'A repeatable source tar.gz file URL to merge in.',\n      collect,\n      []\n    )\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .asyncActionProjectDir(action, { checkConfig: true });\n}\n"],"file":"export.js"}