{"version":3,"sources":["../../../src/commands/apply/configureIOSProjectAsync.ts"],"names":["configureIOSProjectAsync","projectRoot","bundleIdentifier","IOSConfig","BundleIdenitifer","setBundleIdentifierForPbxproj","exp","skipSDKVersionRequirement","username","UserManager","getCurrentUsernameAsync","modifyPbxprojAsync","project","Google","setGoogleServicesFile","Locales","setLocalesAsync","DeviceFamily","setDeviceFamily","modifyInfoPlistAsync","infoPlist","CustomInfoPlistEntries","setCustomInfoPlistEntries","Branch","setBranchApiKey","Facebook","setFacebookConfig","setGoogleConfig","Name","setDisplayName","Orientation","setOrientation","RequiresFullScreen","setRequiresFullScreen","Scheme","setScheme","UserInterfaceStyle","setUserInterfaceStyle","UsesNonExemptEncryption","setUsesNonExemptEncryption","Version","setBuildNumber","setVersion","modifyExpoPlistAsync","expoPlist","Updates","setUpdatesConfig","modifyEntitlementsPlistAsync","entitlementsPlist","Entitlements","setCustomEntitlementsEntries","setICloudEntitlement","setAppleSignInEntitlement","setAccessesContactNotes","setAssociatedDomains","e","WarningAggregator","addWarningIOS","Icons","setIconsAsync","SplashScreen","setSplashScreenAsync","callbackAsync","result","filepath","writeSync","callback","entitlementsPath","getEntitlementsPath","data","plist","parse","build","iosProjectDirectory","getIOSPaths","infoPath","path","resolve","supportingDirectory","join","error","sanitizedName","name","replace","normalize","projectName","Error","iconPath"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,eAAeA,wBAAf,CAAwCC,WAAxC,EAA6D;AAC1E;AACA,QAAMC,gBAAgB,GAAG,MAAM,wDAA+BD,WAA/B,CAA/B;;AACAE,sBAAUC,gBAAV,CAA2BC,6BAA3B,CAAyDJ,WAAzD,EAAsEC,gBAAtE;;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAU,yBAAUL,WAAV,EAAuB;AAAEM,IAAAA,yBAAyB,EAAE;AAA7B,GAAvB,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMC,mBAAYC,uBAAZ,EAAvB,CAN0E,CAQ1E;;AACA,QAAMC,kBAAkB,CAACV,WAAD,EAAc,MAAMW,OAAN,IAAiB;AACrDA,IAAAA,OAAO,GAAG,MAAMT,oBAAUU,MAAV,CAAiBC,qBAAjB,CAAuCR,GAAvC,EAA4C;AAAEM,MAAAA,OAAF;AAAWX,MAAAA;AAAX,KAA5C,CAAhB;AACAW,IAAAA,OAAO,GAAG,MAAMT,oBAAUY,OAAV,CAAkBC,eAAlB,CAAkCV,GAAlC,EAAuC;AAAEM,MAAAA,OAAF;AAAWX,MAAAA;AAAX,KAAvC,CAAhB;AACAW,IAAAA,OAAO,GAAGT,oBAAUc,YAAV,CAAuBC,eAAvB,CAAuCZ,GAAvC,EAA4C;AAAEM,MAAAA;AAAF,KAA5C,CAAV;AACA,WAAOA,OAAP;AACD,GALuB,CAAxB,CAT0E,CAgB1E;;AACA,QAAMO,oBAAoB,CAAClB,WAAD,EAAcmB,SAAS,IAAI;AACnDA,IAAAA,SAAS,GAAGjB,oBAAUkB,sBAAV,CAAiCC,yBAAjC,CAA2DhB,GAA3D,EAAgEc,SAAhE,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUoB,MAAV,CAAiBC,eAAjB,CAAiClB,GAAjC,EAAsCc,SAAtC,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUsB,QAAV,CAAmBC,iBAAnB,CAAqCpB,GAArC,EAA0Cc,SAA1C,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUU,MAAV,CAAiBc,eAAjB,CAAiCrB,GAAjC,EAAsCc,SAAtC,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUyB,IAAV,CAAeC,cAAf,CAA8BvB,GAA9B,EAAmCc,SAAnC,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAU2B,WAAV,CAAsBC,cAAtB,CAAqCzB,GAArC,EAA0Cc,SAA1C,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAU6B,kBAAV,CAA6BC,qBAA7B,CAAmD3B,GAAnD,EAAwDc,SAAxD,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAU+B,MAAV,CAAiBC,SAAjB,CAA2B7B,GAA3B,EAAgCc,SAAhC,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUiC,kBAAV,CAA6BC,qBAA7B,CAAmD/B,GAAnD,EAAwDc,SAAxD,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUmC,uBAAV,CAAkCC,0BAAlC,CAA6DjC,GAA7D,EAAkEc,SAAlE,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUqC,OAAV,CAAkBC,cAAlB,CAAiCnC,GAAjC,EAAsCc,SAAtC,CAAZ;AACAA,IAAAA,SAAS,GAAGjB,oBAAUqC,OAAV,CAAkBE,UAAlB,CAA6BpC,GAA7B,EAAkCc,SAAlC,CAAZ;AAEA,WAAOA,SAAP;AACD,GAfyB,CAA1B,CAjB0E,CAkC1E;;AACA,QAAMuB,oBAAoB,CAAC1C,WAAD,EAAc2C,SAAS,IAAI;AACnDA,IAAAA,SAAS,GAAGzC,oBAAU0C,OAAV,CAAkBC,gBAAlB,CAAmCxC,GAAnC,EAAwCsC,SAAxC,EAAmDpC,QAAnD,CAAZ;AACA,WAAOoC,SAAP;AACD,GAHyB,CAA1B,CAnC0E,CAwC1E;;AACA,MAAI;AACF;AACA,UAAMG,4BAA4B,CAAC9C,WAAD,EAAc+C,iBAAiB,IAAI;AACnEA,MAAAA,iBAAiB,GAAG7C,oBAAU8C,YAAV,CAAuBC,4BAAvB,CAClB5C,GADkB,EAElB0C,iBAFkB,CAApB,CADmE,CAMnE;;AACAA,MAAAA,iBAAiB,GAAG7C,oBAAU8C,YAAV,CAAuBE,oBAAvB,CAClB7C,GADkB,EAElB,wBAFkB,EAGlB0C,iBAHkB,CAApB;AAMAA,MAAAA,iBAAiB,GAAG7C,oBAAU8C,YAAV,CAAuBG,yBAAvB,CAAiD9C,GAAjD,EAAsD0C,iBAAtD,CAApB;AACAA,MAAAA,iBAAiB,GAAG7C,oBAAU8C,YAAV,CAAuBI,uBAAvB,CAA+C/C,GAA/C,EAAoD0C,iBAApD,CAApB;AACAA,MAAAA,iBAAiB,GAAG7C,oBAAU8C,YAAV,CAAuBK,oBAAvB,CAA4ChD,GAA5C,EAAiD0C,iBAAjD,CAApB;AACA,aAAOA,iBAAP;AACD,KAjBiC,CAAlC;AAkBD,GApBD,CAoBE,OAAOO,CAAP,EAAU;AACVC,gCAAkBC,aAAlB,CACE,cADF,EAEE,kLAFF;AAID,GAlEyE,CAoE1E;;;AACA,QAAMtD,oBAAUuD,KAAV,CAAgBC,aAAhB,CAA8BrD,GAA9B,EAAmCL,WAAnC,CAAN;AACA,QAAME,oBAAUyD,YAAV,CAAuBC,oBAAvB,CAA4CvD,GAA5C,EAAiDL,WAAjD,CAAN;AACD;;AAED,eAAeU,kBAAf,CACEV,WADF,EAEE6D,aAFF,EAGE;AACA,QAAMlD,OAAO,GAAG,6BAAWX,WAAX,CAAhB;AACA,QAAM8D,MAAM,GAAG,MAAMD,aAAa,CAAClD,OAAD,CAAlC;AACA,QAAM,0BAAUA,OAAO,CAACoD,QAAlB,EAA4BD,MAAM,CAACE,SAAP,EAA5B,CAAN;AACD;;AAED,eAAelB,4BAAf,CAA4C9C,WAA5C,EAAiEiE,QAAjE,EAAgG;AAC9F,QAAMC,gBAAgB,GAAGhE,oBAAU8C,YAAV,CAAuBmB,mBAAvB,CAA2CnE,WAA3C,CAAzB;;AACA,MAAIoE,IAAI,GAAGC,iBAAMC,KAAN,EAAY,MAAM,yBAASJ,gBAAT,EAA2B,MAA3B,CAAlB,EAAX;;AACAE,EAAAA,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAD,CAArB;AACA,QAAM,0BAAUF,gBAAV,EAA4BG,iBAAME,KAAN,CAAYH,IAAZ,CAA5B,CAAN;AACD;;AAED,eAAelD,oBAAf,CAAoClB,WAApC,EAAyDiE,QAAzD,EAAwF;AACtF,QAAM;AAAEO,IAAAA;AAAF,MAA0BC,WAAW,CAACzE,WAAD,CAA3C;;AACA,QAAM0E,QAAQ,GAAGC,gBAAKC,OAAL,CAAaJ,mBAAb,EAAkC,YAAlC,CAAjB;;AACA,MAAIJ,IAAI,GAAGC,iBAAMC,KAAN,EAAY,MAAM,yBAASI,QAAT,EAAmB,MAAnB,CAAlB,EAAX;;AACAN,EAAAA,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAD,CAArB;AACA,QAAM,0BAAUM,QAAV,EAAoBL,iBAAME,KAAN,CAAYH,IAAZ,CAApB,CAAN;AACD;;AAED,eAAe1B,oBAAf,CAAoC1C,WAApC,EAAyDiE,QAAzD,EAAwF;AACtF,QAAM;AAAEO,IAAAA;AAAF,MAA0BC,WAAW,CAACzE,WAAD,CAA3C;;AACA,QAAM6E,mBAAmB,GAAGF,gBAAKG,IAAL,CAAUN,mBAAV,EAA+B,YAA/B,CAA5B;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAGC,gBAAKC,OAAL,CAAaC,mBAAb,EAAkC,YAAlC,CAAjB;;AACA,QAAIT,IAAI,GAAGC,iBAAMC,KAAN,EAAY,MAAM,yBAASI,QAAT,EAAmB,MAAnB,CAAlB,EAAX;;AACAN,IAAAA,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAD,CAArB;AACA,UAAM,0BAAUM,QAAV,EAAoBL,iBAAME,KAAN,CAAYH,IAAZ,CAApB,CAAN;AACD,GALD,CAKE,OAAOW,KAAP,EAAc;AACdxB,gCAAkBC,aAAlB,CACE,SADF,EAEE,gJAFF,EAGE,oEAHF;AAKD;AACF,C,CAED;;;AACA,SAASwB,aAAT,CAAuBC,IAAvB,EAAqC;AACnC,SAAOA,IAAI,CACRC,OADI,CACI,SADJ,EACe,EADf,EAEJC,SAFI,CAEM,KAFN,EAGJD,OAHI,CAGI,kBAHJ,EAGwB,EAHxB,CAAP;AAID,C,CAED;AACA;AACA;AACA;;;AACA,SAAST,WAAT,CAAqBzE,WAArB,EAA0C;AACxC,MAAIoF,WAA0B,GAAG,IAAjC,CADwC,CAGxC;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAG,iCAAepF,WAAf,CAAd;AACD,GAFD,CAEE,gBAAM;AACN;AACA,UAAM;AAAEK,MAAAA;AAAF,QAAU,yBAAUL,WAAV,EAAuB;AAAEM,MAAAA,yBAAyB,EAAE;AAA7B,KAAvB,CAAhB;AAEA8E,IAAAA,WAAW,GAAG/E,GAAG,CAAC4E,IAAlB;;AACA,QAAI,CAACG,WAAL,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACDD,IAAAA,WAAW,GAAGJ,aAAa,CAACI,WAAD,CAA3B;AACD;;AAED,QAAMZ,mBAAmB,GAAGG,gBAAKG,IAAL,CAAU9E,WAAV,EAAuB,KAAvB,EAA8BoF,WAA9B,CAA5B;;AACA,QAAME,QAAQ,GAAGX,gBAAKG,IAAL,CAAUN,mBAAV,EAA+B,iBAA/B,EAAkD,oBAAlD,CAAjB;;AAEA,SAAO;AACLY,IAAAA,WADK;AAELZ,IAAAA,mBAFK;AAGLc,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { getConfig, IOSConfig, WarningAggregator } from '@expo/config';\nimport { getPbxproj, getProjectName } from '@expo/config/build/ios/utils/Xcodeproj';\nimport plist from '@expo/plist';\nimport { UserManager } from '@expo/xdl';\nimport { readFile, writeFile } from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { getOrPromptForBundleIdentifier } from '../eject/ConfigValidation';\n\nexport default async function configureIOSProjectAsync(projectRoot: string) {\n  // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n  const bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n  IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const username = await UserManager.getCurrentUsernameAsync();\n\n  // Configure the Xcode project\n  await modifyPbxprojAsync(projectRoot, async project => {\n    project = await IOSConfig.Google.setGoogleServicesFile(exp, { project, projectRoot });\n    project = await IOSConfig.Locales.setLocalesAsync(exp, { project, projectRoot });\n    project = IOSConfig.DeviceFamily.setDeviceFamily(exp, { project });\n    return project;\n  });\n\n  // Configure the Info.plist\n  await modifyInfoPlistAsync(projectRoot, infoPlist => {\n    infoPlist = IOSConfig.CustomInfoPlistEntries.setCustomInfoPlistEntries(exp, infoPlist);\n    infoPlist = IOSConfig.Branch.setBranchApiKey(exp, infoPlist);\n    infoPlist = IOSConfig.Facebook.setFacebookConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Google.setGoogleConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Name.setDisplayName(exp, infoPlist);\n    infoPlist = IOSConfig.Orientation.setOrientation(exp, infoPlist);\n    infoPlist = IOSConfig.RequiresFullScreen.setRequiresFullScreen(exp, infoPlist);\n    infoPlist = IOSConfig.Scheme.setScheme(exp, infoPlist);\n    infoPlist = IOSConfig.UserInterfaceStyle.setUserInterfaceStyle(exp, infoPlist);\n    infoPlist = IOSConfig.UsesNonExemptEncryption.setUsesNonExemptEncryption(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setBuildNumber(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setVersion(exp, infoPlist);\n\n    return infoPlist;\n  });\n\n  // Configure Expo.plist\n  await modifyExpoPlistAsync(projectRoot, expoPlist => {\n    expoPlist = IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n    return expoPlist;\n  });\n\n  // TODO: fix this on Windows! We will ignore errors for now so people can just proceed\n  try {\n    // Configure entitlements/capabilities\n    await modifyEntitlementsPlistAsync(projectRoot, entitlementsPlist => {\n      entitlementsPlist = IOSConfig.Entitlements.setCustomEntitlementsEntries(\n        exp,\n        entitlementsPlist\n      );\n\n      // TODO: We don't have a mechanism for getting the apple team id here yet\n      entitlementsPlist = IOSConfig.Entitlements.setICloudEntitlement(\n        exp,\n        'TODO-GET-APPLE-TEAM-ID',\n        entitlementsPlist\n      );\n\n      entitlementsPlist = IOSConfig.Entitlements.setAppleSignInEntitlement(exp, entitlementsPlist);\n      entitlementsPlist = IOSConfig.Entitlements.setAccessesContactNotes(exp, entitlementsPlist);\n      entitlementsPlist = IOSConfig.Entitlements.setAssociatedDomains(exp, entitlementsPlist);\n      return entitlementsPlist;\n    });\n  } catch (e) {\n    WarningAggregator.addWarningIOS(\n      'entitlements',\n      'iOS entitlements could not be applied. Please ensure that contact notes, Apple Sign In, and associated domains entitlements are properly configured if you use them in your app.'\n    );\n  }\n\n  // Other\n  await IOSConfig.Icons.setIconsAsync(exp, projectRoot);\n  await IOSConfig.SplashScreen.setSplashScreenAsync(exp, projectRoot);\n}\n\nasync function modifyPbxprojAsync(\n  projectRoot: string,\n  callbackAsync: (project: XcodeProject) => Promise<XcodeProject>\n) {\n  const project = getPbxproj(projectRoot);\n  const result = await callbackAsync(project);\n  await writeFile(project.filepath, result.writeSync());\n}\n\nasync function modifyEntitlementsPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const entitlementsPath = IOSConfig.Entitlements.getEntitlementsPath(projectRoot);\n  let data = plist.parse(await readFile(entitlementsPath, 'utf8'));\n  data = await callback(data);\n  await writeFile(entitlementsPath, plist.build(data));\n}\n\nasync function modifyInfoPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const { iosProjectDirectory } = getIOSPaths(projectRoot);\n  const infoPath = path.resolve(iosProjectDirectory, 'Info.plist');\n  let data = plist.parse(await readFile(infoPath, 'utf8'));\n  data = await callback(data);\n  await writeFile(infoPath, plist.build(data));\n}\n\nasync function modifyExpoPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const { iosProjectDirectory } = getIOSPaths(projectRoot);\n  const supportingDirectory = path.join(iosProjectDirectory, 'Supporting');\n\n  try {\n    const infoPath = path.resolve(supportingDirectory, 'Expo.plist');\n    let data = plist.parse(await readFile(infoPath, 'utf8'));\n    data = await callback(data);\n    await writeFile(infoPath, plist.build(data));\n  } catch (error) {\n    WarningAggregator.addWarningIOS(\n      'updates',\n      'Expo.plist configuration could not be applied. You will need to create Expo.plist if it does not exist and add Updates configuration manually.',\n      'https://docs.expo.io/bare/updating-your-app/#configuration-options'\n    );\n  }\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nfunction getIOSPaths(projectRoot: string) {\n  let projectName: string | null = null;\n\n  // Attempt to get the current ios folder name (apply).\n  try {\n    projectName = getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n    projectName = exp.name;\n    if (!projectName) {\n      throw new Error('Your project needs a name in app.json/app.config.js.');\n    }\n    projectName = sanitizedName(projectName);\n  }\n\n  const iosProjectDirectory = path.join(projectRoot, 'ios', projectName);\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iconPath,\n  };\n}\n"],"file":"configureIOSProjectAsync.js"}