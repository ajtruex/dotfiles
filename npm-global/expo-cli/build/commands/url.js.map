{"version":3,"sources":["../../src/commands/url.ts"],"names":["logArtifactUrl","platform","projectDir","options","publicUrl","UrlUtils","isHttps","CommandError","result","Project","getBuildStatusAsync","current","url","jobs","filter","job","artifacts","log","nested","Error","getWebAppUrlAsync","webAppUrl","constructWebAppUrlAsync","action","urlOpts","optsAsync","currentStatus","web","constructManifestUrlAsync","newLine","printQRCode","chalk","underline","handleMobileOptsAsync","program","command","alias","helpGroup","option","description","allowOffline","asyncActionProjectDir"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAUA,MAAMA,cAAc,GAAIC,QAAD,IAAiC,OACtDC,UADsD,EAEtDC,OAFsD,KAGnD;AAAA;;AACH,MAAIA,OAAO,CAACC,SAAR,IAAqB,CAACC,gBAASC,OAAT,CAAiBH,OAAO,CAACC,SAAzB,CAA1B,EAA+D;AAC7D,UAAM,KAAIG,uBAAJ,EAAiB,oBAAjB,EAAuC,yCAAvC,CAAN;AACD;;AAED,QAAMC,MAAM,GAAG,MAAMC,eAAQC,mBAAR,CAA4BR,UAA5B,EAAwC;AAC3DS,IAAAA,OAAO,EAAE,KADkD;AAE3D,QAAIR,OAAO,CAACC,SAAR,GAAoB;AAAEA,MAAAA,SAAS,EAAED,OAAO,CAACC;AAArB,KAApB,GAAuD,EAA3D;AAF2D,GAAxC,CAArB;AAKA,QAAMQ,GAAG,mBAAGJ,MAAM,CAACK,IAAV,yEAAG,aAAaC,MAAb,CAAqBC,GAAD,IAAiCA,GAAG,CAACd,QAAJ,KAAiBA,QAAtE,EAAgF,CAAhF,CAAH,kFAAG,qBACRe,SADK,0DAAG,sBACGJ,GADf;;AAEA,MAAIA,GAAJ,EAAS;AACPK,mBAAIC,MAAJ,CAAWN,GAAX;AACD,GAFD,MAEO;AACL,UAAM,IAAIO,KAAJ,CACH,MAAKlB,QAAS,uCAAsCA,QAAS,kBAD1D,CAAN;AAGD;AACF,CAtBD;;AAwBA,eAAemB,iBAAf,CAAiClB,UAAjC,EAAsE;AACpE,QAAMmB,SAAS,GAAG,MAAMhB,gBAASiB,uBAAT,CAAiCpB,UAAjC,CAAxB;;AACA,MAAI,CAACmB,SAAL,EAAgB;AACd,UAAM,KAAId,uBAAJ,EACJ,aADI,EAEH,0EAFG,CAAN;AAID;;AACD,SAAOc,SAAP;AACD;;AAED,eAAeE,MAAf,CAAsBrB,UAAtB,EAA0CC,OAA1C,EAAmF;AACjF,QAAMqB,mBAAQC,SAAR,CAAkBvB,UAAlB,EAA8BC,OAA9B,CAAN;;AAEA,MAAI,CAAC,MAAMM,eAAQiB,aAAR,CAAsBxB,UAAtB,CAAP,MAA8C,SAAlD,EAA6D;AAC3D,UAAM,KAAIK,uBAAJ,EACJ,aADI,EAEH,8DAFG,CAAN;AAID;;AACD,QAAMK,GAAG,GAAGT,OAAO,CAACwB,GAAR,GACR,MAAMP,iBAAiB,CAAClB,UAAD,CADf,GAER,MAAMG,gBAASuB,yBAAT,CAAmC1B,UAAnC,CAFV;;AAIAe,iBAAIY,OAAJ;;AACAL,qBAAQM,WAAR,CAAoBlB,GAApB;;AAEA,sBAAI,oBAAoBmB,iBAAMC,SAAN,CAAgBpB,GAAhB,CAApB,GAA2C,IAA/C;;AAEA,MAAI,CAACT,OAAO,CAACwB,GAAb,EAAkB;AAChB,UAAM,2CAAN;AACA,UAAMH,mBAAQS,qBAAR,CAA8B/B,UAA9B,EAA0CC,OAA1C,CAAN;AACD;AACF;;AAEc,kBAAU+B,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,YADX,EAEGC,KAFH,CAES,GAFT,EAGGC,SAHH,CAGa,KAHb,EAKGC,MALH,CAKU,WALV,EAKuB,+BALvB,EAMGC,WANH,CAMe,sDANf,EAOGf,OAPH,GAQGgB,YARH,GASGC,qBATH,CASyBlB,MATzB;AAWAW,EAAAA,OAAO,CACJC,OADH,CACW,gBADX,EAEGE,SAFH,CAEa,KAFb,EAGGC,MAHH,CAGU,oBAHV,EAGgC,iEAHhC,EAIGC,WAJH,CAIe,oDAJf,EAKGE,qBALH,CAKyBzC,cAAc,CAAC,KAAD,CALvC;AAOAkC,EAAAA,OAAO,CACJC,OADH,CACW,gBADX,EAEGE,SAFH,CAEa,KAFb,EAGGC,MAHH,CAGU,oBAHV,EAGgC,iEAHhC,EAIGC,WAJH,CAIe,wDAJf,EAKGE,qBALH,CAKyBzC,cAAc,CAAC,SAAD,CALvC;AAMD","sourcesContent":["import { Project, UrlUtils } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport printRunInstructionsAsync from '../printRunInstructionsAsync';\nimport urlOpts, { URLOptions } from '../urlOpts';\n\ntype ProjectUrlOptions = Command & {\n  web?: boolean;\n};\n\ntype ArtifactUrlOptions = {\n  publicUrl?: string;\n};\n\nconst logArtifactUrl = (platform: 'ios' | 'android') => async (\n  projectDir: string,\n  options: ArtifactUrlOptions\n) => {\n  if (options.publicUrl && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  }\n\n  const result = await Project.getBuildStatusAsync(projectDir, {\n    current: false,\n    ...(options.publicUrl ? { publicUrl: options.publicUrl } : {}),\n  });\n\n  const url = result.jobs?.filter((job: Project.BuildJobFields) => job.platform === platform)[0]\n    ?.artifacts?.url;\n  if (url) {\n    log.nested(url);\n  } else {\n    throw new Error(\n      `No ${platform} binary file found. Use \"expo build:${platform}\" to create one.`\n    );\n  }\n};\n\nasync function getWebAppUrlAsync(projectDir: string): Promise<string> {\n  const webAppUrl = await UrlUtils.constructWebAppUrlAsync(projectDir);\n  if (!webAppUrl) {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Expo web server is not running. Please start it with \\`expo start:web\\`.`\n    );\n  }\n  return webAppUrl;\n}\n\nasync function action(projectDir: string, options: ProjectUrlOptions & URLOptions) {\n  await urlOpts.optsAsync(projectDir, options);\n\n  if ((await Project.currentStatus(projectDir)) !== 'running') {\n    throw new CommandError(\n      'NOT_RUNNING',\n      `Project is not running. Please start it with \\`expo start\\`.`\n    );\n  }\n  const url = options.web\n    ? await getWebAppUrlAsync(projectDir)\n    : await UrlUtils.constructManifestUrlAsync(projectDir);\n\n  log.newLine();\n  urlOpts.printQRCode(url);\n\n  log('Your URL is\\n\\n' + chalk.underline(url) + '\\n');\n\n  if (!options.web) {\n    await printRunInstructionsAsync();\n    await urlOpts.handleMobileOptsAsync(projectDir, options);\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('url [path]')\n    .alias('u')\n    .helpGroup('url')\n\n    .option('-w, --web', 'Return the URL of the web app')\n    .description('Log a URL for opening the project in the Expo client')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(action);\n\n  program\n    .command('url:ipa [path]')\n    .helpGroup('url')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Log the download URL for the standalone iOS binary')\n    .asyncActionProjectDir(logArtifactUrl('ios'));\n\n  program\n    .command('url:apk [path]')\n    .helpGroup('url')\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n    .description('Log the download URL for the standalone Android binary')\n    .asyncActionProjectDir(logArtifactUrl('android'));\n}\n"],"file":"url.js"}