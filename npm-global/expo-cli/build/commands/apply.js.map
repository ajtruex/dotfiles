{"version":3,"sources":["../../src/commands/apply.ts"],"names":["ensureConfigExistsAsync","projectRoot","config","skipSDKVersionRequirement","dynamicConfigPath","staticConfigPath","JsonFile","writeAsync","path","join","expo","exp","json5","error","chalk","red","message","process","exit","program","command","option","helpGroup","description","asyncActionProjectDir","projectDir","options","platform"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAOA,eAAeA,uBAAf,CAAuCC,WAAvC,EAA2E;AACzE,MAAI;AACF,UAAMC,MAAM,GAAG,yBAAUD,WAAV,EAAuB;AAAEE,MAAAA,yBAAyB,EAAE;AAA7B,KAAvB,CAAf,CADE,CAEF;;AACA,QAAI,CAACD,MAAM,CAACE,iBAAR,IAA6B,CAACF,MAAM,CAACG,gBAAzC,EAA2D;AACzD;AACA;AACA;AACA,YAAMC,oBAASC,UAAT,CACJC,gBAAKC,IAAL,CAAUR,WAAV,EAAuB,UAAvB,CADI,EAEJ;AACA;AAAES,QAAAA,IAAI,EAAER,MAAM,CAACS;AAAf,OAHI,EAIJ;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJI,CAAN;AAMD;AACF,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd;AACA;AACA,wBAAIC,iBAAMC,GAAN,CAAUF,KAAK,CAACG,OAAhB,CAAJ;AACA;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;AACF;;AAEc,kBAAUC,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,cADX,EAEGC,MAFH,CAGI,2BAHJ,EAII,wDAJJ,EAKI,kBALJ,EAOGC,SAPH,CAOa,cAPb,EAQE;AARF,GASGC,WATH,CASe,0DATf,EAUGC,qBAVH,CAUyB,OAAOC,UAAP,EAA2BC,OAA3B,KAAgD;AACrE,UAAM1B,uBAAuB,CAACyB,UAAD,CAA7B;;AAEA,QAAI,CAACC,OAAO,CAACC,QAAT,IAAqBD,OAAO,CAACC,QAAR,KAAqB,SAA9C,EAAyD;AACvD,YAAM,6CAA6BF,UAA7B,CAAN;AACA;AACD;;AAED,QAAI,CAACC,OAAO,CAACC,QAAT,IAAqBD,OAAO,CAACC,QAAR,KAAqB,KAA9C,EAAqD;AACnD,YAAM,yCAAyBF,UAAzB,CAAN;AACA;AACD;AACF,GAtBH;AAuBD","sourcesContent":["import { getConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport path from 'path';\n\nimport log from '../log';\nimport configureAndroidProjectAsync from './apply/configureAndroidProjectAsync';\nimport configureIOSProjectAsync from './apply/configureIOSProjectAsync';\nimport { logConfigWarningsAndroid, logConfigWarningsIOS } from './utils/logConfigWarnings';\n\ntype Options = {\n  platform?: string;\n  // todo: probably let people pass an ios or android directory in case they don't follow the convention\n};\n\nasync function ensureConfigExistsAsync(projectRoot: string): Promise<void> {\n  try {\n    const config = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n    // If no config exists in the file system then we should generate one so the process doesn't fail.\n    if (!config.dynamicConfigPath && !config.staticConfigPath) {\n      // Don't check for a custom config path because the process should fail if a custom file doesn't exist.\n      // Write the generated config.\n      // writeConfigJsonAsync(projectRoot, config.exp);\n      await JsonFile.writeAsync(\n        path.join(projectRoot, 'app.json'),\n        // @ts-ignore: ExpoConfig is not assignable to JSONObject\n        { expo: config.exp },\n        { json5: false }\n      );\n    }\n  } catch (error) {\n    // TODO(Bacon): Currently this is already handled in the command\n    log();\n    log(chalk.red(error.message));\n    log();\n    process.exit(1);\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('apply [path]')\n    .option(\n      '-p, --platform [platform]',\n      'Configure only the given platform (\"ios\" or \"android\")',\n      /^(android|ios)$/i\n    )\n    .helpGroup('experimental')\n    // .option('--interactive', 'TODO: provide a flag where people can see a diff for each option to be applied and approve or reject it')\n    .description('Sync the configuration from app.json to a native project')\n    .asyncActionProjectDir(async (projectDir: string, options: Options) => {\n      await ensureConfigExistsAsync(projectDir);\n\n      if (!options.platform || options.platform === 'android') {\n        await configureAndroidProjectAsync(projectDir);\n        logConfigWarningsAndroid();\n      }\n\n      if (!options.platform || options.platform === 'ios') {\n        await configureIOSProjectAsync(projectDir);\n        logConfigWarningsIOS();\n      }\n    });\n}\n"],"file":"apply.js"}