{"version":3,"sources":["../../../../../src/commands/upload/submission-service/archive-source/ArchiveFileSource.ts"],"names":["ArchiveFileSourceType","getArchiveFileLocationAsync","mode","source","sourceType","prompt","handlePromptSourceAsync","url","handleUrlSourceAsync","getArchiveLocationForUrlAsync","latest","handleLatestSourceAsync","path","handlePathSourceAsync","getArchiveLocationForPathAsync","buildId","handleBuildIdSourceAsync","SubmissionMode","online","resolvedPath","owner","slug","projectDir","builds","StandaloneBuild","getStandaloneBuilds","platform","length","log","error","chalk","bold","artifacts","build","getStandaloneBuildById","id","err","sourceTypeRaw","name","type","message","choices","value","askForArchiveUrlAsync","askForArchivePathAsync","askForBuildIdAsync","Error","defaultArchiveUrl","default","validate","validateUrl","defaultArchivePath","val","validator","isUUID","isURL","protocols"],"mappings":"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","sourcesContent":["import { Platform } from '@expo/config';\nimport { StandaloneBuild } from '@expo/xdl';\nimport validator from 'validator';\n\nimport log from '../../../../log';\nimport prompt from '../../../../prompt';\nimport { existingFile } from '../../../../validators';\nimport { SubmissionMode } from '../types';\nimport { getAppConfig } from '../utils/config';\nimport {\n  downloadAppArchiveAsync,\n  extractLocalArchiveAsync,\n  pathIsTar,\n  uploadAppArchiveAsync,\n} from '../utils/files';\n\nenum ArchiveFileSourceType {\n  url,\n  latest,\n  path,\n  buildId,\n  prompt,\n}\n\ninterface ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType;\n  projectDir: string;\n  platform: Platform;\n}\n\ninterface ArchiveFileUrlSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.url;\n  url: string;\n}\n\ninterface ArchiveFileLatestSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.latest;\n}\n\ninterface ArchiveFilePathSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.path;\n  path: string;\n}\n\ninterface ArchiveFileBuildIdSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.buildId;\n  id: string;\n}\n\ninterface ArchiveFilePromptSource extends ArchiveFileSourceBase {\n  sourceType: ArchiveFileSourceType.prompt;\n  projectDir: string;\n}\n\nexport type ArchiveFileSource =\n  | ArchiveFileUrlSource\n  | ArchiveFileLatestSource\n  | ArchiveFilePathSource\n  | ArchiveFileBuildIdSource\n  | ArchiveFilePromptSource;\n\nasync function getArchiveFileLocationAsync(\n  mode: SubmissionMode,\n  source: ArchiveFileSource\n): Promise<string> {\n  switch (source.sourceType) {\n    case ArchiveFileSourceType.prompt:\n      return await handlePromptSourceAsync(mode, source);\n    case ArchiveFileSourceType.url: {\n      const url = await handleUrlSourceAsync(mode, source);\n      return await getArchiveLocationForUrlAsync(mode, url);\n    }\n    case ArchiveFileSourceType.latest: {\n      const url = await handleLatestSourceAsync(mode, source);\n      return await getArchiveLocationForUrlAsync(mode, url);\n    }\n    case ArchiveFileSourceType.path: {\n      const path = await handlePathSourceAsync(mode, source);\n      return getArchiveLocationForPathAsync(mode, path);\n    }\n    case ArchiveFileSourceType.buildId: {\n      const url = await handleBuildIdSourceAsync(mode, source);\n      return await getArchiveLocationForUrlAsync(mode, url);\n    }\n  }\n}\n\nasync function getArchiveLocationForUrlAsync(mode: SubmissionMode, url: string): Promise<string> {\n  // When a URL points to a tar file, download it and extract using unified logic.\n  // Otherwise send it directly to the server in online mode.\n  if (mode === SubmissionMode.online && !pathIsTar(url)) {\n    return url;\n  } else {\n    log('Downloading your app archive');\n    return downloadAppArchiveAsync(url);\n  }\n}\n\nasync function getArchiveLocationForPathAsync(mode: SubmissionMode, path: string): Promise<string> {\n  const resolvedPath = await extractLocalArchiveAsync(path);\n\n  if (mode === SubmissionMode.online) {\n    log('Uploading your app archive to the Expo Submission Service');\n    return await uploadAppArchiveAsync(resolvedPath);\n  } else {\n    return resolvedPath;\n  }\n}\n\nasync function handleUrlSourceAsync(\n  mode: SubmissionMode,\n  source: ArchiveFileUrlSource\n): Promise<string> {\n  return source.url;\n}\n\nasync function handleLatestSourceAsync(\n  mode: SubmissionMode,\n  source: ArchiveFileLatestSource\n): Promise<string> {\n  const { owner, slug } = getAppConfig(source.projectDir);\n  const builds = await StandaloneBuild.getStandaloneBuilds(\n    {\n      platform: source.platform,\n      owner,\n      slug,\n    },\n    1\n  );\n  if (builds.length === 0) {\n    log.error(\n      log.chalk.bold(\n        \"Couldn't find any builds for this project on Expo servers. It looks like you haven't run expo build:android yet.\"\n      )\n    );\n    return getArchiveFileLocationAsync(mode, {\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  }\n  return builds[0].artifacts.url;\n}\n\nasync function handlePathSourceAsync(\n  mode: SubmissionMode,\n  source: ArchiveFilePathSource\n): Promise<string> {\n  if (!(await existingFile(source.path))) {\n    log.error(log.chalk.bold(`${source.path} doesn't exist`));\n    return getArchiveFileLocationAsync(mode, {\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  }\n  return source.path;\n}\n\nasync function handleBuildIdSourceAsync(\n  mode: SubmissionMode,\n  source: ArchiveFileBuildIdSource\n): Promise<string> {\n  const { owner, slug } = getAppConfig(source.projectDir);\n  let build: any;\n  try {\n    build = await StandaloneBuild.getStandaloneBuildById({\n      platform: source.platform,\n      id: source.id,\n      owner,\n      slug,\n    });\n  } catch (err) {\n    log.error(err);\n    throw err;\n  }\n\n  if (!build) {\n    log.error(log.chalk.bold(`Couldn't find build for id ${source.id}`));\n    return getArchiveFileLocationAsync(mode, {\n      sourceType: ArchiveFileSourceType.prompt,\n      platform: source.platform,\n      projectDir: source.projectDir,\n    });\n  } else {\n    return build.artifacts.url;\n  }\n}\n\nasync function handlePromptSourceAsync(\n  mode: SubmissionMode,\n  source: ArchiveFilePromptSource\n): Promise<string> {\n  const { sourceType: sourceTypeRaw } = await prompt({\n    name: 'sourceType',\n    type: 'list',\n    message: 'What would you like to submit?',\n    choices: [\n      { name: 'I have a url to the app archive', value: ArchiveFileSourceType.url },\n      {\n        name: \"I'd like to upload the app archive from my computer\",\n        value: ArchiveFileSourceType.path,\n      },\n      {\n        name: 'The latest build from Expo servers',\n        value: ArchiveFileSourceType.latest,\n      },\n      {\n        name: 'A build identified by a build id',\n        value: ArchiveFileSourceType.buildId,\n      },\n    ],\n  });\n  const sourceType = sourceTypeRaw as ArchiveFileSourceType;\n  switch (sourceType) {\n    case ArchiveFileSourceType.url: {\n      const url = await askForArchiveUrlAsync();\n      return getArchiveFileLocationAsync(mode, {\n        sourceType: ArchiveFileSourceType.url,\n        url,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.path: {\n      const path = await askForArchivePathAsync();\n      return getArchiveFileLocationAsync(mode, {\n        sourceType: ArchiveFileSourceType.path,\n        path,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.latest: {\n      return getArchiveFileLocationAsync(mode, {\n        sourceType: ArchiveFileSourceType.latest,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.buildId: {\n      const id = await askForBuildIdAsync();\n      return getArchiveFileLocationAsync(mode, {\n        sourceType: ArchiveFileSourceType.buildId,\n        id,\n        platform: source.platform,\n        projectDir: source.projectDir,\n      });\n    }\n    case ArchiveFileSourceType.prompt:\n      throw new Error('This should never happen');\n  }\n}\n\nasync function askForArchiveUrlAsync(): Promise<string> {\n  const defaultArchiveUrl = 'https://url.to/your/archive.aab';\n  const { url } = await prompt({\n    name: 'url',\n    message: 'URL:',\n    default: defaultArchiveUrl,\n    type: 'input',\n    validate: (url: string): string | boolean => {\n      if (url === defaultArchiveUrl) {\n        return 'That was just an example URL, meant to show you the format that we expect for the response.';\n      } else if (!validateUrl(url)) {\n        return `${url} does not conform to HTTP format`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return url;\n}\n\nasync function askForArchivePathAsync(): Promise<string> {\n  const defaultArchivePath = '/path/to/your/archive.aab';\n  const { path } = await prompt({\n    name: 'path',\n    message: 'Path to the app archive file (aab or apk):',\n    default: defaultArchivePath,\n    type: 'input',\n    validate: async (path: string): Promise<boolean | string> => {\n      if (path === defaultArchivePath) {\n        return 'That was just an example path, meant to show you the format that we expect for the response.';\n      } else if (!(await existingFile(path, false))) {\n        return `File ${path} doesn't exist.`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return path;\n}\n\nasync function askForBuildIdAsync(): Promise<string> {\n  const { id } = await prompt({\n    name: 'id',\n    message: 'Build ID:',\n    type: 'input',\n    validate: (val: string): string | boolean => {\n      if (!validator.isUUID(val)) {\n        return `${val} is not a valid id`;\n      } else {\n        return true;\n      }\n    },\n  });\n  return id;\n}\n\nfunction validateUrl(url: string): boolean {\n  return validator.isURL(url, {\n    protocols: ['http', 'https'],\n  });\n}\n\nexport { ArchiveFileSourceType, getArchiveFileLocationAsync };\n"],"file":"ArchiveFileSource.js"}