{"version":3,"sources":["../../src/commands/upload.ts"],"names":["SOURCE_OPTIONS","program","command","alias","description","helpGroup","option","asyncActionProjectDir","projectDir","options","useSubmissionService","checkRuntimePlatform","submissionMode","SubmissionMode","online","offline","ctx","AndroidSubmitCommand","createContext","runAsync","longDescription","on","LANGUAGES","join","args","Object","keys","length","Error","IOSUploader","validateOptions","uploader","upload","err","log","error","warn","chalk","bold","TerminalLink","transporterAppLink","targetPlatform","process","platform","exit"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { Command } from 'commander';\nimport pick from 'lodash/pick';\n\nimport log from '../log';\nimport IOSUploader, { IosPlatformOptions, LANGUAGES } from './upload/IOSUploader';\nimport AndroidSubmitCommand from './upload/submission-service/android/AndroidSubmitCommand';\nimport { AndroidSubmitCommandOptions } from './upload/submission-service/android/types';\nimport { SubmissionMode } from './upload/submission-service/types';\nimport * as TerminalLink from './utils/TerminalLink';\n\nconst SOURCE_OPTIONS = ['id', 'latest', 'path', 'url'];\n\nexport default function (program: Command) {\n  program\n    .command('upload:android [path]')\n    .alias('ua')\n    .description('Upload an Android binary to the Google Play Store')\n    .helpGroup('upload')\n    .option('--latest', 'upload the latest build')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path [path]', 'path to the .apk/.aab file')\n    .option('--url <url>', 'app archive url')\n    .option('--key <key>', 'path to the JSON key used to authenticate with Google Play')\n    .option(\n      '--android-package <android-package>',\n      'Android package name (using expo.android.package from app.json by default)'\n    )\n    .option('--type <archive-type>', 'archive type: apk, aab', /^(apk|aab)$/i)\n    .option(\n      '--track <track>',\n      'the track of the application to use, choose from: production, beta, alpha, internal, rollout',\n      /^(production|beta|alpha|internal|rollout)$/i,\n      'internal'\n    )\n    .option(\n      '--release-status <release-status>',\n      'release status (used when uploading new apks/aabs), choose from: completed, draft, halted, inProgress',\n      /^(completed|draft|halted|inProgress)$/i,\n      'completed'\n    )\n    .option(\n      '--use-submission-service',\n      'Experimental: Use Submission Service for uploading your app. The upload process will happen on Expo servers.'\n    )\n    .option('--verbose', 'Always print logs from Submission Service')\n    // TODO: make this work outside the project directory (if someone passes all necessary options for upload)\n    .asyncActionProjectDir(async (projectDir: string, options: AndroidSubmitCommandOptions) => {\n      // TODO: remove this once we verify `fastlane supply` works on linux / windows\n      if (!options.useSubmissionService) {\n        checkRuntimePlatform('android');\n      }\n\n      const submissionMode = options.useSubmissionService\n        ? SubmissionMode.online\n        : SubmissionMode.offline;\n      const ctx = AndroidSubmitCommand.createContext(submissionMode, projectDir, options);\n      const command = new AndroidSubmitCommand(ctx);\n      await command.runAsync();\n    });\n\n  program\n    .command('upload:ios [path]')\n    .alias('ui')\n    .description('macOS only: Upload an iOS binary to Apple. An alternative to Transporter.app')\n    .longDescription(\n      'Upload an iOS binary to Apple TestFlight (MacOS only). Uses the latest build by default'\n    )\n    .helpGroup('upload')\n    .option('--latest', 'upload the latest build (default)')\n    .option('--id <id>', 'id of the build to upload')\n    .option('--path [path]', 'path to the .ipa file')\n    .option('--url <url>', 'app archive url')\n    .option(\n      '--apple-id <apple-id>',\n      'your Apple ID username (you can also set EXPO_APPLE_ID env variable)'\n    )\n    // apple unified App Store Connect and Developer Portal teams, this is temporary solution until fastlane implements those changes\n    // https://github.com/fastlane/fastlane/issues/14229\n    // after updating fastlane this value will be unnecessary\n    .option(\n      '--itc-team-id <itc-team-id>',\n      'App Store Connect Team ID - this option is deprecated, the proper ID is resolved automatically'\n    )\n    .option(\n      '--apple-id-password <apple-id-password>',\n      'your Apple ID password (you can also set EXPO_APPLE_PASSWORD env variable)'\n    )\n    .option(\n      '--app-name <app-name>',\n      `the name of your app as it will appear on the App Store, this can't be longer than 30 characters (default: expo.name from app.json)`\n    )\n    .option(\n      '--company-name <company-name>',\n      'the name of your company, needed only for the first upload of any app to App Store'\n    )\n    .option(\n      '--sku <sku>',\n      'a unique ID for your app that is not visible on the App Store, will be generated unless provided'\n    )\n    .option(\n      '--language <language>',\n      `primary language (e.g. English, German; run \\`expo upload:ios --help\\` to see the list of available languages)`,\n      'English'\n    )\n    .option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)')\n\n    .on('--help', function () {\n      log('Available languages:');\n      log(`  ${LANGUAGES.join(', ')}`);\n      log();\n    })\n    // TODO: make this work outside the project directory (if someone passes all necessary options for upload)\n    .asyncActionProjectDir(async (projectDir: string, options: IosPlatformOptions) => {\n      try {\n        // TODO: remove this once we verify `fastlane supply` works on linux / windows\n        checkRuntimePlatform('ios');\n\n        const args = pick(options, SOURCE_OPTIONS);\n        if (Object.keys(args).length > 1) {\n          throw new Error(`You have to choose only one of: --path, --id, --latest, --url`);\n        }\n        IOSUploader.validateOptions(options);\n        const uploader = new IOSUploader(projectDir, options);\n        await uploader.upload();\n      } catch (err) {\n        log.error('Failed to upload the standalone app to the App Store.');\n        log.warn(\n          `We recommend using ${chalk.bold(\n            TerminalLink.transporterAppLink()\n          )} instead of the ${chalk.bold(\n            'expo upload:ios'\n          )} command if you have any trouble with it.`\n        );\n\n        throw err;\n      }\n    });\n}\n\nfunction checkRuntimePlatform(targetPlatform: 'android' | 'ios'): void {\n  if (process.platform !== 'darwin') {\n    if (targetPlatform === 'android') {\n      log.error('Local Android uploads are only supported on macOS.');\n      log(\n        chalk.bold(\n          'Try the --use-submission-service flag to upload your app from Expo servers. This feature is behind a flag because it is experimental.'\n        )\n      );\n    } else {\n      log.error('Currently, iOS uploads are only supported on macOS, sorry :(');\n    }\n    process.exit(1);\n  }\n}\n"],"file":"upload.js"}