{"version":3,"sources":["../../../src/commands/utils/Tar.ts"],"names":["pipeline","stream","downloadAndDecompressAsync","url","destination","downloadStream","got","on","tar","extract","cwd"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,QAAQ,GAAG,uBAAUC,kBAAOD,QAAjB,CAAjB;AAEA;;;;;;;AAMO,eAAeE,0BAAf,CACLC,GADK,EAELC,WAFK,EAGY;AACjB,QAAMC,cAAc,GAAGC,eAAIL,MAAJ,CAAWE,GAAX,EAAgBI,EAAhB,CAAmB,kBAAnB,EAAuC,wCAAvC,CAAvB;;AAEA,QAAMP,QAAQ,CAACK,cAAD,EAAiBG,eAAIC,OAAJ,CAAY;AAAEC,IAAAA,GAAG,EAAEN;AAAP,GAAZ,CAAjB,CAAd;AACA,SAAOA,WAAP;AACD","sourcesContent":["import got from 'got';\nimport stream from 'stream';\nimport tar from 'tar';\nimport { promisify } from 'util';\n\nimport { createProgressTracker } from './progress';\n\nconst pipeline = promisify(stream.pipeline);\n\n/**\n * Download a tar.gz file and extract it to a folder.\n *\n * @param url remote URL to download.\n * @param destination destination folder to extract the tar to.\n */\nexport async function downloadAndDecompressAsync(\n  url: string,\n  destination: string\n): Promise<string> {\n  const downloadStream = got.stream(url).on('downloadProgress', createProgressTracker());\n\n  await pipeline(downloadStream, tar.extract({ cwd: destination }));\n  return destination;\n}\n"],"file":"Tar.js"}