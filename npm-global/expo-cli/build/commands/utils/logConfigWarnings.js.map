{"version":3,"sources":["../../../src/commands/utils/logConfigWarnings.ts"],"names":["logConfigWarningsIOS","warningsIOS","WarningAggregator","flushWarningsIOS","length","forEach","property","warning","link","log","nested","formatNamedWarning","logConfigWarningsAndroid","warningsAndroid","flushWarningsAndroid","chalk","bold","getSpacer","dim","TerminalLink","learnMore","text","endsWith"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,SAASA,oBAAT,GAAgC;AACrC,QAAMC,WAAW,GAAGC,4BAAkBC,gBAAlB,EAApB;;AACA,MAAIF,WAAW,CAACG,MAAhB,EAAwB;AACtBH,IAAAA,WAAW,CAACI,OAAZ,CAAoB,CAAC,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAD,KAA+B;AACjDC,qBAAIC,MAAJ,CAAWC,kBAAkB,CAACL,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAA7B;AACD,KAFD;AAGD;;AAED,SAAO,CAAC,CAACP,WAAT;AACD;;AAEM,SAASW,wBAAT,GAAoC;AACzC,QAAMC,eAAe,GAAGX,4BAAkBY,oBAAlB,EAAxB;;AACA,MAAID,eAAe,CAACT,MAApB,EAA4B;AAC1BS,IAAAA,eAAe,CAACR,OAAhB,CAAwB,CAAC,CAACC,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAAD,KAA+B;AACrDC,qBAAIC,MAAJ,CAAWC,kBAAkB,CAACL,QAAD,EAAWC,OAAX,EAAoBC,IAApB,CAA7B;AACD,KAFD;AAGD;;AAED,SAAO,CAAC,CAACK,eAAT;AACD;;AAEM,SAASF,kBAAT,CAA4BL,QAA5B,EAA8CC,OAA9C,EAA+DC,IAA/D,EAA8E;AACnF,SAAQ,KAAIO,iBAAMC,IAAN,CAAWV,QAAX,CAAqB,KAAIC,OAAQ,GAC3CC,IAAI,GAAGS,SAAS,CAACV,OAAD,CAAT,GAAqBE,eAAIM,KAAJ,CAAUG,GAAV,CAAcC,YAAY,GAACC,SAAb,CAAuBZ,IAAvB,CAAd,CAAxB,GAAsE,EAC3E,EAFD;AAGD;;AAED,SAASS,SAAT,CAAmBI,IAAnB,EAAiC;AAC/B,MAAIA,IAAI,CAACC,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtB,WAAO,GAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF","sourcesContent":["import { WarningAggregator } from '@expo/config';\nimport chalk from 'chalk';\n\nimport log from '../../log';\nimport * as TerminalLink from './TerminalLink';\n\nexport function logConfigWarningsIOS() {\n  const warningsIOS = WarningAggregator.flushWarningsIOS();\n  if (warningsIOS.length) {\n    warningsIOS.forEach(([property, warning, link]) => {\n      log.nested(formatNamedWarning(property, warning, link));\n    });\n  }\n\n  return !!warningsIOS;\n}\n\nexport function logConfigWarningsAndroid() {\n  const warningsAndroid = WarningAggregator.flushWarningsAndroid();\n  if (warningsAndroid.length) {\n    warningsAndroid.forEach(([property, warning, link]) => {\n      log.nested(formatNamedWarning(property, warning, link));\n    });\n  }\n\n  return !!warningsAndroid;\n}\n\nexport function formatNamedWarning(property: string, warning: string, link?: string) {\n  return `- ${chalk.bold(property)}: ${warning}${\n    link ? getSpacer(warning) + log.chalk.dim(TerminalLink.learnMore(link)) : ''\n  }`;\n}\n\nfunction getSpacer(text: string) {\n  if (text.endsWith('.')) {\n    return ' ';\n  } else {\n    return '. ';\n  }\n}\n"],"file":"logConfigWarnings.js"}