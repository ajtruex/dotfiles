{"version":3,"sources":["../../../src/commands/utils/ProjectUtils.ts"],"names":["findProjectRootAsync","base","previous","dir","pkg","JsonFile","readAsync","path","join","hasReactNativeUnimodules","dependencies","hasOwnProperty","hasExpo","isManaged","workflow","projectRoot","dirname","CommandError","usesOldExpoUpdatesAsync","pkgPath","pkgExists","fs","existsSync","getAsync","version","coercedVersion","semver","coerce","satisfies","validateGitStatusAsync","workingTreeStatus","result","stdout","e","log","nested","chalk","green","bold","red"],"mappings":"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","sourcesContent":["import JsonFile from '@expo/json-file';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport semver from 'semver';\n\nimport CommandError from '../../CommandError';\nimport log from '../../log';\n\nexport async function findProjectRootAsync(\n  base: string\n): Promise<{ projectRoot: string; workflow: 'managed' | 'bare' }> {\n  let previous = null;\n  let dir = base;\n\n  do {\n    try {\n      // This will throw if there is no package.json in the directory\n      const pkg = await JsonFile.readAsync(path.join(dir, 'package.json'));\n      const hasReactNativeUnimodules = pkg.dependencies?.hasOwnProperty('react-native-unimodules');\n      const hasExpo = pkg.dependencies?.hasOwnProperty('expo');\n      const isManaged = hasExpo && !hasReactNativeUnimodules;\n      const workflow = isManaged ? 'managed' : 'bare';\n\n      return { projectRoot: dir, workflow };\n    } catch {\n      // Expected to throw if no package.json is present\n    } finally {\n      previous = dir;\n      dir = path.dirname(dir);\n    }\n  } while (dir !== previous);\n\n  throw new CommandError(\n    'NO_PROJECT',\n    'No managed or bare projects found. Please make sure you are inside a project folder.'\n  );\n}\n\n// If we get here and can't find expo-updates or package.json we just assume\n// that we are not using the old expo-updates\nexport async function usesOldExpoUpdatesAsync(projectRoot: string): Promise<boolean> {\n  const pkgPath = path.join(projectRoot, 'package.json');\n  const pkgExists = fs.existsSync(pkgPath);\n\n  if (!pkgExists) {\n    return false;\n  }\n\n  const dependencies = await JsonFile.getAsync(pkgPath, 'dependencies', {});\n  if (!dependencies['expo-updates']) {\n    return false;\n  }\n\n  const version = dependencies['expo-updates'] as string;\n  const coercedVersion = semver.coerce(version);\n  if (coercedVersion && semver.satisfies(coercedVersion, '~0.1.0')) {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch (e) {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    log.nested(`Your git working tree is ${chalk.green('clean')}`);\n    log.nested('To revert the changes after this command completes, you can run the following:');\n    log.nested('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    log.nested(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    log.nested(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    log.nested(\"We couldn't find a git repository in your project directory.\");\n    log.nested(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"file":"ProjectUtils.js"}