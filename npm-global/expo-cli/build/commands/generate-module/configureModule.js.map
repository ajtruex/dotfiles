{"version":3,"sources":["../../../src/commands/generate-module/configureModule.ts"],"names":["preparePrefixes","name","prefix","startsWith","substr","length","asyncForEach","array","callback","index","removeFiles","directoryPath","filenames","Promise","all","map","filename","fse","remove","path","resolve","renameFilesWithExtensions","extensions","renamings","from","to","extension","fromFilename","existsSync","join","toFilename","rename","replaceContents","replaceFunction","nodir","file","replaceContent","filePath","content","readFile","newContent","writeFile","removeUponEmptyOrOnlyEmptySubdirs","dirPath","contents","readdir","results","fileStats","lstat","isDirectory","isRemovable","reduce","acc","current","configureIOS","modulePath","podName","jsPackageName","viewManager","iosPath","singleFileContent","replace","findAndroidSourceDir","androidPath","flavor","androidSrcPathBase","javaExists","pathExistsSync","kotlinExists","CommandError","findTemplateAndroidPackage","flavorSrcPath","srcFiles","filter","item","endsWith","traverseAll","packageDirNames","relative","split","slice","configureAndroid","javaPackage","moduleName","androidSrcPath","templateJavaPackage","sourceFilesPath","destinationFilesPath","packageContent","mkdirp","copy","androidTestPath","templateTestPackage","testSourcePath","testDestinationPath","RegExp","gradleContent","configureTS","moduleNameWithExpoPrefix","tsPath","fileContent","configureNPM","npmModuleName","readmeContent","configureModule","newModulePath","configuration"],"mappings":"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","sourcesContent":["import fse from 'fs-extra';\nimport walkSync from 'klaw-sync';\nimport path from 'path';\n\nimport CommandError from '../../CommandError';\nimport { ModuleConfiguration } from './ModuleConfiguration';\n\n// TODO (barthap): If ever updated to TS 4.0, change this to:\n// type PreparedPrefixes = [nameWithExpoPrefix: string, nameWithoutExpoPrefix: string];\ntype PreparedPrefixes = [string, string];\n\n/**\n * prepares _Expo_ prefixes for specified name\n * @param name module name, e.g. JS package name\n * @param prefix prefix to prepare with, defaults to _Expo_\n * @returns tuple `[nameWithPrefix: string, nameWithoutPrefix: string]`\n */\nconst preparePrefixes = (name: string, prefix: string = 'Expo'): PreparedPrefixes =>\n  name.startsWith(prefix) ? [name, name.substr(prefix.length)] : [`${prefix}${name}`, name];\n\nconst asyncForEach = async <T>(\n  array: T[],\n  callback: (value: T, index: number, array: T[]) => Promise<void>\n) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\n\n/**\n * Removes specified files. If one file doesn't exist already, skips it\n * @param directoryPath directory containing files to remove\n * @param filenames array of filenames to remove\n */\nasync function removeFiles(directoryPath: string, filenames: string[]) {\n  await Promise.all(filenames.map(filename => fse.remove(path.resolve(directoryPath, filename))));\n}\n\n/**\n * Renames files names\n * @param directoryPath - directory that holds files to be renamed\n * @param extensions - array of extensions for files that would be renamed, must be provided with leading dot or empty for no extension, e.g. ['.html', '']\n * @param renamings - array of filenames and their replacers\n */\nconst renameFilesWithExtensions = async (\n  directoryPath: string,\n  extensions: string[],\n  renamings: { from: string; to: string }[]\n) => {\n  await asyncForEach(\n    renamings,\n    async ({ from, to }) =>\n      await asyncForEach(extensions, async extension => {\n        const fromFilename = `${from}${extension}`;\n        if (!fse.existsSync(path.join(directoryPath, fromFilename))) {\n          return;\n        }\n        const toFilename = `${to}${extension}`;\n        await fse.rename(\n          path.join(directoryPath, fromFilename),\n          path.join(directoryPath, toFilename)\n        );\n      })\n  );\n};\n\n/**\n * Enters each file recursively in provided dir and replaces content by invoking provided callback function\n * @param directoryPath - root directory\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContents = async (\n  directoryPath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  await Promise.all(\n    walkSync(directoryPath, { nodir: true }).map(file => replaceContent(file.path, replaceFunction))\n  );\n};\n\n/**\n * Replaces content in file. Does nothing if the file doesn't exist\n * @param filePath - provided file\n * @param replaceFunction - function that converts current content into something different\n */\nconst replaceContent = async (\n  filePath: string,\n  replaceFunction: (contentOfSingleFile: string) => string\n) => {\n  if (!fse.existsSync(filePath)) {\n    return;\n  }\n\n  const content = await fse.readFile(filePath, 'utf8');\n  const newContent = replaceFunction(content);\n  if (newContent !== content) {\n    await fse.writeFile(filePath, newContent);\n  }\n};\n\n/**\n * Removes all empty subdirs up to and including dirPath\n * Recursively enters all subdirs and removes them if one is empty or cantained only empty subdirs\n * @param dirPath - directory path that is being inspected\n * @returns whether the given base directory and any empty subdirectories were deleted or not\n */\nconst removeUponEmptyOrOnlyEmptySubdirs = async (dirPath: string): Promise<boolean> => {\n  const contents = await fse.readdir(dirPath);\n  const results = await Promise.all(\n    contents.map(async file => {\n      const filePath = path.join(dirPath, file);\n      const fileStats = await fse.lstat(filePath);\n      return fileStats.isDirectory() && (await removeUponEmptyOrOnlyEmptySubdirs(filePath));\n    })\n  );\n  const isRemovable = results.reduce((acc, current) => acc && current, true);\n  if (isRemovable) {\n    await fse.remove(dirPath);\n  }\n  return isRemovable;\n};\n\n/**\n * Prepares iOS part, mainly by renaming all files and some template word in files\n * Versioning is done automatically based on package.json from JS/TS part\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureIOS(\n  modulePath: string,\n  { podName, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const iosPath = path.join(modulePath, 'ios');\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    await removeFiles(path.join(iosPath, 'EXModuleTemplate'), [\n      `EXModuleTemplateView.h`,\n      `EXModuleTemplateView.m`,\n      `EXModuleTemplateViewManager.h`,\n      `EXModuleTemplateViewManager.m`,\n    ]);\n  }\n\n  await renameFilesWithExtensions(\n    path.join(iosPath, 'EXModuleTemplate'),\n    ['.h', '.m'],\n    [\n      { from: 'EXModuleTemplateModule', to: `${podName}Module` },\n      {\n        from: 'EXModuleTemplateView',\n        to: `${podName}View`,\n      },\n      {\n        from: 'EXModuleTemplateViewManager',\n        to: `${podName}ViewManager`,\n      },\n    ]\n  );\n  await renameFilesWithExtensions(\n    iosPath,\n    ['', '.podspec'],\n    [{ from: 'EXModuleTemplate', to: `${podName}` }]\n  );\n  await replaceContents(iosPath, singleFileContent =>\n    singleFileContent\n      .replace(/EXModuleTemplate/g, podName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n}\n\n/**\n * Gets path to Android source base dir: android/src/main/[java|kotlin]\n * Defaults to Java path if both exist\n * @param androidPath path do module android/ directory\n * @param flavor package flavor e.g main, test. Defaults to main\n * @throws INVALID_TEMPLATE if none exist\n * @returns path to flavor source base directory\n */\nfunction findAndroidSourceDir(androidPath: string, flavor: string = 'main'): string {\n  const androidSrcPathBase = path.join(androidPath, 'src', flavor);\n\n  const javaExists = fse.pathExistsSync(path.join(androidSrcPathBase, 'java'));\n  const kotlinExists = fse.pathExistsSync(path.join(androidSrcPathBase, 'kotlin'));\n\n  if (!javaExists && !kotlinExists) {\n    throw new CommandError(\n      'INVALID_TEMPLATE',\n      `Invalid template. Android source directory not found: ${androidSrcPathBase}/[java|kotlin]`\n    );\n  }\n\n  return path.join(androidSrcPathBase, javaExists ? 'java' : 'kotlin');\n}\n\n/**\n * Finds java package name based on directory structure\n * @param flavorSrcPath Path to source base directory: e.g. android/src/main/java\n * @returns java package name\n */\nfunction findTemplateAndroidPackage(flavorSrcPath: string) {\n  const srcFiles = walkSync(flavorSrcPath, {\n    filter: item => item.path.endsWith('.kt') || item.path.endsWith('.java'),\n    nodir: true,\n    traverseAll: true,\n  });\n\n  if (srcFiles.length === 0) {\n    throw new CommandError('INVALID TEMPLATE', 'No Android source files found in the template');\n  }\n\n  // srcFiles[0] will always be at the most top-level of the package structure\n  const packageDirNames = path.relative(flavorSrcPath, srcFiles[0].path).split('/').slice(0, -1);\n\n  if (packageDirNames.length === 0) {\n    throw new CommandError(\n      'INVALID TEMPLATE',\n      'Template Android sources must be within a package.'\n    );\n  }\n\n  return packageDirNames.join('.');\n}\n\n/**\n * Prepares Android part, mainly by renaming all files and template words in files\n * Sets all versions in Gradle to 1.0.0\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureAndroid(\n  modulePath: string,\n  { javaPackage, jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const androidPath = path.join(modulePath, 'android');\n  const [, moduleName] = preparePrefixes(jsPackageName, 'Expo');\n\n  const androidSrcPath = findAndroidSourceDir(androidPath);\n  const templateJavaPackage = findTemplateAndroidPackage(androidSrcPath);\n\n  const sourceFilesPath = path.join(androidSrcPath, ...templateJavaPackage.split('.'));\n  const destinationFilesPath = path.join(androidSrcPath, ...javaPackage.split('.'));\n\n  // remove ViewManager from template\n  if (!viewManager) {\n    removeFiles(sourceFilesPath, [`ModuleTemplateView.kt`, `ModuleTemplateViewManager.kt`]);\n\n    replaceContent(path.join(sourceFilesPath, 'ModuleTemplatePackage.kt'), packageContent =>\n      packageContent\n        .replace(/(^\\s+)+(^.*?){1}createViewManagers[\\s\\W\\w]+?\\}/m, '')\n        .replace(/^.*ViewManager$/, '')\n    );\n  }\n\n  await fse.mkdirp(destinationFilesPath);\n  await fse.copy(sourceFilesPath, destinationFilesPath);\n\n  // Remove leaf directory content\n  await fse.remove(sourceFilesPath);\n  // Cleanup all empty subdirs up to template package root dir\n  await removeUponEmptyOrOnlyEmptySubdirs(\n    path.join(androidSrcPath, templateJavaPackage.split('.')[0])\n  );\n\n  // prepare tests\n  if (fse.existsSync(path.resolve(androidPath, 'src', 'test'))) {\n    const androidTestPath = findAndroidSourceDir(androidPath, 'test');\n    const templateTestPackage = findTemplateAndroidPackage(androidTestPath);\n    const testSourcePath = path.join(androidTestPath, ...templateTestPackage.split('.'));\n    const testDestinationPath = path.join(androidTestPath, ...javaPackage.split('.'));\n\n    await fse.mkdirp(testDestinationPath);\n    await fse.copy(testSourcePath, testDestinationPath);\n    await fse.remove(testSourcePath);\n    await removeUponEmptyOrOnlyEmptySubdirs(\n      path.join(androidTestPath, templateTestPackage.split('.')[0])\n    );\n\n    await replaceContents(testDestinationPath, singleFileContent =>\n      singleFileContent.replace(new RegExp(templateTestPackage, 'g'), javaPackage)\n    );\n\n    await renameFilesWithExtensions(\n      testDestinationPath,\n      ['.kt', '.java'],\n      [{ from: 'ModuleTemplateModuleTest', to: `${moduleName}ModuleTest` }]\n    );\n  }\n\n  // Replace contents of destination files\n  await replaceContents(androidPath, singleFileContent =>\n    singleFileContent\n      .replace(new RegExp(templateJavaPackage, 'g'), javaPackage)\n      .replace(/ModuleTemplate/g, moduleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n  );\n  await replaceContent(path.join(androidPath, 'build.gradle'), gradleContent =>\n    gradleContent\n      .replace(/\\bversion = ['\"][\\w.-]+['\"]/, \"version = '1.0.0'\")\n      .replace(/versionCode \\d+/, 'versionCode 1')\n      .replace(/versionName ['\"][\\w.-]+['\"]/, \"versionName '1.0.0'\")\n  );\n  await renameFilesWithExtensions(\n    destinationFilesPath,\n    ['.kt', '.java'],\n    [\n      { from: 'ModuleTemplateModule', to: `${moduleName}Module` },\n      { from: 'ModuleTemplatePackage', to: `${moduleName}Package` },\n      { from: 'ModuleTemplateView', to: `${moduleName}View` },\n      { from: 'ModuleTemplateViewManager', to: `${moduleName}ViewManager` },\n    ]\n  );\n}\n\n/**\n * Prepares TS part.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureTS(\n  modulePath: string,\n  { jsPackageName, viewManager }: ModuleConfiguration\n) {\n  const [moduleNameWithExpoPrefix, moduleName] = preparePrefixes(jsPackageName);\n\n  const tsPath = path.join(modulePath, 'src');\n\n  // remove View Manager from template\n  if (!viewManager) {\n    await removeFiles(path.join(tsPath), [\n      'ExpoModuleTemplateView.tsx',\n      'ExpoModuleTemplateNativeView.ts',\n      'ExpoModuleTemplateNativeView.web.tsx',\n    ]);\n    await replaceContent(path.join(tsPath, 'ModuleTemplate.ts'), fileContent =>\n      fileContent.replace(/(^\\s+)+(^.*?){1}ExpoModuleTemplateView.*$/m, '')\n    );\n  }\n\n  await renameFilesWithExtensions(\n    path.join(tsPath, '__tests__'),\n    ['.ts'],\n    [{ from: 'ModuleTemplate-test', to: `${moduleName}-test` }]\n  );\n  await renameFilesWithExtensions(\n    tsPath,\n    ['.tsx', '.ts'],\n    [\n      { from: 'ExpoModuleTemplateView', to: `${moduleNameWithExpoPrefix}View` },\n      { from: 'ExpoModuleTemplateNativeView', to: `${moduleNameWithExpoPrefix}NativeView` },\n      { from: 'ExpoModuleTemplateNativeView.web', to: `${moduleNameWithExpoPrefix}NativeView.web` },\n      { from: 'ExpoModuleTemplate', to: moduleNameWithExpoPrefix },\n      { from: 'ExpoModuleTemplate.web', to: `${moduleNameWithExpoPrefix}.web` },\n      { from: 'ModuleTemplate', to: moduleName },\n      { from: 'ModuleTemplate.types', to: `${moduleName}.types` },\n    ]\n  );\n\n  await replaceContents(tsPath, singleFileContent =>\n    singleFileContent\n      .replace(/ExpoModuleTemplate/g, moduleNameWithExpoPrefix)\n      .replace(/ModuleTemplate/g, moduleName)\n  );\n}\n\n/**\n * Prepares files for npm (package.json and README.md).\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nasync function configureNPM(\n  modulePath: string,\n  { npmModuleName, podName, jsPackageName }: ModuleConfiguration\n) {\n  const [, moduleName] = preparePrefixes(jsPackageName);\n\n  await replaceContent(path.join(modulePath, 'package.json'), singleFileContent =>\n    singleFileContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/\"version\": \"[\\w.-]+\"/, '\"version\": \"1.0.0\"')\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/ModuleTemplate/g, moduleName)\n  );\n  await replaceContent(path.join(modulePath, 'README.md'), readmeContent =>\n    readmeContent\n      .replace(/expo-module-template/g, npmModuleName)\n      .replace(/ExpoModuleTemplate/g, jsPackageName)\n      .replace(/EXModuleTemplate/g, podName)\n  );\n}\n\n/**\n * Configures TS, Android and iOS parts of generated module mostly by applying provided renamings.\n * @param modulePath - module directory\n * @param configuration - naming configuration\n */\nexport default async function configureModule(\n  newModulePath: string,\n  configuration: ModuleConfiguration\n) {\n  await configureNPM(newModulePath, configuration);\n  await configureTS(newModulePath, configuration);\n  await configureAndroid(newModulePath, configuration);\n  await configureIOS(newModulePath, configuration);\n}\n"],"file":"configureModule.js"}