{"version":3,"sources":["../../../src/commands/start/TerminalUI.ts"],"names":["CTRL_C","CTRL_D","CTRL_L","bold","b","italic","i","underline","u","chalk","clearConsole","process","stdout","write","platform","printHelp","PLATFORM_TAG","ProjectUtils","getPlatformTag","log","newLine","nested","div","dim","printUsage","projectDir","options","dev","ProjectSettings","readAsync","openDevToolsAtStartup","UserSettings","getAsync","devMode","currentToggle","isMac","ui","webOnly","filter","Boolean","map","key","message","status","view","length","join","printServerInfo","Webpack","printConnectionInstructions","url","UrlUtils","constructManifestUrlAsync","urlOpts","printQRCode","wrap","columns","wrapItem","item","text","trimStart","iosInfo","webInfo","startAsync","projectRoot","stdin","startWaitingForCommand","setRawMode","resume","setEncoding","on","handleKeypress","stopWaitingForCommand","removeListener","Prompts","addInteractionListener","pause","UserManager","setInteractiveAuthenticationCallback","Android","openWebProjectAsync","shouldPrompt","nonInteractive","Simulator","red","openProjectAsync","lanAddress","hostType","defaultRecipient","rl","readline","createInterface","input","output","chr","name","cleanup","cancel","close","addListener","question","sendTo","trim","sent","Exp","sendAsync","err","setAsync","emit","openAsync","devToolsPort","readPackagerInfoAsync","enabled","projectSettings","minify","reset","Project"],"mappings":"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","sourcesContent":["import {\n  Android,\n  Exp,\n  Project,\n  ProjectSettings,\n  ProjectUtils,\n  Prompts,\n  Simulator,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Webpack,\n} from '@expo/xdl';\nimport chalk from 'chalk';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport readline from 'readline';\nimport wordwrap from 'wordwrap';\n\nimport { loginOrRegisterIfLoggedOutAsync } from '../../accounts';\nimport log from '../../log';\nimport urlOpts from '../../urlOpts';\nimport { startProjectInEditorAsync } from '../utils/EditorUtils';\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst { bold: b, italic: i, underline: u } = chalk;\n\ntype StartOptions = {\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n};\n\nconst clearConsole = (): void => {\n  process.stdout.write(process.platform === 'win32' ? '\\x1Bc' : '\\x1B[2J\\x1B[3J\\x1B[H');\n};\n\nconst printHelp = (): void => {\n  const PLATFORM_TAG = ProjectUtils.getPlatformTag('Expo');\n  log.newLine();\n  log.nested(`${PLATFORM_TAG} Press ${b('?')} to show a list of all available commands.`);\n};\n\nconst div = chalk.dim(`|`);\n\nconst printUsage = async (projectDir: string, options: Pick<StartOptions, 'webOnly'> = {}) => {\n  const { dev } = await ProjectSettings.readAsync(projectDir);\n  const openDevToolsAtStartup = await UserSettings.getAsync('openDevToolsAtStartup', true);\n  const devMode = dev ? 'development' : 'production';\n  const currentToggle = openDevToolsAtStartup ? 'enabled' : 'disabled';\n\n  const isMac = process.platform === 'darwin';\n\n  const ui = [\n    [],\n    ['a', `open Android`],\n    ['shift+a', `select a device or emulator`],\n    isMac && ['i', `open iOS simulator`],\n    isMac && ['shift+i', `select a simulator`],\n    ['w', `open web`],\n    [],\n    ['o', `open project code in your editor`],\n    ['c', `show project QR`],\n    ['p', `toggle build mode`, devMode],\n    ['r', `restart bundler`],\n    ['shift+r', `restart and clear cache`],\n    [],\n    ['d', `open Expo DevTools`],\n    ['shift+d', `toggle auto opening DevTools on startup`, currentToggle],\n    !options.webOnly && ['e', `share the app link by email`],\n  ];\n\n  log.nested(\n    ui\n      .filter(Boolean)\n      // @ts-ignore: filter doesn't work\n      .map(([key, message, status]) => {\n        if (!key) return '';\n        let view = ` \\u203A `;\n        if (key.length === 1) view += 'Press ';\n        view += `${b(key)} ${div} `;\n        view += message;\n        // let view = ` \\u203A Press ${b(key)} ${div} ${message}`;\n        if (status) {\n          view += ` ${chalk.dim(`(${i(status)})`)}`;\n        }\n        return view;\n      })\n      .join('\\n')\n  );\n};\n\nexport const printServerInfo = async (\n  projectDir: string,\n  options: Pick<StartOptions, 'webOnly'> = {}\n) => {\n  if (options.webOnly) {\n    Webpack.printConnectionInstructions(projectDir);\n    printHelp();\n    return;\n  }\n  const url = await UrlUtils.constructManifestUrlAsync(projectDir);\n  log.newLine();\n  log.nested(`  ${u(url)}`);\n  log.newLine();\n  urlOpts.printQRCode(url);\n  const wrap = wordwrap(2, process.stdout.columns || 80);\n  const wrapItem = wordwrap(4, process.stdout.columns || 80);\n  const item = (text: string): string => '  \\u2022 ' + wrapItem(text).trimStart();\n  const iosInfo = process.platform === 'darwin' ? `, or ${b('i')} for iOS simulator` : '';\n  const webInfo = `${b`w`} to run on ${u`w`}eb`;\n  log.nested(wrap(u('To run the app with live reloading, choose one of:')));\n  log.nested(item(`Scan the QR code above with the Expo app (Android) or the Camera app (iOS).`));\n  log.nested(item(`Press ${b`a`} for Android emulator${iosInfo}, or ${webInfo}.`));\n  log.nested(item(`Press ${b`e`} to send a link to your phone with email.`));\n\n  Webpack.printConnectionInstructions(projectDir);\n  printHelp();\n};\n\nexport const startAsync = async (projectRoot: string, options: StartOptions) => {\n  const { stdin } = process;\n  const startWaitingForCommand = () => {\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n    stdin.on('data', handleKeypress);\n  };\n\n  const stopWaitingForCommand = () => {\n    stdin.removeListener('data', handleKeypress);\n    stdin.setRawMode(false);\n    stdin.resume();\n  };\n\n  startWaitingForCommand();\n\n  Prompts.addInteractionListener(({ pause }) => {\n    if (pause) {\n      stopWaitingForCommand();\n    } else {\n      startWaitingForCommand();\n    }\n  });\n\n  UserManager.setInteractiveAuthenticationCallback(async () => {\n    stopWaitingForCommand();\n    try {\n      return await loginOrRegisterIfLoggedOutAsync();\n    } finally {\n      startWaitingForCommand();\n    }\n  });\n\n  await printServerInfo(projectRoot, options);\n\n  async function handleKeypress(key: string) {\n    if (options.webOnly) {\n      switch (key) {\n        case 'A':\n        case 'a':\n          clearConsole();\n          log('Opening the web project in Chrome on Android...');\n          await Android.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'A',\n          });\n          printHelp();\n          break;\n        case 'i':\n        case 'I':\n          clearConsole();\n          log('Opening the web project in Safari on iOS...');\n          await Simulator.openWebProjectAsync({\n            projectRoot,\n            shouldPrompt: !options.nonInteractive && key === 'I',\n            // note(brentvatne): temporarily remove logic for picking the\n            // simulator until we have parity for Android. this also ensures that we\n            // don't interfere with the default user flow until more users have tested\n            // this out.\n            //\n            // If no simulator is booted, then prompt which simulator to use.\n            // (key === 'I' || !(await Simulator.isSimulatorBootedAsync())),\n          });\n          printHelp();\n          break;\n        case 'e':\n          log(chalk.red` \\u203A Sending a URL is not supported in web-only mode`);\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'A':\n          clearConsole();\n          await Android.openProjectAsync({ projectRoot, shouldPrompt: true });\n          printHelp();\n          break;\n        case 'a': {\n          clearConsole();\n          log('Opening on Android...');\n          await Android.openProjectAsync({ projectRoot });\n          printHelp();\n          break;\n        }\n        case 'I':\n          clearConsole();\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: true,\n          });\n          printHelp();\n          break;\n        case 'i': {\n          clearConsole();\n\n          // note(brentvatne): temporarily remove logic for picking the\n          // simulator until we have parity for Android. this also ensures that we\n          // don't interfere with the default user flow until more users have tested\n          // this out.\n          //\n          // If no simulator is booted, then prompt for which simulator to use.\n          // const shouldPrompt =\n          //   !options.nonInteractive && (key === 'I' || !(await Simulator.isSimulatorBootedAsync()));\n\n          log('Opening on iOS...');\n          await Simulator.openProjectAsync({\n            projectRoot,\n            shouldPrompt: false,\n          });\n          printHelp();\n          break;\n        }\n        case 'e': {\n          stopWaitingForCommand();\n          const lanAddress = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n            hostType: 'lan',\n          });\n          const defaultRecipient = await UserSettings.getAsync('sendTo', null);\n          const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout,\n          });\n          const handleKeypress = (chr: string, key: { name: string }) => {\n            if (key && key.name === 'escape') {\n              cleanup();\n              cancel();\n            }\n          };\n          const cleanup = () => {\n            rl.close();\n            process.stdin.removeListener('keypress', handleKeypress);\n            startWaitingForCommand();\n          };\n          const cancel = async () => {\n            clearConsole();\n            printHelp();\n          };\n          clearConsole();\n          process.stdin.addListener('keypress', handleKeypress);\n          log('Please enter your email address (press ESC to cancel) ');\n          rl.question(\n            defaultRecipient ? `[default: ${defaultRecipient}]> ` : '> ',\n            async sendTo => {\n              cleanup();\n              if (!sendTo && defaultRecipient) {\n                sendTo = defaultRecipient;\n              }\n              sendTo = sendTo && sendTo.trim();\n              if (!sendTo) {\n                cancel();\n                return;\n              }\n              log(`Sending ${lanAddress} to ${sendTo}...`);\n\n              let sent = false;\n              try {\n                await Exp.sendAsync(sendTo, lanAddress);\n                sent = true;\n                log(`Sent link successfully.`);\n              } catch (err) {\n                log(`Could not send link. ${err}`);\n              }\n              printHelp();\n              if (sent) {\n                await UserSettings.setAsync('sendTo', sendTo);\n              }\n            }\n          );\n          break;\n        }\n      }\n    }\n\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n        process.emit('SIGINT');\n        break;\n      }\n      case CTRL_L: {\n        clearConsole();\n        break;\n      }\n      case '?': {\n        await printUsage(projectRoot, options);\n        break;\n      }\n      case 'w': {\n        clearConsole();\n        log('Attempting to open the project in a web browser...');\n        await Webpack.openAsync(projectRoot);\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'c': {\n        clearConsole();\n        await printServerInfo(projectRoot, options);\n        break;\n      }\n      case 'd': {\n        const { devToolsPort } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n        log('Opening DevTools in the browser...');\n        openBrowser(`http://localhost:${devToolsPort}`);\n        printHelp();\n        break;\n      }\n      case 'D': {\n        clearConsole();\n        const enabled = !(await UserSettings.getAsync('openDevToolsAtStartup', true));\n        await UserSettings.setAsync('openDevToolsAtStartup', enabled);\n        log(\n          `Automatically opening DevTools ${b(\n            enabled ? 'enabled' : 'disabled'\n          )}.\\nPress ${b`d`} to open DevTools now.`\n        );\n        printHelp();\n        break;\n      }\n      case 'p': {\n        clearConsole();\n        const projectSettings = await ProjectSettings.readAsync(projectRoot);\n        const dev = !projectSettings.dev;\n        await ProjectSettings.setAsync(projectRoot, { dev, minify: !dev });\n        log(\n          `Metro bundler is now running in ${chalk.bold(\n            dev ? 'development' : 'production'\n          )}${chalk.reset(` mode.`)}\nPlease reload the project in the Expo app for the change to take effect.`\n        );\n        printHelp();\n        break;\n      }\n      case 'r':\n      case 'R': {\n        clearConsole();\n        const reset = key === 'R';\n        if (reset) {\n          log('Restarting Metro bundler and clearing cache...');\n        } else {\n          log('Restarting Metro bundler...');\n        }\n        Project.startAsync(projectRoot, { ...options, reset });\n        break;\n      }\n      case 'o':\n        log('Trying to open the project in your editor...');\n        await startProjectInEditorAsync(projectRoot);\n    }\n  }\n};\n"],"file":"TerminalUI.js"}