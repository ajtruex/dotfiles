{"version":3,"sources":["../../src/commands/diagnostics.ts"],"names":["packageJSON","require","action","projectRoot","info","envinfo","run","System","Binaries","IDEs","Managers","SDKs","npmPackages","npmGlobalPackages","yaml","title","version","workflow","process","cwd","lines","split","pop","push","join","program","command","description","helpGroup","asyncAction"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAHA;AAKA,MAAMA,WAAW,GAAGC,OAAO,CAAC,oBAAD,CAA3B;;AAEA,eAAeC,MAAf,CAAsBC,WAAtB,EAA0D;AACxD,QAAMC,IAAI,GAAG,MAAMC,mBAAQC,GAAR,CACjB;AACEC,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,OAAP,CADV;AAEEC,IAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,UAAxB,CAFZ;AAGEC,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,gBAAV,CAHR;AAIEC,IAAAA,QAAQ,EAAE,CAAC,WAAD,CAJZ;AAKEC,IAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,aAAZ,CALR;AAMEC,IAAAA,WAAW,EAAE,CACX,MADW,EAEX,OAFW,EAGX,WAHW,EAIX,cAJW,EAKX,kBALW,EAMX,kBANW,EAOX,sBAPW,CANf;AAeEC,IAAAA,iBAAiB,EAAE,CAAC,UAAD;AAfrB,GADiB,EAkBjB;AACEC,IAAAA,IAAI,EAAE,IADR;AAEEC,IAAAA,KAAK,EAAG,YAAWf,WAAW,CAACgB,OAAQ;AAFzC,GAlBiB,CAAnB;AAwBA,QAAMC,QAAQ,GAAG,gCAAiBd,WAAjB,aAAiBA,WAAjB,cAAiBA,WAAjB,GAAgCe,OAAO,CAACC,GAAR,EAAhC,CAAjB;AACA,QAAMC,KAAK,GAAGhB,IAAI,CAACiB,KAAL,CAAW,IAAX,CAAd;AACAD,EAAAA,KAAK,CAACE,GAAN;AACAF,EAAAA,KAAK,CAACG,IAAN,CAAY,sBAAqBN,QAAS,EAA1C;AACA,sBAAIG,KAAK,CAACI,IAAN,CAAW,IAAX,IAAmB,IAAvB;AACD;;AAEc,kBAAUC,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,oBADX,EAEGC,WAFH,CAEe,qCAFf,EAGGC,SAHH,CAGa,MAHb,EAIGC,WAJH,CAIe3B,MAJf;AAKD","sourcesContent":["import { getDefaultTarget } from '@expo/config';\nimport { Command } from 'commander';\n// @ts-ignore\nimport envinfo from 'envinfo';\n\nimport log from '../log';\n\nconst packageJSON = require('../../package.json');\n\nasync function action(projectRoot: string): Promise<void> {\n  const info = await envinfo.run(\n    {\n      System: ['OS', 'Shell'],\n      Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n      IDEs: ['Xcode', 'Android Studio'],\n      Managers: ['CocoaPods'],\n      SDKs: ['iOS SDK', 'Android SDK'],\n      npmPackages: [\n        'expo',\n        'react',\n        'react-dom',\n        'react-native',\n        'react-native-web',\n        'react-navigation',\n        '@expo/webpack-config',\n      ],\n      npmGlobalPackages: ['expo-cli'],\n    },\n    {\n      yaml: true,\n      title: `Expo CLI ${packageJSON.version} environment info`,\n    }\n  );\n\n  const workflow = getDefaultTarget(projectRoot ?? process.cwd());\n  const lines = info.split('\\n');\n  lines.pop();\n  lines.push(`    Expo Workflow: ${workflow}`);\n  log(lines.join('\\n') + '\\n');\n}\n\nexport default function (program: Command) {\n  program\n    .command('diagnostics [path]')\n    .description('Log environment info to the console')\n    .helpGroup('info')\n    .asyncAction(action);\n}\n"],"file":"diagnostics.js"}