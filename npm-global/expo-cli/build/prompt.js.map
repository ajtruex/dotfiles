{"version":3,"sources":["../src/prompt.ts"],"names":["prompt","questions","nonInteractiveHelp","Array","isArray","nAllQuestions","length","program","nonInteractive","nQuestionsToAsk","filter","question","when","message","trim","replace","CommandError","inquirer","separator","args","Separator"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAKA;AACe,SAASA,MAAT,CACbC,SADa,EAEb;AAAEC,EAAAA;AAAF,IAA0D,EAF7C,EAGb;AACAD,EAAAA,SAAS,GAAGE,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2BA,SAA3B,GAAuC,CAACA,SAAD,CAAnD;AACA,QAAMI,aAAa,GAAGJ,SAAS,CAACK,MAAhC;;AACA,MAAIC,qBAAQC,cAAZ,EAA4B;AAC1B,UAAMC,eAAe,GAAGR,SAAS,CAACS,MAAV,CAAiBC,QAAQ,IAAI;AACnD,UAAI,EAAE,UAAUA,QAAZ,CAAJ,EAA2B;AACzB,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,OAAOA,QAAQ,CAACC,IAAhB,KAAyB,UAA7B,EAAyC;AAC9C;AACA;AACA;AACA,eAAOD,QAAQ,CAACC,IAAT,CAAc,EAAd,CAAP;AACD,OALM,MAKA;AACL,eAAOD,QAAQ,CAACC,IAAhB;AACD;AACF,KAXuB,EAWrBN,MAXH;;AAYA,QAAID,aAAa,KAAK,CAAlB,IAAuBI,eAAe,KAAK,CAA/C,EAAkD;AAChD,aAAO,EAAP;AACD;;AACD,QAAII,OAAO,GAAI,+DAAf;;AACA,QAAIX,kBAAJ,EAAwB;AACtBW,MAAAA,OAAO,IAAIX,kBAAX;AACD,KAFD,MAEO;AACL,YAAMS,QAAa,GAAGR,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2BA,SAAS,CAAC,CAAD,CAApC,GAA0CA,SAAhE;AACAY,MAAAA,OAAO,IAAK,oBAAmB,CAACF,QAAQ,CAACE,OAAT,IAAoB,EAArB,EAAyBC,IAAzB,GAAgCC,OAAhC,CAAwC,KAAxC,EAA+C,IAA/C,CAAqD,EAApF;AACD;;AACD,UAAM,KAAIC,uBAAJ,EAAiB,iBAAjB,EAAoCH,OAApC,CAAN;AACD;;AACD,SAAOI,oBAASjB,MAAT,CAAgBC,SAAhB,CAAP;AACD;;AAEDD,MAAM,CAACkB,SAAP,GAAmB,CAAC,GAAGC,IAAJ,KAAoB,KAAIF,oBAASG,SAAb,EAAuB,GAAGD,IAA1B,CAAvC","sourcesContent":["import program from 'commander';\nimport inquirer, { ChoiceType, Question } from 'inquirer';\n\nimport CommandError from './CommandError';\nexport { Question, ChoiceType };\n\ntype CliQuestions = Question | Question[];\n\n/** @deprecated this prompt is now deprecated in favor of ./prompts */\nexport default function prompt(\n  questions: CliQuestions,\n  { nonInteractiveHelp }: { nonInteractiveHelp?: string } = {}\n) {\n  questions = Array.isArray(questions) ? questions : [questions];\n  const nAllQuestions = questions.length;\n  if (program.nonInteractive) {\n    const nQuestionsToAsk = questions.filter(question => {\n      if (!('when' in question)) {\n        return true;\n      } else if (typeof question.when === 'function') {\n        // if `when` is a function it takes object containing previous answers as argument\n        // in this case we want to detect if any question will be asked, so it\n        // always will be empty object\n        return question.when({});\n      } else {\n        return question.when;\n      }\n    }).length;\n    if (nAllQuestions === 0 || nQuestionsToAsk === 0) {\n      return {} as any;\n    }\n    let message = `Input is required, but Expo CLI is in non-interactive mode.\\n`;\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      const question: any = Array.isArray(questions) ? questions[0] : questions;\n      message += `Required input:\\n${(question.message || '').trim().replace(/^/gm, '> ')}`;\n    }\n    throw new CommandError('NON_INTERACTIVE', message);\n  }\n  return inquirer.prompt(questions);\n}\n\nprompt.separator = (...args: any[]) => new inquirer.Separator(...args);\n"],"file":"prompt.js"}