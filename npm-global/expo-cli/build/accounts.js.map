{"version":3,"sources":["../src/accounts.ts"],"names":["UserManager","initialize","UserSecondFactorDeviceMethod","loginOrRegisterAsync","log","warn","program","nonInteractive","CommandError","name","question","type","message","choices","value","action","register","login","loginOrRegisterIfLoggedOutAsync","user","getCurrentUserAsync","options","parent","chalk","green","username","_usernamePasswordAuth","password","otp","process","env","EXPO_CLI_PASSWORD","_promptForOTPAsync","cancelBehavior","enterMessage","bold","otpQuestion","_promptForBackupOTPAsync","secondFactorDevices","nonPrimarySecondFactorDevices","filter","device","is_primary","length","hasAuthenticatorSecondFactorDevice","find","method","AUTHENTICATOR","smsNonPrimarySecondFactorDevices","SMS","authenticatorChoiceSentinel","cancelChoiceSentinel","deviceChoices","map","idx","title","sms_phone_number","push","selectedValue","apiAnonymous","ApiV2","clientForUser","postAsync","secondFactorDeviceID","id","_retryUsernamePasswordAuthWithOTPAsync","metadata","smsAutomaticallySent","undefined","primaryDevice","nested","loginAsync","questions","validate","val","trim","answers","data","e","ApiV2Error","code","Error","registeredUser","registerAsync"],"mappings":"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","sourcesContent":["import { ApiV2, RegistrationData, User, UserManager } from '@expo/xdl';\nimport { ApiV2Error } from '@expo/xdl/build/ApiV2';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport invariant from 'invariant';\n\nimport CommandError from './CommandError';\nimport log from './log';\nimport prompt, { Question } from './prompt';\nimport promptNew, { confirmAsync, Question as NewQuestion, selectAsync } from './prompts';\n\nUserManager.initialize();\n\ntype CommandOptions = {\n  username?: string;\n  password?: string;\n  otp?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport enum UserSecondFactorDeviceMethod {\n  AUTHENTICATOR = 'authenticator',\n  SMS = 'sms',\n}\n\nexport type SecondFactorDevice = {\n  id: string;\n  method: UserSecondFactorDeviceMethod;\n  sms_phone_number: string | null;\n  is_primary: boolean;\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  log.warn('An Expo user account is required to proceed.');\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name()} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: Question = {\n    type: 'list',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        name: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        name: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        name: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await prompt(question);\n\n  if (action === 'register') {\n    return register();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync();\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const action = await confirmAsync({\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      });\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\n/**\n * Prompt for an OTP with the option to cancel the question by answering empty (pressing return key).\n */\nasync function _promptForOTPAsync(cancelBehavior: 'cancel' | 'menu'): Promise<string | null> {\n  const enterMessage =\n    cancelBehavior === 'cancel'\n      ? `press ${log.chalk.bold('Enter')} to cancel`\n      : `press ${log.chalk.bold('Enter')} for more options`;\n  const otpQuestion: NewQuestion = {\n    type: 'text',\n    name: 'otp',\n    message: `One-time password or backup code (${enterMessage}):`,\n  };\n\n  const { otp } = await promptNew(otpQuestion);\n  if (!otp) {\n    return null;\n  }\n\n  return otp;\n}\n\n/**\n * Prompt for user to choose a backup OTP method. If selected method is SMS, a request\n * for a new OTP will be sent to that method. Then, prompt for the OTP, and retry the user login.\n */\nasync function _promptForBackupOTPAsync(\n  username: string,\n  password: string,\n  secondFactorDevices: SecondFactorDevice[]\n): Promise<string | null> {\n  const nonPrimarySecondFactorDevices = secondFactorDevices.filter(device => !device.is_primary);\n\n  if (nonPrimarySecondFactorDevices.length === 0) {\n    throw new CommandError(\n      'LOGIN_CANCELLED',\n      'No other second-factor devices set up. Ensure you have set up and certified a backup device.'\n    );\n  }\n\n  const hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(\n    device => device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR\n  );\n\n  const smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(\n    device => device.method === UserSecondFactorDeviceMethod.SMS\n  );\n\n  const authenticatorChoiceSentinel = -1;\n  const cancelChoiceSentinel = -2;\n\n  const deviceChoices = smsNonPrimarySecondFactorDevices.map((device, idx) => ({\n    title: device.sms_phone_number!,\n    value: idx,\n  }));\n\n  if (hasAuthenticatorSecondFactorDevice) {\n    deviceChoices.push({\n      title: 'Authenticator',\n      value: authenticatorChoiceSentinel,\n    });\n  }\n\n  deviceChoices.push({\n    title: 'Cancel',\n    value: cancelChoiceSentinel,\n  });\n\n  const question = {\n    message: 'Select a second-factor device:',\n    choices: deviceChoices,\n  };\n\n  const selectedValue = await selectAsync(question);\n  if (selectedValue === cancelChoiceSentinel) {\n    return null;\n  } else if (selectedValue === authenticatorChoiceSentinel) {\n    return await _promptForOTPAsync('cancel');\n  }\n\n  const device = smsNonPrimarySecondFactorDevices[selectedValue];\n\n  const apiAnonymous = ApiV2.clientForUser();\n  await apiAnonymous.postAsync('auth/send-sms-otp', {\n    username,\n    password,\n    secondFactorDeviceID: device.id,\n  });\n\n  return await _promptForOTPAsync('cancel');\n}\n\n/**\n * Handle the special case error indicating that a second-factor is required for\n * authentication.\n *\n * There are three cases we need to handle:\n * 1. User's primary second-factor device was SMS, OTP was automatically sent by the server to that\n *    device already. In this case we should just prompt for the SMS OTP (or backup code), which the\n *    user should be receiving shortly. We should give the user a way to cancel and the prompt and move\n *    to case 3 below.\n * 2. User's primary second-factor device is authenticator. In this case we should prompt for authenticator\n *    OTP (or backup code) and also give the user a way to cancel and move to case 3 below.\n * 3. User doesn't have a primary device or doesn't have access to their primary device. In this case\n *    we should show a picker of the SMS devices that they can have an OTP code sent to, and when\n *    the user picks one we show a prompt for the sent OTP.\n */\nexport async function _retryUsernamePasswordAuthWithOTPAsync(\n  username: string,\n  password: string,\n  metadata: {\n    secondFactorDevices?: SecondFactorDevice[];\n    smsAutomaticallySent?: boolean;\n  }\n): Promise<User> {\n  const { secondFactorDevices, smsAutomaticallySent } = metadata;\n  invariant(\n    secondFactorDevices !== undefined && smsAutomaticallySent !== undefined,\n    `Malformed OTP error metadata: ${metadata}`\n  );\n\n  const primaryDevice = secondFactorDevices.find(device => device.is_primary);\n  let otp: string | null = null;\n\n  if (smsAutomaticallySent) {\n    invariant(\n      primaryDevice,\n      'OTP should only automatically be sent when there is a primary device'\n    );\n    log.nested(\n      `One-time password was sent to the phone number ending in ${primaryDevice.sms_phone_number}.`\n    );\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  if (primaryDevice?.method === UserSecondFactorDeviceMethod.AUTHENTICATOR) {\n    log.nested('One-time password from authenticator required.');\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  // user bailed on case 1 or 2, wants to move to case 3\n  if (!otp) {\n    otp = await _promptForBackupOTPAsync(username, password, secondFactorDevices);\n  }\n\n  if (!otp) {\n    throw new CommandError('LOGIN_CANCELLED', 'Cancelled login');\n  }\n\n  return await UserManager.loginAsync('user-pass', {\n    username,\n    password,\n    otp,\n  });\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string,\n  otp?: string\n): Promise<User> {\n  const questions: Question[] = [];\n  if (!username) {\n    questions.push({\n      type: 'input',\n      name: 'username',\n      message: 'Username/Email Address:',\n      validate(val: string) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      validate(val: string) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    });\n  }\n\n  const answers = await prompt(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n    otp: otp || answers.otp,\n  };\n\n  let user: User;\n  try {\n    user = await UserManager.loginAsync('user-pass', data);\n  } catch (e) {\n    if (e instanceof ApiV2Error && e.code === 'ONE_TIME_PASSWORD_REQUIRED') {\n      user = await _retryUsernamePasswordAuthWithOTPAsync(\n        data.username,\n        data.password,\n        e.metadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  if (user) {\n    log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport async function register(): Promise<User> {\n  log(\n    `\nThanks for signing up for Expo!\nJust a few questions:\n`\n  );\n\n  const questions: Question[] = [\n    {\n      type: 'input',\n      name: 'email',\n      message: 'E-mail:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'input',\n      name: 'username',\n      message: 'Username:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return false;\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      filter: val => val.trim(),\n      validate(val) {\n        if (val.trim() === '') {\n          return 'Please create a password';\n        }\n        return true;\n      },\n    },\n    {\n      type: 'password',\n      name: 'passwordRepeat',\n      message: 'Confirm Password:',\n      validate(val, answers) {\n        if (val.trim() === '') {\n          return false;\n        }\n        if (!answers || !answers.password || val.trim() !== answers.password.trim()) {\n          return `Passwords don't match!`;\n        }\n        return true;\n      },\n    },\n  ];\n  const answers = await prompt(questions);\n  const registeredUser = await UserManager.registerAsync(answers as RegistrationData);\n  log('\\nThanks for signing up!');\n  return registeredUser;\n}\n"],"file":"accounts.js"}