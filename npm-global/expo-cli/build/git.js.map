{"version":3,"sources":["../src/git.ts"],"names":["gitStatusAsync","showUntracked","stdout","gitDiffAsync","stdio","gitAddAsync","file","options","intentToAdd","gitDoesRepoExistAsync","err","gitRootDirectory","trim"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAMA,eAAeA,cAAf,CAA8B;AAAEC,EAAAA;AAAF,IAAsC,EAApE,EAAyF;AACvF,SAAO,CAAC,MAAM,2BAAW,KAAX,EAAkB,CAAC,QAAD,EAAW,IAAX,EAAiBA,aAAa,GAAG,OAAH,GAAa,MAA3C,CAAlB,CAAP,EAA8EC,MAArF;AACD;;AAED,eAAeC,YAAf,GAA6C;AAC3C,QAAM,2BAAW,KAAX,EAAkB,CAAC,YAAD,EAAe,MAAf,CAAlB,EAA0C;AAAEC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,SAAtB;AAAT,GAA1C,CAAN;AACD;;AAED,eAAeC,WAAf,CAA2BC,IAA3B,EAAyCC,OAAzC,EAA6F;AAC3F,MAAIA,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEC,WAAb,EAA0B;AACxB,UAAM,2BAAW,KAAX,EAAkB,CAAC,KAAD,EAAQ,iBAAR,EAA2BF,IAA3B,CAAlB,CAAN;AACD,GAFD,MAEO;AACL,UAAM,2BAAW,KAAX,EAAkB,CAAC,KAAD,EAAQA,IAAR,CAAlB,CAAN;AACD;AACF;;AAED,eAAeG,qBAAf,GAAyD;AACvD,MAAI;AACF,UAAM,2BAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,WAAd,CAAlB,CAAN;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF;;AAED,eAAeC,gBAAf,GAAmD;AACjD,SAAO,CAAC,MAAM,2BAAW,KAAX,EAAkB,CAAC,WAAD,EAAc,iBAAd,CAAlB,CAAP,EAA4DT,MAA5D,CAAmEU,IAAnE,EAAP;AACD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\n\ninterface GitStatusOptions {\n  showUntracked?: boolean;\n}\n\nasync function gitStatusAsync({ showUntracked }: GitStatusOptions = {}): Promise<string> {\n  return (await spawnAsync('git', ['status', '-s', showUntracked ? '-uall' : '-uno'])).stdout;\n}\n\nasync function gitDiffAsync(): Promise<void> {\n  await spawnAsync('git', ['--no-pager', 'diff'], { stdio: ['ignore', 'inherit', 'inherit'] });\n}\n\nasync function gitAddAsync(file: string, options?: { intentToAdd?: boolean }): Promise<void> {\n  if (options?.intentToAdd) {\n    await spawnAsync('git', ['add', '--intent-to-add', file]);\n  } else {\n    await spawnAsync('git', ['add', file]);\n  }\n}\n\nasync function gitDoesRepoExistAsync(): Promise<boolean> {\n  try {\n    await spawnAsync('git', ['rev-parse', '--git-dir']);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function gitRootDirectory(): Promise<string> {\n  return (await spawnAsync('git', ['rev-parse', '--show-toplevel'])).stdout.trim();\n}\n\nexport { gitStatusAsync, gitDiffAsync, gitAddAsync, gitDoesRepoExistAsync, gitRootDirectory };\n"],"file":"git.js"}