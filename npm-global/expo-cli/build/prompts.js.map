{"version":3,"sources":["../src/prompts.ts"],"names":["prompt","questions","nonInteractiveHelp","options","Array","isArray","program","nonInteractive","length","message","question","questionMessage","undefined","trim","replace","CommandError","onCancel","AbortCommandError","separator","title","disable","value","autoCompleteAsync","limit","suggest","input","choices","regex","RegExp","filter","choice","test","name","type","selectAsync","confirmAsync","initial","toggleConfirmAsync","active","inactive"],"mappings":"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","sourcesContent":["import program from 'commander';\nimport prompts, { Choice, Options, PromptType, PromptObject as Question } from 'prompts';\n\nimport CommandError, { AbortCommandError } from './CommandError';\n\nexport { PromptType, Question };\n\ntype PromptOptions = { nonInteractiveHelp?: string } & Options;\n\nexport default function prompt(\n  questions: Question | Question[],\n  { nonInteractiveHelp, ...options }: PromptOptions = {}\n) {\n  questions = Array.isArray(questions) ? questions : [questions];\n  if (program.nonInteractive && questions.length !== 0) {\n    let message = `Input is required, but Expo CLI is in non-interactive mode.\\n`;\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      const question = questions[0];\n      const questionMessage =\n        typeof question.message === 'function'\n          ? question.message(undefined, {}, question)\n          : question.message;\n\n      message += `Required input:\\n${(questionMessage || '').trim().replace(/^/gm, '> ')}`;\n    }\n    throw new CommandError('NON_INTERACTIVE', message);\n  }\n  return prompts(questions, {\n    onCancel() {\n      throw new AbortCommandError();\n    },\n    ...options,\n  });\n}\n\n// todo: replace this workaround, its still selectable by the cursor\n// see: https://github.com/terkelg/prompts/issues/254\nprompt.separator = (title: string): Choice => ({ title, disable: true, value: undefined });\n\nexport type NamelessQuestion = Omit<Question<'value'>, 'name' | 'type'>;\n\n/**\n * Create an auto complete list that can be searched and cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function autoCompleteAsync(\n  questions: NamelessQuestion | NamelessQuestion[],\n  options?: PromptOptions\n): Promise<string> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      suggest(input: any, choices: any) {\n        const regex = new RegExp(input, 'i');\n        return choices.filter((choice: any) => regex.test(choice.title));\n      },\n      ...questions,\n      name: 'value',\n      type: 'autocomplete',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a selection list that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function selectAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<any> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      ...questions,\n      name: 'value',\n      type: 'select',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a standard yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function confirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      initial: true,\n      ...questions,\n      name: 'value',\n      type: 'confirm',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a more dynamic yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function toggleConfirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      active: 'yes',\n      inactive: 'no',\n      ...questions,\n      name: 'value',\n      type: 'toggle',\n    },\n    options\n  );\n  return value ?? null;\n}\n"],"file":"prompts.js"}