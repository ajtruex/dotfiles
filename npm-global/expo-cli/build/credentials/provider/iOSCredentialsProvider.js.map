{"version":3,"sources":["../../../src/credentials/provider/iOSCredentialsProvider.ts"],"names":["iOSCredentialsProvider","constructor","projectDir","app","options","Context","initAsync","ctx","init","nonInteractive","hasRemoteAsync","distCert","ios","getDistCert","provisioningProfile","getProvisioningProfile","hasLocalAsync","credentialsJsonReader","fileExistsAsync","rawCredentialsJson","readRawAsync","err","log","error","isLocalSyncedAsync","remote","local","Promise","all","fetchRemoteAsync","getLocalAsync","r","l","distributionCertificate","certP12","certPassword","_","getCredentialsAsync","src","CredentialsSource","LOCAL","REMOTE","getRemoteAsync","readIosCredentialsAsync","skipCredentialsCheck","SetupIosBuildCredentials","Error"],"mappings":"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","sourcesContent":["import { CredentialsSource } from '../../easJson';\nimport log from '../../log';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context } from '../context';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport { SetupIosBuildCredentials } from '../views/SetupIosBuildCredentials';\nimport { CredentialsProvider } from './provider';\n\nexport interface iOSCredentials {\n  provisioningProfile: string;\n  distributionCertificate: {\n    certP12: string;\n    certPassword: string;\n  };\n}\n\ninterface PartialiOSCredentials {\n  provisioningProfile?: string;\n  distributionCertificate?: {\n    certP12?: string;\n    certPassword?: string;\n  };\n}\n\ninterface Options {\n  nonInteractive: boolean;\n  skipCredentialsCheck: boolean;\n}\n\nexport default class iOSCredentialsProvider implements CredentialsProvider {\n  public readonly platform = 'ios';\n  private readonly ctx = new Context();\n  private credentials?: iOSCredentials;\n\n  constructor(private projectDir: string, private app: AppLookupParams, private options: Options) {}\n\n  public async initAsync() {\n    await this.ctx.init(this.projectDir, {\n      nonInteractive: this.options.nonInteractive,\n    });\n  }\n\n  public async hasRemoteAsync(): Promise<boolean> {\n    const distCert = await this.ctx.ios.getDistCert(this.app);\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);\n    return !!(distCert || provisioningProfile);\n  }\n\n  public async hasLocalAsync(): Promise<boolean> {\n    if (!(await credentialsJsonReader.fileExistsAsync(this.projectDir))) {\n      return false;\n    }\n    try {\n      const rawCredentialsJson = await credentialsJsonReader.readRawAsync(this.projectDir);\n      return !!rawCredentialsJson?.ios;\n    } catch (err) {\n      log.error(err); // malformed json\n      return false;\n    }\n  }\n\n  public async isLocalSyncedAsync(): Promise<boolean> {\n    try {\n      const [remote, local] = await Promise.all([this.fetchRemoteAsync(), this.getLocalAsync()]);\n      const r = remote;\n      const l = local as iOSCredentials; // ts definion can't resolve return type correctly\n      return !!(\n        r.provisioningProfile === l.provisioningProfile &&\n        r.distributionCertificate?.certP12 === l.distributionCertificate.certP12 &&\n        r.distributionCertificate?.certPassword === l.distributionCertificate.certPassword\n      );\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async getCredentialsAsync(\n    src: CredentialsSource.LOCAL | CredentialsSource.REMOTE\n  ): Promise<iOSCredentials> {\n    switch (src) {\n      case CredentialsSource.LOCAL:\n        return await this.getLocalAsync();\n      case CredentialsSource.REMOTE:\n        return await this.getRemoteAsync();\n    }\n  }\n\n  private async getLocalAsync(): Promise<iOSCredentials> {\n    return await credentialsJsonReader.readIosCredentialsAsync(this.projectDir);\n  }\n  private async getRemoteAsync(): Promise<iOSCredentials> {\n    if (this.options.skipCredentialsCheck) {\n      log('Skipping credentials check');\n    } else {\n      await runCredentialsManager(this.ctx, new SetupIosBuildCredentials(this.app));\n    }\n    const distCert = await this.ctx.ios.getDistCert(this.app);\n    if (!distCert?.certP12 || !distCert?.certPassword) {\n      if (this.options.skipCredentialsCheck) {\n        throw new Error(\n          'Distribution certificate is missing and credentials check was skipped. Run without --skip-credentials-check to set it up.'\n        );\n      } else {\n        throw new Error('Distribution certificate is missing');\n      }\n    }\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);\n    if (!provisioningProfile?.provisioningProfile) {\n      if (this.options.skipCredentialsCheck) {\n        throw new Error(\n          'Provisioning profile is missing and credentials check was skipped. Run without --skip-credentials-check to set it up.'\n        );\n      } else {\n        throw new Error('Provisioning profile is missing');\n      }\n    }\n    return {\n      provisioningProfile: provisioningProfile.provisioningProfile,\n      distributionCertificate: {\n        certP12: distCert.certP12,\n        certPassword: distCert.certPassword,\n      },\n    };\n  }\n\n  private async fetchRemoteAsync(): Promise<PartialiOSCredentials> {\n    const distCert = await this.ctx.ios.getDistCert(this.app);\n    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);\n    return {\n      provisioningProfile: provisioningProfile?.provisioningProfile,\n      distributionCertificate: {\n        certP12: distCert?.certP12,\n        certPassword: distCert?.certPassword,\n      },\n    };\n  }\n}\n"],"file":"iOSCredentialsProvider.js"}