{"version":3,"sources":["../../../src/credentials/provider/AndroidCredentialsProvider.ts"],"names":["AndroidCredentialsProvider","constructor","projectDir","app","options","Context","projectFullName","projectName","accountName","initAsync","ctx","init","nonInteractive","hasRemoteAsync","keystore","android","fetchKeystore","isKeystoreConfigurationValid","hasLocalAsync","credentialsJsonReader","fileExistsAsync","rawCredentialsJson","readRawAsync","err","log","error","isLocalSyncedAsync","remote","local","Promise","all","readAndroidCredentialsAsync","r","l","keystorePassword","keyAlias","keyPassword","_","getCredentialsAsync","src","credentials","CredentialsSource","LOCAL","getLocalAsync","REMOTE","getRemoteAsync","skipCredentialsCheck","SetupAndroidKeystore","allowMissingKeystore","skipKeystoreValidation","Error"],"mappings":"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","sourcesContent":["import { CredentialsSource } from '../../easJson';\nimport log from '../../log';\nimport { Context } from '../context';\nimport { Keystore } from '../credentials';\nimport * as credentialsJsonReader from '../credentialsJson/read';\nimport { runCredentialsManager } from '../route';\nimport validateKeystoreAsync from '../utils/validateKeystore';\nimport { SetupAndroidKeystore } from '../views/SetupAndroidKeystore';\nimport { CredentialsProvider } from './provider';\n\nexport interface AndroidCredentials {\n  keystore: Keystore;\n}\n\ninterface AppLookupParams {\n  projectName: string;\n  accountName: string;\n}\n\ninterface Options {\n  nonInteractive: boolean;\n  skipCredentialsCheck: boolean;\n}\n\nexport default class AndroidCredentialsProvider implements CredentialsProvider {\n  public readonly platform = 'android';\n  private readonly ctx = new Context();\n\n  constructor(private projectDir: string, private app: AppLookupParams, private options: Options) {}\n\n  private get projectFullName(): string {\n    const { projectName, accountName } = this.app;\n    return `@${accountName}/${projectName}`;\n  }\n\n  public async initAsync() {\n    await this.ctx.init(this.projectDir, {\n      nonInteractive: this.options.nonInteractive,\n    });\n  }\n\n  public async hasRemoteAsync(): Promise<boolean> {\n    const keystore = await this.ctx.android.fetchKeystore(this.projectFullName);\n    return this.isKeystoreConfigurationValid(keystore);\n  }\n\n  public async hasLocalAsync(): Promise<boolean> {\n    if (!(await credentialsJsonReader.fileExistsAsync(this.projectDir))) {\n      return false;\n    }\n    try {\n      const rawCredentialsJson = await credentialsJsonReader.readRawAsync(this.projectDir);\n      return !!rawCredentialsJson?.android;\n    } catch (err) {\n      log.error(err); // malformed json\n      return false;\n    }\n  }\n\n  public async isLocalSyncedAsync(): Promise<boolean> {\n    try {\n      const [remote, local] = await Promise.all([\n        this.ctx.android.fetchKeystore(this.projectFullName),\n        await credentialsJsonReader.readAndroidCredentialsAsync(this.projectDir),\n      ]);\n      const r = remote!;\n      const l = local?.keystore!;\n      return !!(\n        r.keystore === l.keystore &&\n        r.keystorePassword === l.keystorePassword &&\n        r.keyAlias === l.keyAlias &&\n        r.keyPassword === l.keyPassword &&\n        this.isKeystoreConfigurationValid(r)\n      );\n    } catch (_) {\n      return false;\n    }\n  }\n\n  public async getCredentialsAsync(\n    src: CredentialsSource.LOCAL | CredentialsSource.REMOTE\n  ): Promise<AndroidCredentials> {\n    let credentials: AndroidCredentials;\n\n    switch (src) {\n      case CredentialsSource.LOCAL:\n        credentials = await this.getLocalAsync();\n        break;\n      case CredentialsSource.REMOTE:\n        credentials = await this.getRemoteAsync();\n        break;\n    }\n\n    if (!this.options.skipCredentialsCheck) {\n      await validateKeystoreAsync(credentials.keystore);\n    }\n\n    return credentials;\n  }\n\n  private async getRemoteAsync(): Promise<AndroidCredentials> {\n    await runCredentialsManager(\n      this.ctx,\n      new SetupAndroidKeystore(this.projectFullName, {\n        allowMissingKeystore: false,\n        skipKeystoreValidation: false,\n      })\n    );\n    const keystore = await this.ctx.android.fetchKeystore(this.projectFullName);\n    if (!this.isKeystoreConfigurationValid(keystore)) {\n      throw new Error('Unable to set up credentials');\n    }\n    return { keystore };\n  }\n\n  private async getLocalAsync(): Promise<AndroidCredentials> {\n    const credentials = await credentialsJsonReader.readAndroidCredentialsAsync(this.projectDir);\n    if (!this.isKeystoreConfigurationValid(credentials.keystore)) {\n      throw new Error('Keystore configuration is missing required fields in credentials.json');\n    }\n    return credentials;\n  }\n\n  private isKeystoreConfigurationValid(keystore?: Keystore | null): keystore is Keystore {\n    return !!(\n      keystore &&\n      keystore.keystore &&\n      keystore.keystorePassword &&\n      keystore.keyPassword &&\n      keystore.keyAlias\n    );\n  }\n}\n"],"file":"AndroidCredentialsProvider.js"}