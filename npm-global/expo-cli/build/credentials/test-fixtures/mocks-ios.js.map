{"version":3,"sources":["../../../src/credentials/test-fixtures/mocks-ios.ts"],"names":["today","Date","tomorrow","getTime","testAppleTeam","id","testProvisioningProfile","provisioningProfileId","provisioningProfile","testProvisioningProfileBase64","teamId","testProvisioningProfiles","testProvisioningProfileFromApple","name","status","expires","distributionMethod","certificates","testProvisioningProfilesFromApple","testDistCert","certP12","certPassword","distCertSerialNumber","testIosDistCredential","type","testIosDistCredentials","testDistCertFromApple","created","ownerType","ownerName","ownerId","serialNumber","testDistCertsFromApple","testPushKey","apnsKeyP8","apnsKeyId","testIosPushCredential","testIosPushCredentials","testPushKeyFromApple","testPushKeysFromApple","testLegacyPushCert","pushId","pushP12","pushPassword","testAppCredential","experienceName","testExperienceName","bundleIdentifier","testBundleIdentifier","distCredentialsId","pushCredentialsId","credentials","testAllCredentialsForApp","pushCredentials","distCredentials","testAppCredentials","testAllCredentials","userCredentials","appCredentials","getApiV2WrapperMock","override","getUnexpectedCallMock","jest","fn","Error","getAllCredentialsApi","getAllCredentialsForAppApi","getUserCredentialsByIdApi","createDistCertApi","updateDistCertApi","deleteDistCertApi","useDistCertApi","createPushKeyApi","updatePushKeyApi","deletePushKeyApi","usePushKeyApi","deletePushCertApi","updateProvisioningProfileApi","deleteProvisioningProfileApi","getIosApiMock","getDistCert","createDistCert","useDistCert","getPushKey","createPushKey","usePushKey","updateProvisioningProfile","getAppCredentials","getProvisioningProfile","getAllCredentials","appleCtxMock","appleId","appleIdPassword","team","fastlaneSession"],"mappings":"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","sourcesContent":["import merge from 'lodash/merge';\n\nimport {\n  DistCert,\n  DistCertInfo,\n  ProvisioningProfile,\n  ProvisioningProfileInfo,\n  PushKey,\n  PushKeyInfo,\n  Team,\n} from '../../appleApi';\nimport { IosDistCredentials, IosPushCredentials } from '../credentials';\nimport { testProvisioningProfileBase64 } from './mock-base64-data';\nimport { testBundleIdentifier, testExperienceName } from './mocks-constants';\n\nconst today = new Date();\nconst tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\nexport const testAppleTeam: Team = {\n  id: 'test-team-id',\n};\nexport const testProvisioningProfile: ProvisioningProfile = {\n  provisioningProfileId: 'test-id',\n  provisioningProfile: testProvisioningProfileBase64,\n  teamId: 'id',\n};\nexport const testProvisioningProfiles = [testProvisioningProfile];\nexport const testProvisioningProfileFromApple: ProvisioningProfileInfo = {\n  name: 'test-name',\n  status: 'Active',\n  expires: tomorrow.getTime(),\n  distributionMethod: 'test',\n  certificates: [],\n  provisioningProfileId: testProvisioningProfile.provisioningProfileId,\n  provisioningProfile: testProvisioningProfile.provisioningProfile,\n  teamId: 'id',\n};\nexport const testProvisioningProfilesFromApple = [testProvisioningProfileFromApple];\n\nexport const testDistCert: DistCert = {\n  certP12: 'Y2VydHAxMg==',\n  certPassword: 'test-password',\n  distCertSerialNumber: 'test-serial',\n  teamId: 'test-team-id',\n};\nexport const testIosDistCredential: IosDistCredentials = {\n  id: 1,\n  type: 'dist-cert',\n  ...testDistCert,\n};\nexport const testIosDistCredentials = [testIosDistCredential];\nexport const testDistCertFromApple: DistCertInfo = {\n  id: 'test-id',\n  name: 'test-name',\n  status: 'Active',\n  created: today.getTime(),\n  expires: tomorrow.getTime(),\n  ownerType: 'test-owner-type',\n  ownerName: 'test-owner',\n  ownerId: 'test-id',\n  serialNumber: testIosDistCredential.distCertSerialNumber as string,\n};\nexport const testDistCertsFromApple = [testDistCertFromApple];\n\nexport const testPushKey: PushKey = {\n  apnsKeyP8: 'test-p8',\n  apnsKeyId: 'test-key-id',\n  teamId: 'test-team-id',\n};\n\nexport const testIosPushCredential: IosPushCredentials = {\n  id: 2,\n  type: 'push-key',\n  ...testPushKey,\n};\nexport const testIosPushCredentials = [testIosPushCredential];\nexport const testPushKeyFromApple: PushKeyInfo = {\n  id: testIosPushCredential.apnsKeyId,\n  name: 'test-name',\n};\nexport const testPushKeysFromApple = [testPushKeyFromApple];\nexport const testLegacyPushCert = {\n  pushId: 'test-push-id',\n  pushP12: 'test-push-p12',\n  pushPassword: 'test-push-password',\n};\nexport const testAppCredential = {\n  experienceName: testExperienceName,\n  bundleIdentifier: testBundleIdentifier,\n  distCredentialsId: testIosDistCredential.id,\n  pushCredentialsId: testIosPushCredential.id,\n  credentials: {\n    ...testProvisioningProfile,\n  },\n};\nexport const testAllCredentialsForApp = {\n  ...testAppCredential,\n  pushCredentials: testPushKey,\n  distCredentials: testDistCert,\n};\nexport const testAppCredentials = [testAppCredential];\nexport const testAllCredentials = {\n  userCredentials: [...testIosDistCredentials, ...testIosPushCredentials],\n  appCredentials: testAppCredentials,\n};\n\nexport function getApiV2WrapperMock(override: object = {}) {\n  // by default all method throw exceptions to make sure that we only call what is expected\n  const getUnexpectedCallMock = () =>\n    jest.fn(() => {\n      throw new Error('unexpected call');\n    });\n  return merge(\n    {\n      getAllCredentialsApi: getUnexpectedCallMock(),\n      getAllCredentialsForAppApi: getUnexpectedCallMock(),\n      getUserCredentialsByIdApi: getUnexpectedCallMock(),\n      createDistCertApi: getUnexpectedCallMock(),\n      updateDistCertApi: getUnexpectedCallMock(),\n      deleteDistCertApi: getUnexpectedCallMock(),\n      useDistCertApi: getUnexpectedCallMock(),\n      createPushKeyApi: getUnexpectedCallMock(),\n      updatePushKeyApi: getUnexpectedCallMock(),\n      deletePushKeyApi: getUnexpectedCallMock(),\n      usePushKeyApi: getUnexpectedCallMock(),\n      deletePushCertApi: getUnexpectedCallMock(),\n      updateProvisioningProfileApi: getUnexpectedCallMock(),\n      deleteProvisioningProfileApi: getUnexpectedCallMock(),\n    },\n    override\n  );\n}\n\nexport function getIosApiMock(override: object = {}) {\n  return merge(\n    {\n      getDistCert: jest.fn(() => testDistCert),\n      createDistCert: jest.fn(() => testIosDistCredential),\n      useDistCert: jest.fn(),\n      getPushKey: jest.fn(() => testPushKey),\n      createPushKey: jest.fn(() => testIosPushCredential),\n      usePushKey: jest.fn(),\n      updateProvisioningProfile: jest.fn(),\n      getAppCredentials: jest.fn(() => testAppCredential),\n      getProvisioningProfile: jest.fn(() => testProvisioningProfile),\n      getAllCredentials: jest.fn(() => testAllCredentials),\n    },\n    override\n  );\n}\n\nexport const appleCtxMock = {\n  appleId: 'test-id',\n  appleIdPassword: 'test-password',\n  team: { id: 'test-team-id' },\n  fastlaneSession: 'test-fastlane-session',\n};\n"],"file":"mocks-ios.js"}