{"version":3,"sources":["../../../src/credentials/api/IosApi.ts"],"names":["getAppLookupParams","experienceName","bundleIdentifier","matchedExperienceName","match","length","accountName","projectName","IosApi","constructor","api","client","ApiClient","getAllCredentials","isPrefetched","credentials","getAllCredentialsApi","appCredentials","cred","userCredentials","String","id","Object","values","getDistCert","appLookupParams","ensureAppCredentials","appCredentialsIndex","getAppCredentialsCacheIndex","distCredentialsId","distCert","createDistCert","createDistCertApi","refetchUserCredentials","type","updateDistCert","updateDistCertApi","deleteDistCert","deleteDistCertApi","removeUserCredentialFromCache","useDistCert","userCredentialsId","useDistCertApi","refetchAppCredentials","createPushKey","createPushKeyApi","pushKey","updatePushKey","updatePushKeyApi","deletePushKey","deletePushKeyApi","getPushKey","pushCredentialsId","usePushKey","usePushKeyApi","getPushCert","getAppCredentials","pushId","pushP12","pushPassword","deletePushCert","deletePushCertApi","getProvisioningProfile","provisioningProfile","updateProvisioningProfile","updateProvisioningProfileApi","deleteProvisioningProfile","deleteProvisioningProfileApi","projectFullName","val","key","getUserCredentialsByIdApi","app","data","getAllCredentialsForAppApi","pushCredentials","distCredentials"],"mappings":"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","sourcesContent":["import { ApiV2 } from '@expo/xdl';\nimport invariant from 'invariant';\nimport forEach from 'lodash/forEach';\nimport keyBy from 'lodash/keyBy';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\n\nimport * as appleApi from '../../appleApi';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\nimport ApiClient from './IosApiV2Wrapper';\n\ntype CredentialFields = {\n  credentials: { [key: string]: any };\n};\n\nexport interface AppLookupParams {\n  accountName: string;\n  projectName: string;\n  bundleIdentifier: string;\n}\n\nexport function getAppLookupParams(experienceName: string, bundleIdentifier: string) {\n  const matchedExperienceName = experienceName.match(/@(.+)\\/(.+)/);\n  invariant(matchedExperienceName && matchedExperienceName.length >= 3, 'invalid experience name');\n  return {\n    accountName: matchedExperienceName[1],\n    projectName: matchedExperienceName[2],\n    bundleIdentifier,\n  };\n}\n\n// appCredentials are identified by `${projectFullName} ${bundleIdentifier}` (see getAppCredentialsCacheIndex method)\n// userCredentials are identified by id (string or numeric depending on API)\n//\n// Expected behaviour of cache (internals)\n//\n// - when isPrefetched[accountName] true assume everything is synced for that account\n// - when credentials[accountName].appCredentials[experienceNameBundleIdentifier] is truthy assume that user and app credentials for that app are synced\n// - when accessing user or app credentials identified by AppLookupParams fetch all credentials for that app (user and app credentials)\n// - when updating userCredentials refetch only userCredentials\n// - when deleting userCredentials modify prefetched appCredentials without calling api\n// - when updating provisioningProfile refetch all credentials for that app (user and app crednetials)\n// - when deleting provisioningProfile modify appCredentials in cache\n// - when deleting pushCert refetch all credentials for app (app + user)\n//\n//\ninterface CredentialsCache {\n  [accountName: string]: {\n    appCredentials: {\n      [experienceNameBundleIdentifier: string]: IosAppCredentials;\n    };\n    userCredentials: {\n      [id: string]: IosDistCredentials | IosPushCredentials;\n    };\n  };\n}\n\nexport default class IosApi {\n  client: ApiClient;\n  credentials: CredentialsCache = {};\n  isPrefetched: { [accountName: string]: boolean } = {};\n\n  constructor(api: ApiV2) {\n    this.client = new ApiClient(api);\n  }\n\n  public async getAllCredentials(accountName: string): Promise<IosCredentials> {\n    if (!this.isPrefetched[accountName]) {\n      const credentials = await this.client.getAllCredentialsApi(accountName);\n      this.credentials[accountName] = {\n        appCredentials: keyBy(\n          credentials.appCredentials,\n          cred => `${cred.experienceName} ${cred.bundleIdentifier}`\n        ),\n        userCredentials: keyBy(credentials.userCredentials, cred => String(cred.id)),\n      };\n      this.isPrefetched[accountName] = true;\n    }\n    return {\n      appCredentials: Object.values(this.credentials[accountName]?.appCredentials ?? {}),\n      userCredentials: Object.values(this.credentials[accountName]?.userCredentials ?? {}),\n    };\n  }\n\n  public async getDistCert(appLookupParams: AppLookupParams): Promise<IosDistCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.distCredentialsId) {\n      return null;\n    }\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.distCredentialsId\n    ] as IosDistCredentials | null;\n    return distCert ?? null;\n  }\n\n  public async createDistCert(\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    const id = await this.client.createDistCertApi(accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials?.[String(id)];\n    invariant(id && distCert, 'distribution certificate does not exists');\n    invariant(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async updateDistCert(\n    id: number,\n    accountName: string,\n    credentials: appleApi.DistCert\n  ): Promise<IosDistCredentials> {\n    await this.client.updateDistCertApi(id, accountName, credentials);\n\n    // refetching because www might add some fields (e.g. certSerialNumber)\n    await this.refetchUserCredentials(id, accountName);\n\n    const distCert = this.credentials[accountName]?.userCredentials[String(id)];\n    invariant(distCert, 'distribution certificate does not exists');\n    invariant(distCert.type === 'dist-cert', 'wrong type of user credential');\n    return distCert as IosDistCredentials;\n  }\n\n  public async deleteDistCert(id: number, accountName: string): Promise<void> {\n    await this.client.deleteDistCertApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async useDistCert(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.useDistCertApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async createPushKey(\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    const id = await this.client.createPushKeyApi(accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    invariant(id && pushKey, 'push key does not exists');\n    invariant(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async updatePushKey(\n    id: number,\n    accountName: string,\n    credentials: appleApi.PushKey\n  ): Promise<IosPushCredentials> {\n    await this.client.updatePushKeyApi(id, accountName, credentials);\n\n    await this.refetchUserCredentials(id, accountName);\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[String(id)];\n    invariant(id && pushKey, 'push key does not exists');\n    invariant(pushKey.type === 'push-key', 'wrong type of user credentials');\n    return pushKey;\n  }\n\n  public async deletePushKey(id: number, accountName: string) {\n    await this.client.deletePushKeyApi(id, accountName);\n    await this.removeUserCredentialFromCache(id, accountName);\n  }\n\n  public async getPushKey(appLookupParams: AppLookupParams): Promise<IosPushCredentials | null> {\n    await this.ensureAppCredentials(appLookupParams);\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    const appCredentials = this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (!appCredentials || !appCredentials.pushCredentialsId) {\n      return null;\n    }\n\n    const pushKey = this.credentials[accountName]?.userCredentials?.[\n      appCredentials.pushCredentialsId\n    ] as IosPushCredentials | null;\n    return pushKey ?? null;\n  }\n\n  public async usePushKey(\n    appLookupParams: AppLookupParams,\n    userCredentialsId: number\n  ): Promise<void> {\n    await this.client.usePushKeyApi(appLookupParams, userCredentialsId);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getPushCert(\n    appLookupParams: AppLookupParams\n  ): Promise<{ pushId: string; pushP12: string; pushPassword: string } | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const pushId = appCredentials?.credentials?.pushId;\n    const pushP12 = appCredentials?.credentials?.pushP12;\n    const pushPassword = appCredentials?.credentials?.pushPassword;\n    if (!pushId || !pushP12 || !pushPassword) {\n      return null;\n    }\n    return { pushId, pushP12, pushPassword };\n  }\n\n  public async deletePushCert(appLookupParams: AppLookupParams): Promise<void> {\n    await this.client.deletePushCertApi(appLookupParams);\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  public async getAppCredentials(appLookupParams: AppLookupParams): Promise<IosAppCredentials> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.ensureAppCredentials(appLookupParams);\n    return this.credentials[accountName]?.appCredentials?.[appCredentialsIndex];\n  }\n\n  public async getProvisioningProfile(\n    appLookupParams: AppLookupParams\n  ): Promise<appleApi.ProvisioningProfile | null> {\n    const appCredentials = await this.getAppCredentials(appLookupParams);\n    const provisioningProfile = appCredentials?.credentials?.provisioningProfile;\n    if (!provisioningProfile) {\n      return null;\n    }\n    return pick(appCredentials.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async updateProvisioningProfile(\n    appLookupParams: AppLookupParams,\n    provisioningProfile: appleApi.ProvisioningProfile\n  ): Promise<appleApi.ProvisioningProfile> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.updateProvisioningProfileApi(appLookupParams, provisioningProfile);\n    await this.refetchAppCredentials(appLookupParams);\n    return pick(this.credentials[accountName]?.appCredentials?.[appCredentialsIndex]?.credentials, [\n      'provisioningProfile',\n      'provisioningProfileId',\n      'teamId',\n      'teamName',\n    ]) as appleApi.ProvisioningProfile;\n  }\n\n  public async deleteProvisioningProfile(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    await this.client.deleteProvisioningProfileApi(appLookupParams);\n    const appCredentials = this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex];\n    if (appCredentials?.credentials) {\n      // teamId should still be there becaus it might be part of push cert definition\n      appCredentials.credentials = omit(appCredentials.credentials, [\n        'provisioningProfile',\n        'provisioningProfileId',\n      ]);\n    }\n  }\n\n  private getAppCredentialsCacheIndex(appLookupParams: AppLookupParams): string {\n    const { accountName, projectName, bundleIdentifier } = appLookupParams;\n    const projectFullName = `@${accountName}/${projectName}`;\n    return `${projectFullName} ${bundleIdentifier}`;\n  }\n\n  private removeUserCredentialFromCache(id: number, accountName: string): void {\n    if (this.credentials[accountName]?.userCredentials?.[String(id)]) {\n      delete this.credentials[accountName].userCredentials[String(id)];\n    }\n    const appCredentials = this.credentials[accountName]?.appCredentials;\n    forEach(appCredentials, (val, key) => {\n      if (val.distCredentialsId === id) {\n        delete appCredentials[key].distCredentialsId;\n      }\n      if (val.pushCredentialsId === id) {\n        delete appCredentials[key].pushCredentialsId;\n      }\n    });\n  }\n\n  // ensures that credentials are fetched from the server if they exists\n  // if there is no credentials on server for specific app this function should still succeed.\n  private async ensureAppCredentials(appLookupParams: AppLookupParams): Promise<void> {\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(appLookupParams);\n    const { accountName } = appLookupParams;\n\n    if (\n      this.isPrefetched[accountName] ||\n      this.credentials?.[accountName]?.appCredentials?.[appCredentialsIndex]\n    ) {\n      return;\n    }\n    await this.refetchAppCredentials(appLookupParams);\n  }\n\n  private async refetchUserCredentials(id: number, accountName: string): Promise<void> {\n    const userCredentials = await this.client.getUserCredentialsByIdApi(id, accountName);\n    if (!userCredentials || !userCredentials.id) {\n      return;\n    }\n    this.credentials[accountName] = {\n      ...this.credentials[accountName],\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        [String(id)]: userCredentials,\n      },\n    };\n  }\n\n  private async refetchAppCredentials(app: AppLookupParams): Promise<void> {\n    const { accountName } = app;\n    const appCredentialsIndex = this.getAppCredentialsCacheIndex(app);\n    const data = await this.client.getAllCredentialsForAppApi(app);\n    if (!data) {\n      return;\n    }\n    this.credentials[accountName] = {\n      appCredentials: {\n        ...this.credentials[accountName]?.appCredentials,\n        [appCredentialsIndex]: omit(data, [\n          'pushCredentials',\n          'distCredentials',\n        ]) as IosAppCredentials,\n      },\n      userCredentials: {\n        ...this.credentials[accountName]?.userCredentials,\n        ...(data.pushCredentialsId\n          ? {\n              [String(data.pushCredentialsId)]: {\n                ...data.pushCredentials,\n                id: data.pushCredentialsId,\n                type: 'push-key',\n              },\n            }\n          : {}),\n        ...(data.distCredentialsId\n          ? {\n              [String(data.distCredentialsId)]: {\n                ...data.distCredentials,\n                id: data.distCredentialsId,\n                type: 'dist-cert',\n              },\n            }\n          : {}),\n      },\n    };\n  }\n}\n"],"file":"IosApi.js"}