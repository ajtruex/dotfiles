{"version":3,"sources":["../../../src/credentials/views/IosPushCredentials.ts"],"names":["APPLE_KEYS_TOO_MANY_GENERATED_ERROR","chalk","underline","CreateIosPush","constructor","accountName","create","ctx","newPushKey","provideOrGenerate","ios","createPushKey","open","pushKey","_getRequiredQuestions","requiredQuestions","pushKeySchema","hasAppleCtx","questions","required","filter","q","_ensurePushKey","partialKey","teamId","appleCtx","team","id","teamName","name","Error","nonInteractive","userProvided","isValid","validatePushKey","generatePushKey","RemoveIosPush","shouldRevoke","CommandError","selected","selectPushCredFromList","app","experienceName","bundleIdentifier","removePushCert","green","removeSpecific","deletePushCert","credentials","getAllCredentials","apps","getAppsUsingPushCred","appsList","map","appCred","join","confirm","message","deletePushKey","revoke","ensureAppleCtx","PushKeyManager","apnsKeyId","UpdateIosPush","allowLegacy","updateSpecific","updated","userCredentials","find","i","length","log","warn","updatePushKey","UseExistingPushNotification","usePushKey","projectName","CreateOrReusePushKey","assignPushKey","userCredentialsId","user","existingPushKeys","getValidPushKeys","autoselectedPushKey","formatPushKey","limit","Infinity","_createOrReuse","choices","value","question","type","pageSize","action","iosCredentials","pushKeys","cred","yellow","pushKeyManager","pushInfoFromApple","list","filterRevokedPushKeys","getValidityStatus","validPushKeys","includes","options","filterInvalid","pushCerts","appCredentials","pushP12","pushPassword","pushCredentials","getName","pushCred","pushCert","pushId","entry","index","credentialsIndex","pushCredentialsId","formatPushKeyFromApple","appleInfo","joinApps","usedByString","gray","teamText","validityStatus","validityText","manager","e","code","keys","usedByExpo","cert","reduce","acc","here","grey","key","certInfo","spinner","start","filteredFormattedPushKeyArray","isValidPushKey","successMsg","succeed","failureMsg","fail","validKeyIdsOnAppleServer","validPushKeysOnExpoServer","getPushKeyFromParams","builderOptions","pushP8Path","apnsKeyP8","fs","readFile","usePushKeyFromParams","iosPushCredentials"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport terminalLink from 'terminal-link';\n\nimport CommandError from '../../CommandError';\nimport { isPushKey, PushKey, PushKeyInfo, PushKeyManager } from '../../appleApi';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\nimport { confirmAsync } from '../../prompts';\nimport { displayIosUserCredentials } from '../actions/list';\nimport { askForUserProvided, CredentialSchema } from '../actions/promptForCredentials';\nimport { AppLookupParams, getAppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport {\n  IosAppCredentials,\n  IosCredentials,\n  IosPushCredentials,\n  pushKeySchema,\n} from '../credentials';\n\nconst APPLE_KEYS_TOO_MANY_GENERATED_ERROR = `\nYou can have only ${chalk.underline('two')} Push Notifactions Keys on your Apple Developer account.\nPlease revoke the old ones or reuse existing from your other apps.\nPlease remember that Apple Keys are not application specific!\n`;\n\nexport class CreateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async create(ctx: Context): Promise<IosPushCredentials> {\n    const newPushKey = await this.provideOrGenerate(ctx);\n    return await ctx.ios.createPushKey(this.accountName, newPushKey);\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    const pushKey = await this.create(ctx);\n\n    log('Successfully created Push Notification Key\\n');\n    displayIosUserCredentials(pushKey);\n    log();\n    return null;\n  }\n\n  _getRequiredQuestions(ctx: Context): CredentialSchema<PushKey> {\n    const requiredQuestions = { ...pushKeySchema };\n    if (ctx.hasAppleCtx() && requiredQuestions.questions) {\n      requiredQuestions.required = requiredQuestions.required.filter(q => q !== 'teamId');\n    }\n    return requiredQuestions;\n  }\n\n  _ensurePushKey(ctx: Context, partialKey: Partial<PushKey>): PushKey {\n    if (ctx.hasAppleCtx()) {\n      partialKey.teamId = ctx.appleCtx.team.id;\n      partialKey.teamName = ctx.appleCtx.team.name;\n    }\n    if (!isPushKey(partialKey)) {\n      throw new Error(`Not of type PushKey: ${partialKey}`);\n    }\n    return partialKey;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    if (!ctx.nonInteractive) {\n      const requiredQuestions = this._getRequiredQuestions(ctx);\n      const userProvided = await askForUserProvided(requiredQuestions);\n      if (userProvided) {\n        const pushKey = this._ensurePushKey(ctx, userProvided);\n        const isValid = await validatePushKey(ctx, pushKey);\n        return isValid ? userProvided : await this.provideOrGenerate(ctx);\n      }\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class RemoveIosPush implements IView {\n  constructor(private accountName: string, private shouldRevoke: boolean = false) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to remove.\"\n      );\n    }\n\n    const selected = await selectPushCredFromList(ctx, this.accountName);\n    if (selected) {\n      if (!('type' in selected)) {\n        const app = getAppLookupParams(selected.experienceName, selected.bundleIdentifier);\n        await this.removePushCert(ctx, app);\n        log(chalk.green('Successfully removed Push Certificate'));\n      } else {\n        await this.removeSpecific(ctx, selected as IosPushCredentials);\n        log(chalk.green('Successfully removed Push Notification Key'));\n      }\n    }\n    return null;\n  }\n\n  async removePushCert(ctx: Context, app: AppLookupParams): Promise<void> {\n    log('Removing Push Certificate');\n    await ctx.ios.deletePushCert(app);\n  }\n\n  async removeSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (appsList && !ctx.nonInteractive) {\n      log('Removing Push Key');\n      const confirm = await confirmAsync({\n        message: `Removing this key/cert will disable notifications in ${appsList}. Do you want to continue?`,\n      });\n      if (!confirm) {\n        log('Aborting');\n        return;\n      }\n    }\n\n    log('Removing Push Key...\\n');\n    await ctx.ios.deletePushKey(selected.id, this.accountName);\n\n    let shouldRevoke = this.shouldRevoke;\n    if (!shouldRevoke && !ctx.nonInteractive) {\n      const revoke = await confirmAsync({\n        message: `Do you also want to revoke it on Apple Developer Portal?`,\n      });\n      shouldRevoke = revoke;\n    }\n\n    if (shouldRevoke) {\n      await ctx.ensureAppleCtx();\n      await new PushKeyManager(ctx.appleCtx).revoke([selected.apnsKeyId]);\n    }\n  }\n}\n\nexport class UpdateIosPush implements IView {\n  constructor(private accountName: string) {}\n\n  async open(ctx: Context) {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to update.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await this.updateSpecific(ctx, selected);\n\n      log(chalk.green('Successfully updated Push Notification Key.\\n'));\n      const credentials = await ctx.ios.getAllCredentials(this.accountName);\n      const updated = credentials.userCredentials.find(i => i.id === selected.id);\n      if (updated) {\n        displayIosUserCredentials(updated);\n      }\n      log();\n    }\n    return null;\n  }\n\n  async updateSpecific(ctx: Context, selected: IosPushCredentials) {\n    const credentials = await ctx.ios.getAllCredentials(this.accountName);\n    const apps = getAppsUsingPushCred(credentials, selected);\n    const appsList = apps.map(appCred => appCred.experienceName).join(', ');\n\n    if (apps.length > 1) {\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          `Updating credentials will affect all applications that are using this key (${appsList}). Start the CLI without the '--non-interactive' flag to confirm.`\n        );\n      }\n\n      const confirm = await confirmAsync({\n        message: `Update will affect all applications that are using this key (${appsList}). Do you want to continue?`,\n      });\n      if (!confirm) {\n        log.warn('Aborting update process');\n        return;\n      }\n    }\n\n    const newPushKey = await this.provideOrGenerate(ctx);\n    await ctx.ios.updatePushKey(selected.id, this.accountName, newPushKey);\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<PushKey> {\n    const userProvided = await askForUserProvided(pushKeySchema);\n    if (userProvided) {\n      const isValid = await validatePushKey(ctx, userProvided);\n      return isValid ? userProvided : await this.provideOrGenerate(ctx);\n    }\n    return await generatePushKey(ctx, this.accountName);\n  }\n}\n\nexport class UseExistingPushNotification implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Start the CLI without the '--non-interactive' flag to select a push notification credential to use.\"\n      );\n    }\n\n    const selected = (await selectPushCredFromList(ctx, this.app.accountName, {\n      allowLegacy: false,\n    })) as IosPushCredentials;\n    if (selected) {\n      await ctx.ios.usePushKey(this.app, selected.id);\n      log(\n        chalk.green(\n          `Successfully assigned Push Notifactions Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n        )\n      );\n    }\n    return null;\n  }\n}\n\nexport class CreateOrReusePushKey implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async assignPushKey(ctx: Context, userCredentialsId: number) {\n    await ctx.ios.usePushKey(this.app, userCredentialsId);\n    log(\n      chalk.green(\n        `Successfully assigned Push Key to ${this.app.accountName}/${this.app.projectName} (${this.app.bundleIdentifier})`\n      )\n    );\n  }\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!ctx.user) {\n      throw new Error(`This workflow requires you to be logged in.`);\n    }\n\n    const existingPushKeys = await getValidPushKeys(\n      await ctx.ios.getAllCredentials(this.app.accountName),\n      ctx\n    );\n\n    if (existingPushKeys.length === 0) {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    }\n\n    // autoselect creds if we find valid keys\n    const autoselectedPushKey = existingPushKeys[0];\n\n    if (!ctx.nonInteractive) {\n      const confirm = await confirmAsync({\n        message: `${formatPushKey(\n          autoselectedPushKey,\n          await ctx.ios.getAllCredentials(this.app.accountName),\n          'VALID'\n        )} \\n Would you like to use this Push Key?`,\n        limit: Infinity,\n      });\n      if (!confirm) {\n        return await this._createOrReuse(ctx);\n      }\n    }\n\n    // Use autosuggested push key\n    log(`Using Push Key: ${autoselectedPushKey.apnsKeyId}`);\n    await this.assignPushKey(ctx, autoselectedPushKey.id);\n    return null;\n  }\n\n  async _createOrReuse(ctx: Context): Promise<IView | null> {\n    const choices = [\n      {\n        name: '[Choose existing push key] (Recommended)',\n        value: 'CHOOSE_EXISTING',\n      },\n      { name: '[Add a new push key]', value: 'GENERATE' },\n    ];\n\n    const question: Question = {\n      type: 'list',\n      name: 'action',\n      message: 'Select an iOS push key to use for push notifications:',\n      choices,\n      pageSize: Infinity,\n    };\n\n    const { action } = await prompt(question);\n\n    if (action === 'GENERATE') {\n      const pushKey = await new CreateIosPush(this.app.accountName).create(ctx);\n      await this.assignPushKey(ctx, pushKey.id);\n      return null;\n    } else if (action === 'CHOOSE_EXISTING') {\n      return new UseExistingPushNotification(this.app);\n    }\n\n    throw new Error('unsupported action');\n  }\n}\n\nasync function getValidPushKeys(iosCredentials: IosCredentials, ctx: Context) {\n  const pushKeys = iosCredentials.userCredentials.filter(\n    (cred): cred is IosPushCredentials => cred.type === 'push-key'\n  );\n  if (!ctx.hasAppleCtx()) {\n    log(\n      chalk.yellow(\n        `Unable to determine validity of Push Keys due to insufficient Apple Credentials`\n      )\n    );\n    return pushKeys;\n  }\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  return await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n}\n\nfunction getValidityStatus(\n  pushKey: IosPushCredentials,\n  validPushKeys: IosPushCredentials[] | null\n): ValidityStatus {\n  if (!validPushKeys) {\n    return 'UNKNOWN';\n  }\n  return validPushKeys.includes(pushKey) ? 'VALID' : 'INVALID';\n}\n\ntype ListOptions = {\n  filterInvalid?: boolean;\n  allowLegacy?: boolean;\n};\n\nasync function selectPushCredFromList(\n  ctx: Context,\n  accountName: string,\n  options: ListOptions = {}\n): Promise<IosPushCredentials | IosAppCredentials | null> {\n  const iosCredentials = await ctx.ios.getAllCredentials(accountName);\n  const allowLegacy = options.allowLegacy || true;\n  let pushKeys = iosCredentials.userCredentials.filter(\n    cred => cred.type === 'push-key'\n  ) as IosPushCredentials[];\n  let validPushKeys: IosPushCredentials[] | null = null;\n  if (ctx.hasAppleCtx()) {\n    const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n    const pushInfoFromApple = await pushKeyManager.list();\n    validPushKeys = await filterRevokedPushKeys<IosPushCredentials>(pushInfoFromApple, pushKeys);\n  }\n  pushKeys = options.filterInvalid && validPushKeys ? validPushKeys : pushKeys;\n\n  const pushCerts = allowLegacy\n    ? iosCredentials.appCredentials.filter(\n        ({ credentials }) => credentials.pushP12 && credentials.pushPassword\n      )\n    : [];\n  const pushCredentials = [...pushCerts, ...pushKeys];\n  if (pushCredentials.length === 0) {\n    log.warn('There are no push credentials available in your account');\n    return null;\n  }\n\n  const getName = (pushCred: IosPushCredentials | IosAppCredentials) => {\n    if ('type' in pushCred) {\n      return formatPushKey(\n        pushCred as IosPushCredentials,\n        iosCredentials,\n        getValidityStatus(pushCred as IosPushCredentials, validPushKeys)\n      );\n    }\n\n    const pushCert = pushCred as IosAppCredentials;\n    return `Push Certificate (PushId: ${pushCert.credentials.pushId || '------'}, TeamId: ${\n      pushCert.credentials.teamId || '-------'\n    } used in ${pushCert.experienceName})`;\n  };\n\n  const question: Question = {\n    type: 'list',\n    name: 'credentialsIndex',\n    message: 'Select credentials from list',\n    choices: pushCredentials.map((entry, index) => ({\n      name: getName(entry),\n      value: index,\n    })),\n  };\n  const { credentialsIndex } = await prompt(question);\n  return pushCredentials[credentialsIndex];\n}\n\nfunction getAppsUsingPushCred(\n  iosCredentials: IosCredentials,\n  pushCred: IosPushCredentials | IosAppCredentials\n): IosAppCredentials[] {\n  if ('type' in pushCred) {\n    return iosCredentials.appCredentials.filter(\n      cred => cred.pushCredentialsId === (pushCred as IosPushCredentials).id\n    );\n  } else if (pushCred.credentials?.pushP12 && pushCred.credentials?.pushPassword) {\n    return [pushCred as IosAppCredentials];\n  }\n  return [];\n}\n\nfunction formatPushKeyFromApple(appleInfo: PushKeyInfo, credentials: IosCredentials): string {\n  const userCredentials = credentials.userCredentials.filter(\n    cred => cred.type === 'push-key' && cred.apnsKeyId === appleInfo.id\n  );\n  const appCredentials =\n    userCredentials.length !== 0\n      ? credentials.appCredentials.filter(cred => cred.pushCredentialsId === userCredentials[0].id)\n      : [];\n  const joinApps = appCredentials\n    .map(i => `      ${i.experienceName} (${i.bundleIdentifier})`)\n    .join('\\n');\n\n  const usedByString = joinApps\n    ? `    ${chalk.gray(`used by\\n${joinApps}`)}`\n    : `    ${chalk.gray(`not used by any apps`)}`;\n\n  const { name, id } = appleInfo;\n  const pushKey = userCredentials[0];\n  const teamText = pushKey\n    ? `, Team ID: ${pushKey.teamId || '---'}, Team name: ${pushKey.teamName || '---'}`\n    : '';\n\n  return `${name} - KeyId: ${id}${teamText}\\n${usedByString}`;\n}\n\ntype ValidityStatus = 'UNKNOWN' | 'VALID' | 'INVALID';\nfunction formatPushKey(\n  pushKey: IosPushCredentials,\n  credentials: IosCredentials,\n  validityStatus: ValidityStatus = 'UNKNOWN'\n): string {\n  const appCredentials = credentials.appCredentials.filter(\n    cred => cred.pushCredentialsId === pushKey.id\n  );\n  const joinApps = appCredentials\n    .map(i => `${i.experienceName} (${i.bundleIdentifier})`)\n    .join(', ');\n\n  const usedByString = joinApps\n    ? `\\n    ${chalk.gray(`used by ${joinApps}`)}`\n    : `\\n    ${chalk.gray(`not used by any apps`)}`;\n\n  let validityText;\n  if (validityStatus === 'VALID') {\n    validityText = chalk.gray(\"\\n    ✅ Currently valid on Apple's servers.\");\n  } else if (validityStatus === 'INVALID') {\n    validityText = chalk.gray(\"\\n    ❌ No longer valid on Apple's servers.\");\n  } else {\n    validityText = chalk.gray(\n      \"\\n    ❓ Validity of this certificate on Apple's servers is unknown.\"\n    );\n  }\n  return `Push Notifications Key (Key ID: ${pushKey.apnsKeyId}, Team ID: ${pushKey.teamId})${usedByString}${validityText}`;\n}\n\nasync function generatePushKey(ctx: Context, accountName: string): Promise<PushKey> {\n  await ctx.ensureAppleCtx();\n  const manager = new PushKeyManager(ctx.appleCtx);\n  try {\n    return await manager.create();\n  } catch (e) {\n    if (e.code === 'APPLE_PUSH_KEYS_TOO_MANY_GENERATED_ERROR') {\n      const keys = await manager.list();\n      log.warn('Maximum number of Push Notifications Keys generated on Apple Developer Portal.');\n      log.warn(APPLE_KEYS_TOO_MANY_GENERATED_ERROR);\n\n      if (ctx.nonInteractive) {\n        throw new CommandError(\n          'NON_INTERACTIVE',\n          \"Start the CLI without the '--non-interactive' to revoke push notification keys.\"\n        );\n      }\n\n      const credentials = await ctx.ios.getAllCredentials(accountName);\n      const usedByExpo = credentials.userCredentials\n        .filter((cert): cert is IosPushCredentials => cert.type === 'push-key')\n        .reduce<{ [key: string]: IosPushCredentials }>(\n          (acc, cert) => ({ ...acc, [cert.apnsKeyId]: cert }),\n          {}\n        );\n\n      // https://docs.expo.io/distribution/app-signing/#summary\n      const here = terminalLink('here', 'https://bit.ly/3cfJJkQ');\n      log(chalk.grey(`⚠️  Revoking a Push Key will affect other apps that rely on it`));\n      log(chalk.grey(`ℹ️  Learn more ${here}`));\n      log();\n\n      const { revoke } = await prompt([\n        {\n          type: 'checkbox',\n          name: 'revoke',\n          message: 'Select Push Notifications Key to revoke.',\n          choices: keys.map((key, index) => ({\n            value: index,\n            name: formatPushKeyFromApple(key, credentials),\n          })),\n          pageSize: Infinity,\n        },\n      ]);\n\n      for (const index of revoke) {\n        const certInfo = keys[index];\n        if (certInfo && usedByExpo[certInfo.id]) {\n          await new RemoveIosPush(accountName, true).removeSpecific(ctx, usedByExpo[certInfo.id]);\n        } else {\n          await manager.revoke([certInfo.id]);\n        }\n      }\n    } else {\n      throw e;\n    }\n  }\n  return await generatePushKey(ctx, accountName);\n}\n\nexport async function validatePushKey(ctx: Context, pushKey: PushKey) {\n  if (!ctx.hasAppleCtx()) {\n    log.warn('Unable to validate Push Keys due to insufficient Apple Credentials');\n    return true;\n  }\n  const spinner = ora(`Checking validity of push key on Apple Developer Portal...`).start();\n\n  const pushKeyManager = new PushKeyManager(ctx.appleCtx);\n  const pushInfoFromApple = await pushKeyManager.list();\n  const filteredFormattedPushKeyArray = await filterRevokedPushKeys(pushInfoFromApple, [pushKey]);\n  const isValidPushKey = filteredFormattedPushKeyArray.length > 0;\n  if (isValidPushKey) {\n    const successMsg = `Successfully validated Push Key against Apple Servers`;\n    spinner.succeed(successMsg);\n  } else {\n    const failureMsg = `This Push Key is no longer valid on the Apple Developer Portal`;\n    spinner.fail(failureMsg);\n  }\n  return isValidPushKey;\n}\n\nasync function filterRevokedPushKeys<T extends PushKey>(\n  pushInfoFromApple: PushKeyInfo[],\n  pushKeys: T[]\n): Promise<T[]> {\n  // if the credentials are valid, check it against apple to make sure it hasnt been revoked\n  const validKeyIdsOnAppleServer = pushInfoFromApple.map(pushKey => pushKey.id);\n  const validPushKeysOnExpoServer = pushKeys.filter(pushKey => {\n    return validKeyIdsOnAppleServer.includes(pushKey.apnsKeyId);\n  });\n  return validPushKeysOnExpoServer;\n}\n\nexport async function getPushKeyFromParams(builderOptions: {\n  pushId?: string;\n  pushP8Path?: string;\n  teamId?: string;\n}): Promise<PushKey | null> {\n  const { pushId, pushP8Path, teamId } = builderOptions;\n\n  // none of the pushKey params were set, assume user has no intention of passing it in\n  if (!pushId && !pushP8Path) {\n    return null;\n  }\n\n  // partial pushKey params were set, assume user has intention of passing it in\n  if (!(pushId && pushP8Path && teamId)) {\n    throw new Error(\n      'In order to provide a Push Key through the CLI parameters, you have to pass --push-id, --push-p8-path and --team-id parameters.'\n    );\n  }\n\n  return {\n    apnsKeyId: pushId,\n    apnsKeyP8: await fs.readFile(pushP8Path, 'utf8'),\n    teamId,\n  } as PushKey;\n}\n\nexport async function usePushKeyFromParams(\n  ctx: Context,\n  app: AppLookupParams,\n  pushKey: PushKey\n): Promise<IosPushCredentials> {\n  const isValid = await validatePushKey(ctx, pushKey);\n  if (!isValid) {\n    throw new Error('Cannot validate uploaded Push Key');\n  }\n\n  const iosPushCredentials = await ctx.ios.createPushKey(app.accountName, pushKey);\n\n  await ctx.ios.usePushKey(app, iosPushCredentials.id);\n  log(\n    chalk.green(\n      `Successfully assigned Push Key to ${app.accountName}/${app.projectName} (${app.bundleIdentifier})`\n    )\n  );\n  return iosPushCredentials;\n}\n"],"file":"IosPushCredentials.js"}