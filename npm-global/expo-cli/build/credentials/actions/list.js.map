{"version":3,"sources":["../../../src/credentials/actions/list.ts"],"names":["displayProjectCredentials","appLookupParams","appCredentials","pushKey","distCert","experienceName","accountName","projectName","bundleIdentifier","chalk","bold","displayIosAppCredentials","displayIosUserCredentials","displayIosCredentials","credentials","cred","userCredentials","provisioningProfile","green","provisioningProfileId","teamId","teamName","pushP12","pushPassword","pushId","type","apnsKeyId","certId","log","warn","field","usedByApps","Set","filter","c","id","map","join","usedByAppsText","gray","displayAndroidCredentials","credentialsList","displayAndroidAppCredentials","tmpFilename","path","os","tmpdir","keystore","storeBuf","Buffer","from","fs","writeFile","Android","logKeystoreHashes","keystorePath","pushCredentials","fcmApiKey","error","remove"],"mappings":"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","sourcesContent":["import { AndroidCredentials as Android } from '@expo/xdl';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuid } from 'uuid';\n\nimport log from '../../log';\nimport { AppLookupParams } from '../api/IosApi';\nimport {\n  AndroidCredentials,\n  IosAppCredentials,\n  IosCredentials,\n  IosDistCredentials,\n  IosPushCredentials,\n} from '../credentials';\n\nexport function displayProjectCredentials(\n  appLookupParams: AppLookupParams,\n  appCredentials?: IosAppCredentials | null,\n  pushKey?: IosPushCredentials | null,\n  distCert?: IosDistCredentials | null\n): void {\n  const experienceName = `@${appLookupParams.accountName}/${appLookupParams.projectName}`;\n  const bundleIdentifier = appLookupParams.bundleIdentifier;\n  if (!appCredentials) {\n    log(\n      chalk.bold(\n        `No credentials configured for app ${experienceName} with bundle identifier ${bundleIdentifier}\\n`\n      )\n    );\n    return;\n  }\n\n  log();\n  log(chalk.bold('Project Credential Configuration:'));\n  displayIosAppCredentials(appCredentials);\n  log();\n\n  if (distCert) {\n    displayIosUserCredentials(distCert);\n  }\n\n  if (pushKey) {\n    displayIosUserCredentials(pushKey);\n  }\n}\n\nexport async function displayIosCredentials(credentials: IosCredentials) {\n  log(chalk.bold('Available credentials for iOS apps\\n'));\n\n  log(chalk.bold('Application credentials\\n'));\n  for (const cred of credentials.appCredentials) {\n    displayIosAppCredentials(cred);\n    log();\n  }\n\n  log();\n  log(chalk.bold('User credentials\\n'));\n  for (const cred of credentials.userCredentials) {\n    displayIosUserCredentials(cred, credentials);\n    log();\n  }\n  log();\n  log();\n}\n\nexport function displayIosAppCredentials(appCredentials: IosAppCredentials) {\n  log(\n    `  Experience: ${chalk.bold(appCredentials.experienceName)}, bundle identifier: ${\n      appCredentials.bundleIdentifier\n    }`\n  );\n  if (appCredentials.credentials.provisioningProfile) {\n    log(\n      `    Provisioning profile (ID: ${chalk.green(\n        appCredentials.credentials.provisioningProfileId || '---------'\n      )})`\n    );\n  } else {\n    log('    Provisioning profile is missing. It will be generated during the next build');\n  }\n  if (appCredentials.credentials.teamId || appCredentials.credentials.teamName) {\n    log(\n      `    Apple Team ID: ${chalk.green(\n        appCredentials.credentials.teamId || '---------'\n      )},  Apple Team Name: ${chalk.green(appCredentials.credentials.teamName || '---------')}`\n    );\n  }\n  if (appCredentials.credentials.pushP12 && appCredentials.credentials.pushPassword) {\n    log(\n      `    (deprecated) Push Certificate (Push ID: ${chalk.green(\n        appCredentials.credentials.pushId || '-----'\n      )})`\n    );\n  }\n}\n\nexport function displayIosUserCredentials(\n  userCredentials: IosPushCredentials | IosDistCredentials,\n  credentials?: IosCredentials\n) {\n  if (userCredentials.type === 'push-key') {\n    log(`  Push Notifications Key - Key ID: ${chalk.green(userCredentials.apnsKeyId)}`);\n  } else if (userCredentials.type === 'dist-cert') {\n    log(\n      `  Distribution Certificate - Certificate ID: ${chalk.green(\n        userCredentials.certId || '-----'\n      )}`\n    );\n  } else {\n    log.warn(`  Unknown key type ${(userCredentials as any).type}`);\n  }\n  log(\n    `    Apple Team ID: ${chalk.green(\n      userCredentials.teamId || '---------'\n    )},  Apple Team Name: ${chalk.green(userCredentials.teamName || '---------')}`\n  );\n\n  if (credentials) {\n    const field = userCredentials.type === 'push-key' ? 'pushCredentialsId' : 'distCredentialsId';\n    const usedByApps = [\n      ...new Set(\n        credentials.appCredentials\n          .filter(c => c[field] === userCredentials.id)\n          .map(c => `${c.experienceName} (${c.bundleIdentifier})`)\n      ),\n    ].join(',\\n      ');\n    const usedByAppsText = usedByApps ? `used by\\n      ${usedByApps}` : 'not used by any apps';\n    log(`    ${chalk.gray(usedByAppsText)}`);\n  }\n}\n\nexport async function displayAndroidCredentials(credentialsList: AndroidCredentials[]) {\n  log(chalk.bold('Available Android credentials'));\n  log();\n  for (const credentials of credentialsList) {\n    await displayAndroidAppCredentials(credentials);\n  }\n}\n\nexport async function displayAndroidAppCredentials(credentials: AndroidCredentials) {\n  const tmpFilename = path.join(os.tmpdir(), `expo_tmp_keystore_${uuid()}file.jks`);\n  try {\n    log(chalk.green(credentials.experienceName));\n    log(chalk.bold('  Upload Keystore hashes'));\n    if (credentials.keystore?.keystore) {\n      const storeBuf = Buffer.from(credentials.keystore.keystore, 'base64');\n      await fs.writeFile(tmpFilename, storeBuf);\n      await Android.logKeystoreHashes(\n        {\n          keystorePath: tmpFilename,\n          ...(credentials.keystore as Android.Keystore),\n        },\n        '    '\n      );\n    } else {\n      log('    -----------------------');\n    }\n    log(chalk.bold('  Push Notifications credentials'));\n    log('    FCM Api Key: ', credentials.pushCredentials?.fcmApiKey ?? '---------------------');\n    log('\\n');\n  } catch (error) {\n    log.error('  Failed to parse the Keystore', error);\n    log('\\n');\n  } finally {\n    await fs.remove(tmpFilename);\n  }\n}\n"],"file":"list.js"}