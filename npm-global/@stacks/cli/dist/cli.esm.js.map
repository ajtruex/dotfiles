{"version":3,"file":"cli.esm.js","sources":["../src/cli.ts"],"sourcesContent":["import * as blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nimport * as process from 'process';\nimport * as fs from 'fs';\nimport * as winston from 'winston';\nimport cors from 'cors';\n\nimport BN from 'bn.js';\nimport * as crypto from 'crypto';\nimport * as bip39 from 'bip39';\nimport express from 'express';\nimport * as path from 'path';\nimport { prompt } from 'inquirer';\nimport fetch from 'node-fetch';\nimport {\n  makeSTXTokenTransfer,\n  makeContractDeploy,\n  makeContractCall,\n  callReadOnlyFunction,\n  broadcastTransaction,\n  estimateTransfer,\n  estimateContractDeploy,\n  estimateContractFunctionCall,\n  SignedTokenTransferOptions,\n  ContractDeployOptions,\n  SignedContractCallOptions,\n  ReadOnlyFunctionOptions,\n  ContractCallPayload,\n  ClarityValue,\n  ClarityAbi,\n  getAbi,\n  validateContractCall,\n  PostConditionMode,\n  cvToString,\n  StacksTransaction,\n  TxBroadcastResult,\n  getAddressFromPrivateKey,\n  TransactionVersion,\n} from '@stacks/transactions';\n\nimport { StacksMainnet, StacksTestnet } from '@stacks/network';\n\nconst c32check = require('c32check');\n\nimport { UserData } from '@stacks/auth';\nimport crossfetch from 'cross-fetch';\n\nimport { StackingClient, StackerInfo } from '@stacks/stacking';\n\nimport { FaucetsApi, AccountsApi, Configuration } from '@stacks/blockchain-api-client';\n\nimport { GaiaHubConfig } from '@stacks/storage';\n\nimport {\n  getOwnerKeyInfo,\n  getPaymentKeyInfo,\n  getStacksWalletKeyInfo,\n  getApplicationKeyInfo,\n  extractAppKey,\n  STX_WALLET_COMPATIBLE_SEED_STRENGTH,\n  PaymentKeyInfoType,\n  OwnerKeyInfoType,\n  StacksKeyInfoType,\n} from './keys';\n\nimport {\n  CLI_ARGS,\n  getCLIOpts,\n  CLIOptAsString,\n  CLIOptAsStringArray,\n  CLIOptAsBool,\n  checkArgs,\n  loadConfig,\n  makeCommandUsageString,\n  makeAllCommandsList,\n  USAGE,\n  DEFAULT_CONFIG_PATH,\n  DEFAULT_CONFIG_REGTEST_PATH,\n  DEFAULT_CONFIG_TESTNET_PATH,\n  ID_ADDRESS_PATTERN,\n  STACKS_ADDRESS_PATTERN,\n  DEFAULT_MAX_ID_SEARCH_INDEX,\n} from './argparse';\n\nimport { encryptBackupPhrase, decryptBackupPhrase } from './encrypt';\n\nimport { CLINetworkAdapter, CLI_NETWORK_OPTS, getNetwork, NameInfoType } from './network';\n\nimport { gaiaAuth, gaiaConnect, gaiaUploadProfileAll, getGaiaAddressFromProfile } from './data';\n\nimport {\n  JSONStringify,\n  getPrivateKeyAddress,\n  canonicalPrivateKey,\n  decodePrivateKey,\n  makeProfileJWT,\n  getNameInfoEasy,\n  getpass,\n  getBackupPhrase,\n  mkdirs,\n  getIDAddress,\n  IDAppKeys,\n  getIDAppKeys,\n  makePromptsFromArgList,\n  parseClarityFunctionArgAnswers,\n  ClarityFunctionArg,\n  generateExplorerTxPageUrl,\n} from './utils';\n\nimport { handleAuth, handleSignIn } from './auth';\n\n// global CLI options\nlet txOnly = false;\nlet estimateOnly = false;\nlet safetyChecks = true;\nlet receiveFeesPeriod = 52595;\nlet gracePeriod = 5000;\nlet noExit = false;\nlet maxIDSearchIndex = DEFAULT_MAX_ID_SEARCH_INDEX;\n\nlet BLOCKSTACK_TEST = !!process.env.BLOCKSTACK_TEST;\n\nexport function getMaxIDSearchIndex() {\n  return maxIDSearchIndex;\n}\n\nexport interface WhoisInfoType {\n  address: string;\n  blockchain: string;\n  block_renewed_at: number;\n  did: string;\n  expire_block: number;\n  grace_period: number;\n  last_transaction_height: number;\n  last_txid: string;\n  owner_address: string;\n  owner_script: string;\n  renewal_deadline: number;\n  resolver: string | null;\n  status: string;\n  zonefile: string | null;\n  zonefile_hash: string | null;\n}\n\n/*\n * Sign a profile.\n * @path (string) path to the profile\n * @privateKey (string) the owner key (must be single-sig)\n */\n// TODO: fix, network is never used\n// @ts-ignore\nfunction profileSign(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const profilePath = args[0];\n  const profileData = JSON.parse(fs.readFileSync(profilePath).toString());\n  return Promise.resolve().then(() => makeProfileJWT(profileData, args[1]));\n}\n\n/*\n * Verify a profile with an address or public key\n * @path (string) path to the profile\n * @publicKeyOrAddress (string) public key or address\n */\nfunction profileVerify(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const profilePath = args[0];\n  let publicKeyOrAddress = args[1];\n\n  // need to coerce mainnet\n  if (publicKeyOrAddress.match(ID_ADDRESS_PATTERN)) {\n    publicKeyOrAddress = network.coerceMainnetAddress(publicKeyOrAddress.slice(3));\n  }\n\n  const profileString = fs.readFileSync(profilePath).toString();\n\n  return Promise.resolve().then(() => {\n    let profileToken = null;\n\n    try {\n      const profileTokens = JSON.parse(profileString);\n      profileToken = profileTokens[0].token;\n    } catch (e) {\n      // might be a raw token\n      profileToken = profileString;\n    }\n\n    if (!profileToken) {\n      throw new Error(`Data at ${profilePath} does not appear to be a signed profile`);\n    }\n\n    const profile = blockstack.extractProfile(profileToken, publicKeyOrAddress);\n    return JSONStringify(profile);\n  });\n}\n\n/*\n * Store a signed profile for a name or an address.\n * * verify that the profile was signed by the name's owner address\n * * verify that the private key matches the name's owner address\n *\n * Assumes that the URI records are all Gaia hubs\n *\n * @nameOrAddress (string) name or address that owns the profile\n * @path (string) path to the signed profile token\n * @privateKey (string) owner private key for the name\n * @gaiaUrl (string) this is the write endpoint of the Gaia hub to use\n */\nfunction profileStore(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrAddress = args[0];\n  const signedProfilePath = args[1];\n  const privateKey = decodePrivateKey(args[2]);\n  const gaiaHubUrl = args[3];\n\n  const signedProfileData = fs.readFileSync(signedProfilePath).toString();\n\n  const ownerAddress = getPrivateKeyAddress(network, privateKey);\n  const ownerAddressMainnet = network.coerceMainnetAddress(ownerAddress);\n\n  let nameInfoPromise: Promise<NameInfoType | null>;\n  let name = '';\n\n  if (nameOrAddress.startsWith('ID-')) {\n    // ID-address\n    nameInfoPromise = Promise.resolve().then(() => {\n      return {\n        address: nameOrAddress.slice(3),\n      };\n    });\n  } else {\n    // name; find the address\n    nameInfoPromise = getNameInfoEasy(network, nameOrAddress);\n    name = nameOrAddress;\n  }\n\n  const verifyProfilePromise = profileVerify(network, [\n    signedProfilePath,\n    `ID-${ownerAddressMainnet}`,\n  ]);\n\n  return Promise.all([nameInfoPromise, verifyProfilePromise])\n    .then(([nameInfo, _verifiedProfile]: [NameInfoType | null, any]) => {\n      if (\n        safetyChecks &&\n        (!nameInfo ||\n          network.coerceAddress(nameInfo.address) !== network.coerceAddress(ownerAddress))\n      ) {\n        throw new Error(\n          'Name owner address either could not be found, or does not match ' +\n            `private key address ${ownerAddress}`\n        );\n      }\n      return gaiaUploadProfileAll(network, [gaiaHubUrl], signedProfileData, args[2], name);\n    })\n    .then((gaiaUrls: { dataUrls?: string[] | null; error?: string | null }) => {\n      if (gaiaUrls.hasOwnProperty('error')) {\n        return JSONStringify({ dataUrls: gaiaUrls.dataUrls!, error: gaiaUrls.error! }, true);\n      } else {\n        return JSONStringify({ profileUrls: gaiaUrls.dataUrls! });\n      }\n    });\n}\n\n/*\n * Get the app private key(s) from a backup phrase and an ID-address\n * args:\n * @mnemonic (string) the 12-word phrase\n * @nameOrIDAddress (string) the name or ID-address\n * @appOrigin (string) the application's origin URL\n */\nasync function getAppKeys(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  const nameOrIDAddress = args[1];\n  const origin = args[2];\n  const idAddress = await getIDAddress(network, nameOrIDAddress);\n  const networkInfo = await getApplicationKeyInfo(network, mnemonic, idAddress, origin);\n  return JSONStringify(networkInfo);\n}\n\n/*\n * Get the owner private key(s) from a backup phrase\n * args:\n * @mnemonic (string) the 12-word phrase\n * @max_index (integer) (optional) the profile index maximum\n */\nasync function getOwnerKeys(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  let maxIndex = 1;\n  if (args.length > 1 && !!args[1]) {\n    maxIndex = parseInt(args[1]);\n  }\n\n  const keyInfo: OwnerKeyInfoType[] = [];\n  for (let i = 0; i < maxIndex; i++) {\n    keyInfo.push(await getOwnerKeyInfo(network, mnemonic, i));\n  }\n\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Get the payment private key from a backup phrase\n * args:\n * @mnemonic (string) the 12-word phrase\n */\nasync function getPaymentKey(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  // keep the return value consistent with getOwnerKeys\n  const keyObj = await getPaymentKeyInfo(network, mnemonic);\n  const keyInfo: PaymentKeyInfoType[] = [];\n  keyInfo.push(keyObj);\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Get the payment private key from a backup phrase used by the Stacks wallet\n * args:\n * @mnemonic (string) the 24-word phrase\n */\nasync function getStacksWalletKey(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  // keep the return value consistent with getOwnerKeys\n  const keyObj = await getStacksWalletKeyInfo(network, mnemonic);\n  const keyInfo: StacksKeyInfoType[] = [];\n  keyInfo.push(keyObj);\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Make a private key and output it\n * args:\n * @mnemonic (string) OPTIONAL; the 12-word phrase\n */\nasync function makeKeychain(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let mnemonic: string;\n  if (args[0]) {\n    mnemonic = await getBackupPhrase(args[0]);\n  } else {\n    mnemonic = await bip39.generateMnemonic(\n      STX_WALLET_COMPATIBLE_SEED_STRENGTH,\n      crypto.randomBytes\n    );\n  }\n\n  const stacksKeyInfo = await getStacksWalletKeyInfo(network, mnemonic);\n  return JSONStringify({\n    mnemonic: mnemonic,\n    keyInfo: stacksKeyInfo,\n  });\n}\n\n/*\n * Get an address's tokens and their balances.\n * Takes either a Bitcoin or Stacks address\n * args:\n * @address (string) the address\n */\nfunction balance(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let address = args[0];\n\n  if (BLOCKSTACK_TEST) {\n    // force testnet address if we're in regtest or testnet mode\n    address = network.coerceAddress(address);\n  }\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  return fetch(txNetwork.getAccountApiUrl(address))\n    .then(response => response.json())\n    .then(response => {\n      let balanceHex = response.balance;\n      if (response.balance.startsWith('0x')) {\n        balanceHex = response.balance.substr(2);\n      }\n      let lockedHex = response.locked;\n      if (response.locked.startsWith('0x')) {\n        lockedHex = response.locked.substr(2);\n      }\n      let unlockHeight = response.unlock_height;\n      const balance = new BN(balanceHex, 16);\n      const locked = new BN(lockedHex, 16);\n      const res = {\n        balance: balance.toString(10),\n        locked: locked.toString(10),\n        unlock_height: unlockHeight,\n        nonce: response.nonce,\n      };\n      return Promise.resolve(JSONStringify(res));\n    });\n}\n\n/*\n * Get a page of the account's history\n * args:\n * @address (string) the account address\n * @page (int) the page of the history to fetch (optional)\n */\nfunction getAccountHistory(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const address = c32check.c32ToB58(args[0]);\n\n  if (args.length >= 2 && !!args[1]) {\n    const page = parseInt(args[1]);\n    return Promise.resolve()\n      .then(() => {\n        return network.getAccountHistoryPage(address, page);\n      })\n      .then(accountStates =>\n        JSONStringify(\n          accountStates.map((s: any) => {\n            const new_s = {\n              address: c32check.b58ToC32(s.address),\n              credit_value: s.credit_value.toString(),\n              debit_value: s.debit_value.toString(),\n            };\n            return new_s;\n          })\n        )\n      );\n  } else {\n    // all pages\n    let history: any[] = [];\n\n    function getAllAccountHistoryPages(page: number): Promise<any[]> {\n      return network.getAccountHistoryPage(address, page).then((results: any[]) => {\n        if (results.length == 0) {\n          return history;\n        } else {\n          history = history.concat(results);\n          return getAllAccountHistoryPages(page + 1);\n        }\n      });\n    }\n\n    return getAllAccountHistoryPages(0).then((accountStates: any[]) =>\n      JSONStringify(\n        accountStates.map((s: any) => {\n          const new_s = {\n            address: c32check.b58ToC32(s.address),\n            credit_value: s.credit_value.toString(),\n            debit_value: s.debit_value.toString(),\n          };\n          return new_s;\n        })\n      )\n    );\n  }\n}\n\n// /*\n//  * Get the account's state(s) at a particular block height\n//  * args:\n//  * @address (string) the account address\n//  * @blockHeight (int) the height at which to query\n//  */\n// function getAccountAt(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const address = c32check.c32ToB58(args[0]);\n//   const blockHeight = parseInt(args[1]);\n\n//   return Promise.resolve().then(() => {\n//     return network.getAccountAt(address, blockHeight);\n//   })\n//     .then(accountStates => accountStates.map((s : any) => {\n//       const new_s = {\n//         address: c32check.b58ToC32(s.address),\n//         credit_value: s.credit_value.toString(),\n//         debit_value: s.debit_value.toString()\n//       };\n//       return new_s;\n//     }))\n//     .then(history => JSONStringify(history));\n// }\n\n// /*\n//  * Sends BTC from one private key to another address\n//  * args:\n//  * @recipientAddress (string) the recipient's address\n//  * @amount (string) the amount of BTC to send\n//  * @privateKey (string) the private key that owns the BTC\n//  */\n// function sendBTC(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const destinationAddress = args[0];\n//   const amount = parseInt(args[1]);\n//   const paymentKeyHex = decodePrivateKey(args[2]);\n\n//   if (amount <= 5500) {\n//     throw new Error('Invalid amount (must be greater than 5500)');\n//   }\n\n//   let paymentKey;\n//   if (typeof paymentKeyHex === 'string') {\n//     // single-sig\n//     paymentKey = blockstack.PubkeyHashSigner.fromHexString(paymentKeyHex);\n//   }\n//   else {\n//     // multi-sig or segwit\n//     paymentKey = paymentKeyHex;\n//   }\n\n//   const txPromise = blockstack.transactions.makeBitcoinSpend(destinationAddress, paymentKey, amount, !hasKeys(paymentKeyHex))\n//     .catch((e : Error) => {\n//       if (e.name === 'InvalidAmountError') {\n//         return JSONStringify({\n//           'status': false,\n//           'error': e.message\n//         }, true);\n//       }\n//       else {\n//         throw e;\n//       }\n//     });\n\n//   if (txOnly) {\n//     return txPromise;\n//   }\n//   else {\n//     return txPromise.then((tx : string) => {\n//       return network.broadcastTransaction(tx);\n//     })\n//       .then((txid : string) => {\n//         return txid;\n//       });\n//   }\n// }\n\n/*\n * Send tokens from one account private key to another account's address.\n * args:\n * @recipientAddress (string) the recipient's account address\n * @tokenAmount (int) the number of tokens to send\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n * @memo (string) OPTIONAL: a 34-byte memo to include\n */\nasync function sendTokens(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const recipientAddress = args[0];\n  const tokenAmount = new BN(args[1]);\n  const fee = new BN(args[2]);\n  const nonce = new BN(args[3]);\n  const privateKey = args[4];\n\n  let memo = '';\n\n  if (args.length > 4 && !!args[5]) {\n    memo = args[5];\n  }\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  const options: SignedTokenTransferOptions = {\n    recipient: recipientAddress,\n    amount: tokenAmount,\n    senderKey: privateKey,\n    fee,\n    nonce,\n    memo,\n    network: txNetwork,\n  };\n\n  const tx: StacksTransaction = await makeSTXTokenTransfer(options);\n\n  if (estimateOnly) {\n    return estimateTransfer(tx, txNetwork).then(cost => {\n      return cost.toString(10);\n    });\n  }\n\n  if (txOnly) {\n    return Promise.resolve(tx.serialize().toString('hex'));\n  }\n\n  return broadcastTransaction(tx, txNetwork)\n    .then((response: TxBroadcastResult) => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${tx.txid()}`,\n        transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n      };\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n/*\n * Depoly a Clarity smart contract.\n * args:\n * @source (string) path to the contract source file\n * @contractName (string) the name of the contract\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n */\nasync function contractDeploy(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const sourceFile = args[0];\n  const contractName = args[1];\n  const fee = new BN(args[2]);\n  const nonce = new BN(args[3]);\n  const privateKey = args[4];\n\n  const source = fs.readFileSync(sourceFile).toString();\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  const options: ContractDeployOptions = {\n    contractName,\n    codeBody: source,\n    senderKey: privateKey,\n    fee,\n    nonce,\n    network: txNetwork,\n    postConditionMode: PostConditionMode.Allow,\n  };\n\n  const tx = await makeContractDeploy(options);\n\n  if (estimateOnly) {\n    return estimateContractDeploy(tx, txNetwork).then(cost => {\n      return cost.toString(10);\n    });\n  }\n\n  if (txOnly) {\n    return Promise.resolve(tx.serialize().toString('hex'));\n  }\n\n  return broadcastTransaction(tx, txNetwork)\n    .then(response => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${tx.txid()}`,\n        transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n      };\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n/*\n * Call a Clarity smart contract function.\n * args:\n * @contractAddress (string) the address of the contract\n * @contractName (string) the name of the contract\n * @functionName (string) the name of the function to call\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n */\nasync function contractFunctionCall(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const contractAddress = args[0];\n  const contractName = args[1];\n  const functionName = args[2];\n  const fee = new BN(args[3]);\n  const nonce = new BN(args[4]);\n  const privateKey = args[5];\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  let abi: ClarityAbi;\n  let abiArgs: ClarityFunctionArg[];\n  let functionArgs: ClarityValue[] = [];\n\n  return getAbi(contractAddress, contractName, txNetwork)\n    .then(responseAbi => {\n      abi = responseAbi;\n      const filtered = abi.functions.filter(fn => fn.name === functionName);\n      if (filtered.length === 1) {\n        abiArgs = filtered[0].args;\n        return makePromptsFromArgList(abiArgs);\n      } else {\n        return null;\n      }\n    })\n    .then(prompts => prompt(prompts!))\n    .then(answers => {\n      functionArgs = parseClarityFunctionArgAnswers(answers, abiArgs);\n\n      const options: SignedContractCallOptions = {\n        contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n        senderKey: privateKey,\n        fee,\n        nonce,\n        network: txNetwork,\n        postConditionMode: PostConditionMode.Allow,\n      };\n\n      return makeContractCall(options);\n    })\n    .then(tx => {\n      if (!validateContractCall(tx.payload as ContractCallPayload, abi)) {\n        throw new Error('Failed to validate function arguments against ABI');\n      }\n\n      if (estimateOnly) {\n        return estimateContractFunctionCall(tx, txNetwork).then(cost => {\n          return cost.toString(10);\n        });\n      }\n\n      if (txOnly) {\n        return Promise.resolve(tx.serialize().toString('hex'));\n      }\n\n      return broadcastTransaction(tx, txNetwork)\n        .then(response => {\n          if (response.hasOwnProperty('error')) {\n            return response;\n          }\n          return {\n            txid: `0x${tx.txid()}`,\n            transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n          };\n        })\n        .catch(error => {\n          return error.toString();\n        });\n    });\n}\n\n/*\n * Call a read-only Clarity smart contract function.\n * args:\n * @contractAddress (string) the address of the contract\n * @contractName (string) the name of the contract\n * @functionName (string) the name of the function to call\n * @senderAddress (string) the sender address\n */\nasync function readOnlyContractFunctionCall(\n  network: CLINetworkAdapter,\n  args: string[]\n): Promise<string> {\n  const contractAddress = args[0];\n  const contractName = args[1];\n  const functionName = args[2];\n  const senderAddress = args[3];\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  let abi: ClarityAbi;\n  let abiArgs: ClarityFunctionArg[];\n  let functionArgs: ClarityValue[] = [];\n\n  return getAbi(contractAddress, contractName, txNetwork)\n    .then(responseAbi => {\n      abi = responseAbi;\n      const filtered = abi.functions.filter(fn => fn.name === functionName);\n      if (filtered.length === 1) {\n        abiArgs = filtered[0].args;\n        return makePromptsFromArgList(abiArgs);\n      } else {\n        return null;\n      }\n    })\n    .then(prompts => prompt(prompts!))\n    .then(answers => {\n      functionArgs = parseClarityFunctionArgAnswers(answers, abiArgs);\n\n      const options: ReadOnlyFunctionOptions = {\n        contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n        senderAddress,\n        network: txNetwork,\n      };\n\n      return callReadOnlyFunction(options);\n    })\n    .then(returnValue => {\n      return cvToString(returnValue);\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n// /*\n//  * Get the number of confirmations of a txid.\n//  * args:\n//  * @txid (string) the transaction ID as a hex string\n//  */\n// function getConfirmations(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const txid = args[0];\n//   return Promise.all([network.getBlockHeight(), network.getTransactionInfo(txid)])\n//     .then(([blockHeight, txInfo]) => {\n//       return JSONStringify({\n//         'blockHeight': txInfo.block_height,\n//         'confirmations': blockHeight - txInfo.block_height + 1\n//       });\n//     })\n//     .catch((e) => {\n//       if (e.message.toLowerCase() === 'unconfirmed transaction') {\n//         return JSONStringify({\n//           'blockHeight': 'unconfirmed',\n//           'confirmations': 0\n//         });\n//       }\n//       else {\n//         throw e;\n//       }\n//     });\n// }\n\n/*\n * Get the address of a private key\n * args:\n * @private_key (string) the hex-encoded private key or key bundle\n */\nfunction getKeyAddress(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const privateKey = decodePrivateKey(args[0]);\n  return Promise.resolve().then(() => {\n    const addr = getPrivateKeyAddress(network, privateKey);\n    return JSONStringify({\n      BTC: addr,\n      STACKS: c32check.b58ToC32(addr),\n    });\n  });\n}\n\n/*\n * Get a file from Gaia.\n * args:\n * @username (string) the blockstack ID of the user who owns the data\n * @origin (string) the application origin\n * @path (string) the file to read\n * @appPrivateKey (string) OPTIONAL: the app private key to decrypt/verify with\n * @decrypt (string) OPTINOAL: if '1' or 'true', then decrypt\n * @verify (string) OPTIONAL: if '1' or 'true', then search for and verify a signature file\n *  along with the data\n */\nfunction gaiaGetFile(network: CLINetworkAdapter, args: string[]): Promise<string | Buffer> {\n  const username = args[0];\n  const origin = args[1];\n  const path = args[2];\n  let appPrivateKey = args[3];\n  let decrypt = false;\n  let verify = false;\n\n  if (!!appPrivateKey && args.length > 4 && !!args[4]) {\n    decrypt = args[4].toLowerCase() === 'true' || args[4].toLowerCase() === '1';\n  }\n\n  if (!!appPrivateKey && args.length > 5 && !!args[5]) {\n    verify = args[5].toLowerCase() === 'true' || args[5].toLowerCase() === '1';\n  }\n\n  if (!appPrivateKey) {\n    // make a fake private key (it won't be used)\n    appPrivateKey = 'fda1afa3ff9ef25579edb5833b825ac29fae82d03db3f607db048aae018fe882';\n  }\n\n  // force mainnet addresses\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, null)\n    .then((_userData: UserData) =>\n      blockstack.getFile(path, {\n        decrypt: decrypt,\n        verify: verify,\n        app: origin,\n        username: username,\n      })\n    )\n    .then((data: ArrayBuffer | Buffer | string) => {\n      if (data instanceof ArrayBuffer) {\n        return Buffer.from(data);\n      } else {\n        return data;\n      }\n    });\n}\n\n/*\n * Put a file into a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n * @dataPath (string) the path (on disk) to the data to store\n * @gaiaPath (string) the path (in Gaia) where the data will be stored\n * @encrypt (string) OPTIONAL: if '1' or 'true', then encrypt the file\n * @sign (string) OPTIONAL: if '1' or 'true', then sign the file and store the signature too.\n */\nfunction gaiaPutFile(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n  const dataPath = args[2];\n  const gaiaPath = path.normalize(args[3].replace(/^\\/+/, ''));\n\n  let encrypt = false;\n  let sign = false;\n\n  if (args.length > 4 && !!args[4]) {\n    encrypt = args[4].toLowerCase() === 'true' || args[4].toLowerCase() === '1';\n  }\n  if (args.length > 5 && !!args[5]) {\n    sign = args[5].toLowerCase() === 'true' || args[5].toLowerCase() === '1';\n  }\n\n  const data = fs.readFileSync(dataPath);\n\n  // force mainnet addresses\n  // TODO\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.putFile(gaiaPath, data, { encrypt: encrypt, sign: sign });\n    })\n    .then((url: string) => {\n      return JSONStringify({ urls: [url] });\n    });\n}\n\n/*\n * Delete a file in a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n * @gaiaPath (string) the path (in Gaia) to delete\n * @wasSigned (string) OPTIONAL: if '1' or 'true'.  Delete the signature file as well.\n */\nfunction gaiaDeleteFile(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n  const gaiaPath = path.normalize(args[2].replace(/^\\/+/, ''));\n\n  let wasSigned = false;\n\n  if (args.length > 3 && !!args[3]) {\n    wasSigned = args[3].toLowerCase() === 'true' || args[3].toLowerCase() === '1';\n  }\n\n  // force mainnet addresses\n  // TODO\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.deleteFile(gaiaPath, { wasSigned: wasSigned });\n    })\n    .then(() => {\n      return JSONStringify('ok');\n    });\n}\n\n/*\n * List files in a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n */\nfunction gaiaListFiles(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n\n  // force mainnet addresses\n  // TODO\n  let count = 0;\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, canonicalPrivateKey(appPrivateKey), hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.listFiles((name: string) => {\n        // print out incrementally\n        console.log(name);\n        count += 1;\n        return true;\n      });\n    })\n    .then(() => JSONStringify(count));\n}\n\n/*\n * Group array items into batches\n */\nfunction batchify<T>(input: T[], batchSize: number = 50): T[][] {\n  const output = [];\n  let currentBatch = [];\n  for (let i = 0; i < input.length; i++) {\n    currentBatch.push(input[i]);\n    if (currentBatch.length >= batchSize) {\n      output.push(currentBatch);\n      currentBatch = [];\n    }\n  }\n  if (currentBatch.length > 0) {\n    output.push(currentBatch);\n  }\n  return output;\n}\n\n/*\n * Dump all files from a Gaia hub bucket to a directory on disk.\n * args:\n * @nameOrIDAddress (string) the name or ID address that owns the bucket to dump\n * @appOrigin (string) the application for which to dump data\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @mnemonic (string) the 12-word phrase or ciphertext\n * @dumpDir (string) the directory to hold the dumped files\n */\nfunction gaiaDumpBucket(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrIDAddress = args[0];\n  const appOrigin = args[1];\n  const hubUrl = args[2];\n  const mnemonicOrCiphertext = args[3];\n  let dumpDir = args[4];\n\n  if (dumpDir.length === 0) {\n    throw new Error('Invalid directory (not given)');\n  }\n  if (dumpDir[0] !== '/') {\n    // relative path.  make absolute\n    const cwd = fs.realpathSync('.');\n    dumpDir = path.normalize(`${cwd}/${dumpDir}`);\n  }\n\n  mkdirs(dumpDir);\n\n  function downloadFile(hubConfig: GaiaHubConfig, fileName: string): Promise<any> {\n    const gaiaReadUrl = `${hubConfig.url_prefix.replace(/\\/+$/, '')}/${hubConfig.address}`;\n    const fileUrl = `${gaiaReadUrl}/${fileName}`;\n    const destPath = `${dumpDir}/${fileName.replace(/\\//g, '\\\\x2f')}`;\n\n    console.log(`Download ${fileUrl} to ${destPath}`);\n    return fetch(fileUrl)\n      .then((resp: any) => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad status code for ${fileUrl}: ${resp.status}`);\n        }\n\n        // javascript can be incredibly stupid at fetching data despite being a Web language...\n        const contentType = resp.headers.get('Content-Type');\n        if (\n          contentType === null ||\n          contentType.startsWith('text') ||\n          contentType === 'application/json'\n        ) {\n          return resp.text();\n        } else {\n          return resp.arrayBuffer();\n        }\n      })\n      .then((filebytes: Buffer | ArrayBuffer) => {\n        return new Promise((resolve, reject) => {\n          try {\n            fs.writeFileSync(destPath, Buffer.from(filebytes), { encoding: null, mode: 0o660 });\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n  }\n\n  // force mainnet addresses\n  // TODO: better way of doing this\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n\n  const fileNames: string[] = [];\n  let gaiaHubConfig: GaiaHubConfig;\n  let appPrivateKey: string;\n  let ownerPrivateKey: string;\n\n  return getIDAppKeys(network, nameOrIDAddress, appOrigin, mnemonicOrCiphertext)\n    .then((keyInfo: IDAppKeys) => {\n      appPrivateKey = keyInfo.appPrivateKey;\n      ownerPrivateKey = keyInfo.ownerPrivateKey;\n      return gaiaAuth(network, appPrivateKey, hubUrl, ownerPrivateKey);\n    })\n    .then((_userData: UserData) => {\n      return gaiaConnect(network, hubUrl, appPrivateKey);\n    })\n    .then((hubConfig: GaiaHubConfig) => {\n      gaiaHubConfig = hubConfig;\n      return blockstack.listFiles(name => {\n        fileNames.push(name);\n        return true;\n      });\n    })\n    .then((fileCount: number) => {\n      console.log(`Download ${fileCount} files...`);\n      const fileBatches: string[][] = batchify(fileNames);\n      let filePromiseChain: Promise<any> = Promise.resolve();\n      for (let i = 0; i < fileBatches.length; i++) {\n        const filePromises = fileBatches[i].map(fileName => downloadFile(gaiaHubConfig, fileName));\n        const batchPromise = Promise.all(filePromises);\n        filePromiseChain = filePromiseChain.then(() => batchPromise);\n      }\n\n      return filePromiseChain.then(() => JSONStringify(fileCount));\n    });\n}\n\n/*\n * Restore all of the files in a Gaia bucket dump to a new Gaia hub\n * args:\n * @nameOrIDAddress (string) the name or ID address that owns the bucket to dump\n * @appOrigin (string) the origin of the app for which to restore data\n * @hubUrl (string) the URL to the write endpoint of the new gaia hub\n * @mnemonic (string) the 12-word phrase or ciphertext\n * @dumpDir (string) the directory to hold the dumped files\n */\nfunction gaiaRestoreBucket(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrIDAddress = args[0];\n  const appOrigin = args[1];\n  const hubUrl = args[2];\n  const mnemonicOrCiphertext = args[3];\n  let dumpDir = args[4];\n\n  if (dumpDir.length === 0) {\n    throw new Error('Invalid directory (not given)');\n  }\n  if (dumpDir[0] !== '/') {\n    // relative path.  make absolute\n    const cwd = fs.realpathSync('.');\n    dumpDir = path.normalize(`${cwd}/${dumpDir}`);\n  }\n\n  const fileList = fs.readdirSync(dumpDir);\n  const fileBatches = batchify(fileList, 10);\n\n  let appPrivateKey: string;\n  let ownerPrivateKey: string;\n\n  // force mainnet addresses\n  // TODO better way of doing this\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n\n  return getIDAppKeys(network, nameOrIDAddress, appOrigin, mnemonicOrCiphertext)\n    .then((keyInfo: IDAppKeys) => {\n      appPrivateKey = keyInfo.appPrivateKey;\n      ownerPrivateKey = keyInfo.ownerPrivateKey;\n      return gaiaAuth(network, appPrivateKey, hubUrl, ownerPrivateKey);\n    })\n    .then((_userData: UserData) => {\n      let uploadPromise: Promise<any> = Promise.resolve();\n      for (let i = 0; i < fileBatches.length; i++) {\n        const uploadBatchPromises = fileBatches[i].map((fileName: string) => {\n          const filePath = path.join(dumpDir, fileName);\n          const dataBuf = fs.readFileSync(filePath);\n          const gaiaPath = fileName.replace(/\\\\x2f/g, '/');\n          return blockstack\n            .putFile(gaiaPath, dataBuf, { encrypt: false, sign: false })\n            .then((url: string) => {\n              console.log(`Uploaded ${fileName} to ${url}`);\n            });\n        });\n        uploadPromise = uploadPromise.then(() => Promise.all(uploadBatchPromises));\n      }\n      return uploadPromise;\n    })\n    .then(() => JSONStringify(fileList.length));\n}\n\n/*\n * Set the Gaia hub for an application for a blockstack ID.\n * args:\n * @blockstackID (string) the blockstack ID of the user\n * @profileHubUrl (string) the URL to the write endpoint of the user's profile gaia hub\n * @appOrigin (string) the application's Origin\n * @hubUrl (string) the URL to the write endpoint of the app's gaia hub\n * @mnemonic (string) the 12-word backup phrase, or the ciphertext of it\n */\nasync function gaiaSetHub(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  network.setCoerceMainnetAddress(true);\n\n  const blockstackID = args[0];\n  const ownerHubUrl = args[1];\n  const appOrigin = args[2];\n  const hubUrl = args[3];\n  const mnemonicPromise = getBackupPhrase(args[4]);\n\n  const nameInfoPromise = getNameInfoEasy(network, blockstackID).then(\n    (nameInfo: NameInfoType | null) => {\n      if (!nameInfo) {\n        throw new Error('Name not found');\n      }\n      return nameInfo;\n    }\n  );\n\n  const profilePromise = blockstack.lookupProfile(blockstackID);\n\n  const [nameInfo, nameProfile, mnemonic]: [NameInfoType, any, string] = await Promise.all([\n    nameInfoPromise,\n    profilePromise,\n    mnemonicPromise,\n  ]);\n\n  if (!nameProfile) {\n    throw new Error('No profile found');\n  }\n  if (!nameInfo) {\n    throw new Error('Name not found');\n  }\n  if (!nameInfo.zonefile) {\n    throw new Error('No zone file found');\n  }\n\n  if (!nameProfile.apps) {\n    nameProfile.apps = {};\n  }\n\n  // get owner ID-address\n  const ownerAddress = network.coerceMainnetAddress(nameInfo.address);\n  const idAddress = `ID-${ownerAddress}`;\n\n  // get owner and app key info\n  const appKeyInfo = await getApplicationKeyInfo(network, mnemonic, idAddress, appOrigin);\n  const ownerKeyInfo = await getOwnerKeyInfo(network, mnemonic, appKeyInfo.ownerKeyIndex);\n\n  // do we already have an address set for this app?\n  let existingAppAddress: string | null = null;\n  let appPrivateKey: string;\n  try {\n    existingAppAddress = getGaiaAddressFromProfile(network, nameProfile, appOrigin);\n    appPrivateKey = extractAppKey(network, appKeyInfo, existingAppAddress);\n  } catch (e) {\n    console.log(`No profile application entry for ${appOrigin}`);\n    appPrivateKey = extractAppKey(network, appKeyInfo);\n  }\n\n  appPrivateKey = `${canonicalPrivateKey(appPrivateKey)}01`;\n  const appAddress = network.coerceMainnetAddress(getPrivateKeyAddress(network, appPrivateKey));\n\n  if (existingAppAddress && appAddress !== existingAppAddress) {\n    throw new Error(`BUG: ${existingAppAddress} !== ${appAddress}`);\n  }\n\n  const profile = nameProfile;\n  const ownerPrivateKey = ownerKeyInfo.privateKey;\n\n  const ownerGaiaHubPromise = gaiaConnect(network, ownerHubUrl, ownerPrivateKey);\n  const appGaiaHubPromise = gaiaConnect(network, hubUrl, appPrivateKey);\n\n  const [ownerHubConfig, appHubConfig]: [GaiaHubConfig, GaiaHubConfig] = await Promise.all([\n    ownerGaiaHubPromise,\n    appGaiaHubPromise,\n  ]);\n\n  if (!ownerHubConfig.url_prefix) {\n    throw new Error('Invalid owner hub config: no url_prefix defined');\n  }\n\n  if (!appHubConfig.url_prefix) {\n    throw new Error('Invalid app hub config: no url_prefix defined');\n  }\n\n  const gaiaReadUrl = appHubConfig.url_prefix.replace(/\\/+$/, '');\n\n  const newAppEntry: Record<string, string> = {};\n  newAppEntry[appOrigin] = `${gaiaReadUrl}/${appAddress}/`;\n\n  const apps = Object.assign({}, profile.apps ? profile.apps : {}, newAppEntry);\n  profile.apps = apps;\n\n  // sign the new profile\n  const signedProfile = makeProfileJWT(profile, ownerPrivateKey);\n  const profileUrls: {\n    dataUrls?: string[] | null;\n    error?: string | null;\n  } = await gaiaUploadProfileAll(\n    network,\n    [ownerHubUrl],\n    signedProfile,\n    ownerPrivateKey,\n    blockstackID\n  );\n\n  if (profileUrls.error) {\n    return JSONStringify({\n      error: profileUrls.error,\n    });\n  } else {\n    return JSONStringify({\n      profileUrls: profileUrls.dataUrls!,\n    });\n  }\n}\n\n/*\n * Convert an address between mainnet and testnet, and between\n * base58check and c32check.\n * args:\n * @address (string) the input address.  can be in any format\n */\nfunction addressConvert(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const addr = args[0];\n  let b58addr: string;\n  let c32addr: string;\n  let testnetb58addr: string;\n  let testnetc32addr: string;\n\n  if (addr.match(STACKS_ADDRESS_PATTERN)) {\n    c32addr = addr;\n    b58addr = c32check.c32ToB58(c32addr);\n  } else if (addr.match(/[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+/)) {\n    c32addr = c32check.b58ToC32(addr);\n    b58addr = addr;\n  } else {\n    throw new Error(`Unrecognized address ${addr}`);\n  }\n\n  if (network.isTestnet()) {\n    testnetb58addr = network.coerceAddress(b58addr);\n    testnetc32addr = c32check.b58ToC32(testnetb58addr);\n  }\n\n  return Promise.resolve().then(() => {\n    const result: any = {\n      mainnet: {\n        STACKS: c32addr,\n        BTC: b58addr,\n      },\n      testnet: undefined,\n    };\n\n    if (network.isTestnet()) {\n      result.testnet = {\n        STACKS: testnetc32addr,\n        BTC: testnetb58addr,\n      };\n    }\n\n    return JSONStringify(result);\n  });\n}\n\n/*\n * Run an authentication daemon on a given port.\n * args:\n * @gaiaHubUrl (string) the write endpoint of your app Gaia hub, where app data will be stored\n * @mnemonic (string) your 12-word phrase, optionally encrypted.  If encrypted, then\n * a password will be prompted.\n * @profileGaiaHubUrl (string) the write endpoint of your profile Gaia hub, where your profile\n *   will be stored (optional)\n * @port (number) the port to listen on (optional)\n */\nfunction authDaemon(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const gaiaHubUrl = args[0];\n  const mnemonicOrCiphertext = args[1];\n  let port = 3000; // default port\n  let profileGaiaHub = gaiaHubUrl;\n\n  if (args.length > 2 && !!args[2]) {\n    profileGaiaHub = args[2];\n  }\n\n  if (args.length > 3 && !!args[3]) {\n    port = parseInt(args[3]);\n  }\n\n  if (port < 0 || port > 65535) {\n    return Promise.resolve().then(() => JSONStringify({ error: 'Invalid port' }));\n  }\n\n  const mnemonicPromise = getBackupPhrase(mnemonicOrCiphertext);\n\n  return mnemonicPromise\n    .then((mnemonic: string) => {\n      noExit = true;\n\n      // load up all of our identity addresses, profiles, profile URLs, and Gaia connections\n      const authServer = express();\n      authServer.use(cors());\n\n      authServer.get(/^\\/auth\\/*$/, (req: express.Request, res: express.Response) => {\n        return handleAuth(network, mnemonic, gaiaHubUrl, profileGaiaHub, port, req, res);\n      });\n\n      authServer.get(/^\\/signin\\/*$/, (req: express.Request, res: express.Response) => {\n        return handleSignIn(network, mnemonic, gaiaHubUrl, profileGaiaHub, req, res);\n      });\n\n      authServer.listen(port, () => console.log(`Authentication server started on ${port}`));\n      return 'Press Ctrl+C to exit';\n    })\n    .catch((e: Error) => {\n      return JSONStringify({ error: e.message });\n    });\n}\n\n/*\n * Encrypt a backup phrase\n * args:\n * @backup_phrase (string) the 12-word phrase to encrypt\n * @password (string) the password (will be interactively prompted if not given)\n */\n// TODO: fix: network is never used\n// @ts-ignore\nfunction encryptMnemonic(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = args[0];\n  if (mnemonic.split(/ +/g).length !== 12) {\n    throw new Error('Invalid backup phrase: must be 12 words');\n  }\n\n  const passwordPromise: Promise<string> = new Promise((resolve, reject) => {\n    let pass = '';\n    if (args.length === 2 && !!args[1]) {\n      pass = args[1];\n      resolve(pass);\n    } else {\n      if (!process.stdin.isTTY) {\n        // password must be given as an argument\n        const errMsg = 'Password argument required on non-interactive mode';\n        reject(new Error(errMsg));\n      } else {\n        // prompt password\n        getpass('Enter password: ', (pass1: string) => {\n          getpass('Enter password again: ', (pass2: string) => {\n            if (pass1 !== pass2) {\n              const errMsg = 'Passwords do not match';\n              reject(new Error(errMsg));\n            } else {\n              resolve(pass1);\n            }\n          });\n        });\n      }\n    }\n  });\n\n  return passwordPromise\n    .then((pass: string) => encryptBackupPhrase(mnemonic, pass))\n    .then((cipherTextBuffer: Buffer) => cipherTextBuffer.toString('base64'))\n    .catch((e: Error) => {\n      return JSONStringify({ error: e.message });\n    });\n}\n\n/* Decrypt a backup phrase\n * args:\n * @encrypted_backup_phrase (string) the encrypted base64-encoded backup phrase\n * @password 9string) the password (will be interactively prompted if not given)\n */\n// TODO: fix: network is never used\n// @ts-ignore\nfunction decryptMnemonic(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const ciphertext = args[0];\n\n  const passwordPromise: Promise<string> = new Promise((resolve, reject) => {\n    if (args.length === 2 && !!args[1]) {\n      const pass = args[1];\n      resolve(pass);\n    } else {\n      if (!process.stdin.isTTY) {\n        // password must be given\n        reject(new Error('Password argument required in non-interactive mode'));\n      } else {\n        // prompt password\n        getpass('Enter password: ', p => {\n          resolve(p);\n        });\n      }\n    }\n  });\n\n  return passwordPromise\n    .then((pass: string) => decryptBackupPhrase(Buffer.from(ciphertext, 'base64'), pass))\n    .catch((e: Error) => {\n      return JSONStringify({\n        error:\n          'Failed to decrypt (wrong password or corrupt ciphertext), ' + `details: ${e.message}`,\n      });\n    });\n}\n\nasync function stackingStatus(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let stxAddress = args[0];\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  return stacker\n    .getStatus()\n    .then((status: StackerInfo) => {\n      if (status.stacked) {\n        return {\n          amount_microstx: status.details!.amount_microstx,\n          first_reward_cycle: status.details!.first_reward_cycle,\n          lock_period: status.details!.lock_period,\n          unlock_height: status.details!.unlock_height,\n          pox_address: {\n            version: status.details!.pox_address.version.toString('hex'),\n            hashbytes: status.details!.pox_address.hashbytes.toString('hex'),\n          },\n        };\n      } else {\n        return 'Account not actively participating in Stacking';\n      }\n    })\n    .catch((error: any) => {\n      return error.toString();\n    });\n}\n\nasync function canStack(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let amount = new BN(args[0]);\n  let cycles = Number(args[1]);\n  let poxAddress = args[2];\n  let stxAddress = args[3];\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: txNetwork.coreApiUrl,\n  });\n  const accounts = new AccountsApi(apiConfig);\n\n  const balancePromise = accounts.getAccountBalance({\n    principal: stxAddress,\n  });\n\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  const poxInfoPromise = stacker.getPoxInfo();\n\n  const stackingEligiblePromise = stacker.canStack({ poxAddress, cycles });\n\n  return Promise.all([balancePromise, poxInfoPromise, stackingEligiblePromise])\n    .then(([balance, poxInfo, stackingEligible]) => {\n      const minAmount = new BN(poxInfo.min_amount_ustx);\n      const balanceBN = new BN(balance.stx.balance);\n\n      if (minAmount.gt(amount)) {\n        throw new Error(\n          `Stacking amount less than required minimum of ${minAmount.toString()} microstacks`\n        );\n      }\n\n      if (amount.gt(balanceBN)) {\n        throw new Error(\n          `Stacking amount greater than account balance of ${balanceBN.toString()} microstacks`\n        );\n      }\n\n      if (!stackingEligible.eligible) {\n        throw new Error(`Account cannot participate in stacking. ${stackingEligible.reason}`);\n      }\n\n      return stackingEligible;\n    })\n    .catch(error => {\n      return error;\n    });\n}\n\nasync function stack(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let amount = new BN(args[0]);\n  let cycles = Number(args[1]);\n  let poxAddress = args[2];\n  let privateKey = args[3];\n\n  // let fee = new BN(0);\n  // let nonce = new BN(0);\n\n  // if (args.length > 3 && !!args[4]) {\n  //   fee = new BN(args[4]);\n  // }\n\n  // if (args.length > 4 && !!args[5]) {\n  //   nonce = new BN(args[5]);\n  // }\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  const txVersion = txNetwork.isMainnet() ? TransactionVersion.Mainnet : TransactionVersion.Testnet;\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: txNetwork.coreApiUrl,\n  });\n  const accounts = new AccountsApi(apiConfig);\n\n  const stxAddress = getAddressFromPrivateKey(privateKey, txVersion);\n\n  const balancePromise = accounts.getAccountBalance({\n    principal: stxAddress,\n  });\n\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  const poxInfoPromise = stacker.getPoxInfo();\n\n  const coreInfoPromise = stacker.getCoreInfo();\n\n  const stackingEligiblePromise = stacker.canStack({ poxAddress, cycles });\n\n  return Promise.all([balancePromise, poxInfoPromise, coreInfoPromise, stackingEligiblePromise])\n    .then(([balance, poxInfo, coreInfo, stackingEligible]) => {\n      const minAmount = new BN(poxInfo.min_amount_ustx);\n      const balanceBN = new BN(balance.stx.balance);\n      const burnChainBlockHeight = coreInfo.burn_block_height;\n      const startBurnBlock = burnChainBlockHeight + 3;\n\n      if (minAmount.gt(amount)) {\n        throw new Error(\n          `Stacking amount less than required minimum of ${minAmount.toString()} microstacks`\n        );\n      }\n\n      if (amount.gt(balanceBN)) {\n        throw new Error(\n          `Stacking amount greater than account balance of ${balanceBN.toString()} microstacks`\n        );\n      }\n\n      if (!stackingEligible.eligible) {\n        throw new Error(`Account cannot participate in stacking. ${stackingEligible.reason}`);\n      }\n\n      return stacker.stack({\n        amountMicroStx: amount,\n        poxAddress,\n        cycles,\n        privateKey,\n        burnBlockHeight: startBurnBlock,\n      });\n    })\n    .then((response: TxBroadcastResult) => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${response}`,\n        transaction: generateExplorerTxPageUrl(response as string, txNetwork),\n      };\n    })\n    .catch(error => {\n      return error;\n    });\n}\n\nfunction faucetCall(_: CLINetworkAdapter, args: string[]): Promise<string> {\n  let address = args[0];\n  // console.log(address);\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: 'https://stacks-node-api.blockstack.org',\n  });\n\n  const faucets = new FaucetsApi(apiConfig);\n\n  return faucets\n    .runFaucetStx({ address })\n    .then((faucetTx: any) => {\n      return JSONStringify({\n        txid: faucetTx.txId!,\n        transaction: generateExplorerTxPageUrl(faucetTx.txId!, new StacksTestnet()),\n      });\n    })\n    .catch((error: any) => error.toString());\n}\n\n/* Print out all documentation on usage in JSON\n */\ntype DocsArgsType = {\n  name: string;\n  type: string;\n  value: string;\n  format: string;\n};\n\ntype FormattedDocsType = {\n  command: string;\n  args: DocsArgsType[];\n  usage: string;\n  group: string;\n};\n\nfunction printDocs(_network: CLINetworkAdapter, _args: string[]): Promise<string> {\n  return Promise.resolve().then(() => {\n    const formattedDocs: FormattedDocsType[] = [];\n    const commandNames: string[] = Object.keys(CLI_ARGS.properties);\n    for (let i = 0; i < commandNames.length; i++) {\n      const commandName = commandNames[i];\n      const args: DocsArgsType[] = [];\n      const usage = CLI_ARGS.properties[commandName].help;\n      const group = CLI_ARGS.properties[commandName].group;\n\n      for (let j = 0; j < CLI_ARGS.properties[commandName].items.length; j++) {\n        const argItem = CLI_ARGS.properties[commandName].items[j];\n        args.push({\n          name: argItem.name,\n          type: argItem.type,\n          value: argItem.realtype,\n          format: argItem.pattern ? argItem.pattern : '.+',\n        } as DocsArgsType);\n      }\n\n      formattedDocs.push({\n        command: commandName,\n        args: args,\n        usage: usage,\n        group: group,\n      } as FormattedDocsType);\n    }\n    return JSONStringify(formattedDocs);\n  });\n}\n\ntype CommandFunction = (network: CLINetworkAdapter, args: string[]) => Promise<string | Buffer>;\n\n/*\n * Decrypt a backup phrase\n * args:\n * @p\n/*\n * Global set of commands\n */\nconst COMMANDS: Record<string, CommandFunction> = {\n  authenticator: authDaemon,\n  // 'announce': announce,\n  balance: balance,\n  can_stack: canStack,\n  call_contract_func: contractFunctionCall,\n  call_read_only_contract_func: readOnlyContractFunctionCall,\n  convert_address: addressConvert,\n  decrypt_keychain: decryptMnemonic,\n  deploy_contract: contractDeploy,\n  docs: printDocs,\n  encrypt_keychain: encryptMnemonic,\n  gaia_deletefile: gaiaDeleteFile,\n  gaia_dump_bucket: gaiaDumpBucket,\n  gaia_getfile: gaiaGetFile,\n  gaia_listfiles: gaiaListFiles,\n  gaia_putfile: gaiaPutFile,\n  gaia_restore_bucket: gaiaRestoreBucket,\n  gaia_sethub: gaiaSetHub,\n  get_address: getKeyAddress,\n  get_account_history: getAccountHistory,\n  get_app_keys: getAppKeys,\n  get_owner_keys: getOwnerKeys,\n  get_payment_key: getPaymentKey,\n  get_stacks_wallet_key: getStacksWalletKey,\n  make_keychain: makeKeychain,\n  profile_sign: profileSign,\n  profile_store: profileStore,\n  profile_verify: profileVerify,\n  // 'send_btc': sendBTC,\n  send_tokens: sendTokens,\n  stack: stack,\n  stacking_status: stackingStatus,\n  faucet: faucetCall,\n};\n\n/*\n * CLI main entry point\n */\nexport function CLIMain() {\n  const argv = process.argv;\n  const opts = getCLIOpts(argv);\n\n  const cmdArgs: any = checkArgs(\n    CLIOptAsStringArray(opts, '_') ? CLIOptAsStringArray(opts, '_')! : []\n  );\n  if (!cmdArgs.success) {\n    if (cmdArgs.error) {\n      console.log(cmdArgs.error);\n    }\n    if (cmdArgs.usage) {\n      if (cmdArgs.command) {\n        console.log(makeCommandUsageString(cmdArgs.command));\n        console.log('Use \"help\" to list all commands.');\n      } else {\n        console.log(USAGE);\n        console.log(makeAllCommandsList());\n      }\n    }\n    process.exit(1);\n  } else {\n    txOnly = CLIOptAsBool(opts, 'x');\n    estimateOnly = CLIOptAsBool(opts, 'e');\n    safetyChecks = !CLIOptAsBool(opts, 'U');\n    receiveFeesPeriod = opts['N'] ? parseInt(CLIOptAsString(opts, 'N')!) : receiveFeesPeriod;\n    gracePeriod = opts['G'] ? parseInt(CLIOptAsString(opts, 'N')!) : gracePeriod;\n    maxIDSearchIndex = opts['M'] ? parseInt(CLIOptAsString(opts, 'M')!) : maxIDSearchIndex;\n\n    const debug = CLIOptAsBool(opts, 'd');\n    const consensusHash = CLIOptAsString(opts, 'C');\n    const integration_test = CLIOptAsBool(opts, 'i');\n    const testnet = CLIOptAsBool(opts, 't');\n    const magicBytes = CLIOptAsString(opts, 'm');\n    const apiUrl = CLIOptAsString(opts, 'H');\n    const transactionBroadcasterUrl = CLIOptAsString(opts, 'T');\n    const nodeAPIUrl = CLIOptAsString(opts, 'I');\n    const utxoUrl = CLIOptAsString(opts, 'X');\n    const bitcoindUsername = CLIOptAsString(opts, 'u');\n    const bitcoindPassword = CLIOptAsString(opts, 'p');\n\n    if (integration_test) {\n      BLOCKSTACK_TEST = integration_test;\n    }\n\n    const configPath = CLIOptAsString(opts, 'c')\n      ? CLIOptAsString(opts, 'c')\n      : integration_test\n      ? DEFAULT_CONFIG_REGTEST_PATH\n      : testnet\n      ? DEFAULT_CONFIG_TESTNET_PATH\n      : DEFAULT_CONFIG_PATH;\n\n    const namespaceBurnAddr = CLIOptAsString(opts, 'B');\n    const feeRate = CLIOptAsString(opts, 'F') ? parseInt(CLIOptAsString(opts, 'F')!) : 0;\n    const priceToPay = CLIOptAsString(opts, 'P') ? CLIOptAsString(opts, 'P') : '0';\n    const priceUnits = CLIOptAsString(opts, 'D');\n\n    const networkType = testnet ? 'testnet' : integration_test ? 'regtest' : 'mainnet';\n\n    const configData = loadConfig(configPath!, networkType);\n\n    if (debug) {\n      configData.logConfig.level = 'debug';\n    } else {\n      configData.logConfig.level = 'info';\n    }\n    if (bitcoindUsername) {\n      configData.bitcoindUsername = bitcoindUsername;\n    }\n    if (bitcoindPassword) {\n      configData.bitcoindPassword = bitcoindPassword;\n    }\n\n    if (utxoUrl) {\n      configData.utxoServiceUrl = utxoUrl;\n    }\n\n    winston.configure({\n      level: configData.logConfig.level,\n      transports: [new winston.transports.Console(configData.logConfig)],\n    });\n\n    const cliOpts: CLI_NETWORK_OPTS = {\n      consensusHash: consensusHash ? consensusHash : null,\n      feeRate: feeRate ? feeRate : null,\n      namespaceBurnAddress: namespaceBurnAddr ? namespaceBurnAddr : null,\n      priceToPay: priceToPay ? priceToPay : null,\n      priceUnits: priceUnits ? priceUnits : null,\n      receiveFeesPeriod: receiveFeesPeriod ? receiveFeesPeriod : null,\n      gracePeriod: gracePeriod ? gracePeriod : null,\n      altAPIUrl: apiUrl ? apiUrl : configData.blockstackAPIUrl,\n      altTransactionBroadcasterUrl: transactionBroadcasterUrl\n        ? transactionBroadcasterUrl\n        : configData.broadcastServiceUrl,\n      nodeAPIUrl: nodeAPIUrl ? nodeAPIUrl : configData.blockstackNodeUrl,\n    };\n\n    // wrap command-line options\n    const wrappedNetwork = getNetwork(\n      configData,\n      !!BLOCKSTACK_TEST || !!integration_test || !!testnet\n    );\n    const blockstackNetwork = new CLINetworkAdapter(wrappedNetwork, cliOpts);\n    if (magicBytes) {\n      // blockstackNetwork.MAGIC_BYTES = magicBytes;\n    }\n\n    // blockstack.config.network = blockstackNetwork;\n    blockstack.config.logLevel = 'error';\n\n    if (cmdArgs.command === 'help') {\n      console.log(makeCommandUsageString(cmdArgs.args[0]));\n      process.exit(0);\n    }\n\n    const method = COMMANDS[cmdArgs.command];\n    let exitcode = 0;\n\n    method(blockstackNetwork, cmdArgs.args)\n      .then((result: string | Buffer) => {\n        try {\n          // if this is a JSON object with 'status', set the exit code\n          if (result instanceof Buffer) {\n            return result;\n          } else {\n            const resJson: any = JSON.parse(result);\n            if (resJson.hasOwnProperty('status') && !resJson.status) {\n              exitcode = 1;\n            }\n            return result;\n          }\n        } catch (e) {\n          return result;\n        }\n      })\n      .then((result: string | Buffer) => {\n        if (result instanceof Buffer) {\n          process.stdout.write(result);\n        } else {\n          console.log(result);\n        }\n      })\n      .then(() => {\n        if (!noExit) {\n          process.exit(exitcode);\n        }\n      })\n      .catch((e: Error) => {\n        console.error(e.stack);\n        console.error(e.message);\n        if (!noExit) {\n          process.exit(1);\n        }\n      });\n  }\n}\n"],"names":["c32check","require","txOnly","estimateOnly","safetyChecks","receiveFeesPeriod","gracePeriod","noExit","maxIDSearchIndex","DEFAULT_MAX_ID_SEARCH_INDEX","BLOCKSTACK_TEST","process","getMaxIDSearchIndex","profileSign","network","args","profilePath","profileData","JSON","parse","fs","toString","Promise","resolve","then","makeProfileJWT","profileVerify","publicKeyOrAddress","match","ID_ADDRESS_PATTERN","coerceMainnetAddress","slice","profileString","profileToken","profileTokens","token","e","Error","profile","blockstack","JSONStringify","profileStore","nameOrAddress","signedProfilePath","privateKey","decodePrivateKey","gaiaHubUrl","signedProfileData","ownerAddress","getPrivateKeyAddress","ownerAddressMainnet","nameInfoPromise","name","startsWith","address","getNameInfoEasy","verifyProfilePromise","all","nameInfo","coerceAddress","gaiaUploadProfileAll","gaiaUrls","hasOwnProperty","dataUrls","error","profileUrls","getAppKeys","getBackupPhrase","mnemonic","nameOrIDAddress","origin","getIDAddress","idAddress","getApplicationKeyInfo","networkInfo","getOwnerKeys","maxIndex","length","parseInt","keyInfo","i","getOwnerKeyInfo","push","getPaymentKey","getPaymentKeyInfo","keyObj","getStacksWalletKey","getStacksWalletKeyInfo","makeKeychain","bip39","STX_WALLET_COMPATIBLE_SEED_STRENGTH","crypto","stacksKeyInfo","balance","txNetwork","isMainnet","StacksMainnet","StacksTestnet","coreApiUrl","legacyNetwork","blockstackAPIUrl","fetch","getAccountApiUrl","response","json","balanceHex","substr","lockedHex","locked","unlockHeight","unlock_height","BN","res","nonce","getAccountHistory","c32ToB58","page","getAccountHistoryPage","accountStates","map","s","new_s","b58ToC32","credit_value","debit_value","getAllAccountHistoryPages","results","history","concat","sendTokens","recipientAddress","tokenAmount","fee","memo","options","recipient","amount","senderKey","makeSTXTokenTransfer","tx","estimateTransfer","cost","serialize","broadcastTransaction","txid","transaction","generateExplorerTxPageUrl","contractDeploy","sourceFile","contractName","source","codeBody","postConditionMode","PostConditionMode","Allow","makeContractDeploy","estimateContractDeploy","contractFunctionCall","contractAddress","functionName","functionArgs","getAbi","responseAbi","abi","filtered","functions","filter","fn","abiArgs","makePromptsFromArgList","prompts","prompt","answers","parseClarityFunctionArgAnswers","makeContractCall","validateContractCall","payload","estimateContractFunctionCall","readOnlyContractFunctionCall","senderAddress","callReadOnlyFunction","returnValue","cvToString","getKeyAddress","addr","BTC","STACKS","gaiaGetFile","username","path","appPrivateKey","decrypt","verify","toLowerCase","layer1","bitcoin","gaiaAuth","_userData","app","data","ArrayBuffer","Buffer","from","gaiaPutFile","hubUrl","dataPath","gaiaPath","replace","encrypt","sign","url","urls","gaiaDeleteFile","wasSigned","gaiaListFiles","count","canonicalPrivateKey","console","log","batchify","input","batchSize","output","currentBatch","gaiaDumpBucket","appOrigin","mnemonicOrCiphertext","dumpDir","cwd","mkdirs","downloadFile","hubConfig","fileName","gaiaReadUrl","url_prefix","fileUrl","destPath","resp","status","contentType","headers","get","text","arrayBuffer","filebytes","reject","encoding","mode","fileNames","gaiaHubConfig","ownerPrivateKey","getIDAppKeys","gaiaConnect","fileCount","fileBatches","filePromiseChain","filePromises","batchPromise","gaiaRestoreBucket","fileList","uploadPromise","uploadBatchPromises","filePath","dataBuf","gaiaSetHub","setCoerceMainnetAddress","blockstackID","ownerHubUrl","mnemonicPromise","profilePromise","nameProfile","zonefile","apps","appKeyInfo","ownerKeyIndex","ownerKeyInfo","existingAppAddress","getGaiaAddressFromProfile","extractAppKey","appAddress","ownerGaiaHubPromise","appGaiaHubPromise","ownerHubConfig","appHubConfig","newAppEntry","Object","assign","signedProfile","addressConvert","b58addr","c32addr","testnetb58addr","testnetc32addr","STACKS_ADDRESS_PATTERN","isTestnet","result","mainnet","testnet","undefined","authDaemon","port","profileGaiaHub","authServer","express","use","cors","req","handleAuth","handleSignIn","listen","message","encryptMnemonic","split","passwordPromise","pass","isTTY","errMsg","getpass","pass1","pass2","encryptBackupPhrase","cipherTextBuffer","decryptMnemonic","ciphertext","p","decryptBackupPhrase","stackingStatus","stxAddress","stacker","StackingClient","getStatus","stacked","amount_microstx","details","first_reward_cycle","lock_period","pox_address","version","hashbytes","canStack","cycles","Number","poxAddress","apiConfig","Configuration","fetchApi","crossfetch","basePath","accounts","AccountsApi","balancePromise","getAccountBalance","principal","poxInfoPromise","getPoxInfo","stackingEligiblePromise","poxInfo","stackingEligible","minAmount","min_amount_ustx","balanceBN","stx","gt","eligible","reason","stack","txVersion","TransactionVersion","Mainnet","Testnet","getAddressFromPrivateKey","coreInfoPromise","getCoreInfo","coreInfo","burnChainBlockHeight","burn_block_height","startBurnBlock","amountMicroStx","burnBlockHeight","faucetCall","_","faucets","FaucetsApi","runFaucetStx","faucetTx","txId","printDocs","_network","_args","formattedDocs","commandNames","keys","CLI_ARGS","properties","commandName","usage","help","group","j","items","argItem","type","value","realtype","format","pattern","command","COMMANDS","authenticator","can_stack","call_contract_func","call_read_only_contract_func","convert_address","decrypt_keychain","deploy_contract","docs","encrypt_keychain","gaia_deletefile","gaia_dump_bucket","gaia_getfile","gaia_listfiles","gaia_putfile","gaia_restore_bucket","gaia_sethub","get_address","get_account_history","get_app_keys","get_owner_keys","get_payment_key","get_stacks_wallet_key","make_keychain","profile_sign","profile_store","profile_verify","send_tokens","stacking_status","faucet","CLIMain","argv","opts","getCLIOpts","cmdArgs","checkArgs","CLIOptAsStringArray","success","makeCommandUsageString","USAGE","makeAllCommandsList","CLIOptAsBool","CLIOptAsString","debug","consensusHash","integration_test","magicBytes","apiUrl","transactionBroadcasterUrl","nodeAPIUrl","utxoUrl","bitcoindUsername","bitcoindPassword","configPath","DEFAULT_CONFIG_REGTEST_PATH","DEFAULT_CONFIG_TESTNET_PATH","DEFAULT_CONFIG_PATH","namespaceBurnAddr","feeRate","priceToPay","priceUnits","networkType","configData","loadConfig","logConfig","level","utxoServiceUrl","winston","transports","Console","cliOpts","namespaceBurnAddress","altAPIUrl","altTransactionBroadcasterUrl","broadcastServiceUrl","blockstackNodeUrl","wrappedNetwork","getNetwork","blockstackNetwork","CLINetworkAdapter","logLevel","method","exitcode","resJson","write"],"mappings":"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"}