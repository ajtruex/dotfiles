{"version":3,"file":"argparse.esm.js","sources":["../src/argparse.ts"],"sourcesContent":["import Ajv from 'ajv';\nimport * as process from 'process';\nimport * as fs from 'fs';\n\nexport const NAME_PATTERN = '^([0-9a-z_.+-]{3,37})$';\n\nexport const NAMESPACE_PATTERN = '^([0-9a-z_-]{1,19})$';\n\nexport const ADDRESS_CHARS = '[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{1,35}';\n\nexport const C32_ADDRESS_CHARS = '[0123456789ABCDEFGHJKMNPQRSTVWXYZ]+';\n\nexport const ADDRESS_PATTERN = `^(${ADDRESS_CHARS})$`;\n\nexport const ID_ADDRESS_PATTERN = `^ID-${ADDRESS_CHARS}$`;\n\nexport const STACKS_ADDRESS_PATTERN = `^(${C32_ADDRESS_CHARS})$`;\n\n// hex private key\nexport const PRIVATE_KEY_PATTERN = '^([0-9a-f]{64,66})$';\n\n// hex private key, no compression\nexport const PRIVATE_KEY_UNCOMPRESSED_PATTERN = '^([0-9a-f]{64})$';\n\n// nosign:addr\nexport const PRIVATE_KEY_NOSIGN_PATTERN = `^nosign:${ADDRESS_CHARS}$`;\n\n// m,pk1,pk2,...,pkn\nexport const PRIVATE_KEY_MULTISIG_PATTERN = '^([0-9]+),([0-9a-f]{64,66},)*([0-9a-f]{64,66})$';\n\n// segwit:p2sh:m,pk1,pk2,...,pkn\nexport const PRIVATE_KEY_SEGWIT_P2SH_PATTERN =\n  '^segwit:p2sh:([0-9]+),([0-9a-f]{64,66},)*([0-9a-f]{64,66})$';\n\n// any private key pattern we support\nexport const PRIVATE_KEY_PATTERN_ANY = `${PRIVATE_KEY_PATTERN}|${PRIVATE_KEY_MULTISIG_PATTERN}|${PRIVATE_KEY_SEGWIT_P2SH_PATTERN}|${PRIVATE_KEY_NOSIGN_PATTERN}`;\n\nexport const PUBLIC_KEY_PATTERN = '^([0-9a-f]{66,130})$';\n\nexport const INT_PATTERN = '^-?[0-9]+$';\n\nexport const ZONEFILE_HASH_PATTERN = '^([0-9a-f]{40})$';\n\nexport const URL_PATTERN = '^http[s]?://.+$';\n\nexport const SUBDOMAIN_PATTERN = '^([0-9a-z_+-]{1,37}).([0-9a-z_.+-]{3,37})$';\n\nexport const TXID_PATTERN = '^([0-9a-f]{64})$';\n\nexport const BOOLEAN_PATTERN = '^(0|1|true|false)$';\n\nexport interface CLI_LOG_CONFIG_TYPE {\n  level: string;\n  handleExceptions: boolean;\n  timestamp: boolean;\n  stringify: boolean;\n  colorize: boolean;\n  json: boolean;\n}\n\nexport interface CLI_CONFIG_TYPE {\n  blockstackAPIUrl: string;\n  blockstackNodeUrl: string;\n  broadcastServiceUrl: string;\n  utxoServiceUrl: string;\n  logConfig: CLI_LOG_CONFIG_TYPE;\n  bitcoindUsername?: string;\n  bitcoindPassword?: string;\n}\n\nconst LOG_CONFIG_DEFAULTS: CLI_LOG_CONFIG_TYPE = {\n  level: 'info',\n  handleExceptions: true,\n  timestamp: true,\n  stringify: true,\n  colorize: true,\n  json: true,\n};\n\nconst CONFIG_DEFAULTS: CLI_CONFIG_TYPE = {\n  blockstackAPIUrl: 'http://stacks-node-api.stacks.co',\n  blockstackNodeUrl: 'http://stacks-node-api.stacks.co',\n  broadcastServiceUrl: 'http://stacks-node-api.stacks.co/v2/transactions',\n  utxoServiceUrl: 'https://blockchain.info',\n  logConfig: LOG_CONFIG_DEFAULTS,\n};\n\nconst CONFIG_REGTEST_DEFAULTS: CLI_CONFIG_TYPE = {\n  blockstackAPIUrl: 'http://localhost:16268',\n  blockstackNodeUrl: 'http://localhost:16264',\n  broadcastServiceUrl: 'http://localhost:16269',\n  utxoServiceUrl: 'http://localhost:18332',\n  logConfig: LOG_CONFIG_DEFAULTS,\n  bitcoindPassword: 'blockstacksystem',\n  bitcoindUsername: 'blockstack',\n};\n\nconst PUBLIC_TESTNET_HOST = 'testnet-master.blockstack.org';\n\nconst CONFIG_TESTNET_DEFAULTS = {\n  blockstackAPIUrl: `http://${PUBLIC_TESTNET_HOST}:20443`,\n  blockstackNodeUrl: `http://${PUBLIC_TESTNET_HOST}:20443`,\n  broadcastServiceUrl: `http://${PUBLIC_TESTNET_HOST}:20443/v2/transactions`,\n  utxoServiceUrl: `http://${PUBLIC_TESTNET_HOST}:18332`,\n  logConfig: Object.assign({}, LOG_CONFIG_DEFAULTS, { level: 'debug' }),\n};\n\nexport const DEFAULT_CONFIG_PATH = '~/.blockstack-cli.conf';\nexport const DEFAULT_CONFIG_REGTEST_PATH = '~/.blockstack-cli-regtest.conf';\nexport const DEFAULT_CONFIG_TESTNET_PATH = '~/.blockstack-cli-testnet.conf';\n\nexport const DEFAULT_MAX_ID_SEARCH_INDEX = 256;\n\ninterface CLI_PROP_ITEM {\n  name: string;\n  type: 'string';\n  realtype: string;\n  pattern?: string;\n}\n\ninterface CLI_PROP {\n  [index: string]: {\n    type: 'array';\n    items: CLI_PROP_ITEM[];\n    minItems: number;\n    maxItems: number;\n    help: string;\n    group: string;\n  };\n}\n\n// CLI usage\nexport const CLI_ARGS = {\n  type: 'object',\n  properties: {\n    announce: {\n      type: 'array',\n      items: [\n        {\n          name: 'message_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Broadcast a message on the blockchain for subscribers to read.  ' +\n        'The `MESSAGE_HASH` argument must be the hash of a previously-announced zone file.  ' +\n        'The `OWNER_KEY` used to sign the transaction must correspond to the Blockstack ID ' +\n        'to which other users have already subscribed.  `OWNER_KEY` can be a single private key ' +\n        'or a serialized multisig private key bundle.\\n' +\n        '\\n' +\n        'If this command succeeds, it will print a transaction ID.  The rest of the Blockstack peer ' +\n        'network will process it once the transaction reaches 7 confirmations.\\n' +\n        '\\n' +\n        'Examples:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the owner key with the get_owner_keys command\\n' +\n        '    $ export OWNER_KEY=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ stx announce 737c631c7c5d911c6617993c21fba731363f1cfe \"$OWNER_KEY\"\\n' +\n        '    d51749aeec2803e91a2f8bdec8d3e413491fd816b4962372b214ab74acb0bba8\\n' +\n        '\\n' +\n        '    $ export OWNER_KEY=\"2,136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01,1885cba486a42960499d1f137ef3a475725ceb11f45d74631f9928280196f67401,2418981c7f3a91d4467a65a518e14fafa30e07e6879c11fab7106ea72b49a7cb01\"\\n' +\n        '    $ stx announce 737c631c7c5d911c6617993c21fba731363f1cfe \"$OWNER_KEY\"\\n' +\n        '    8136a1114098893b28a693e8d84451abf99ee37ef8766f4bc59808eed76968c9\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    authenticator: {\n      type: 'array',\n      items: [\n        {\n          name: 'app_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n          pattern: '.+',\n        },\n        {\n          name: 'profile_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'port',\n          type: 'string',\n          realtype: 'portnum',\n          pattern: '^[0-9]+',\n        },\n      ],\n      minItems: 2,\n      maxItems: 4,\n      help:\n        'Run an authentication endpoint for the set of names owned ' +\n        'by the given backup phrase.  Send applications the given Gaia hub URL on sign-in, ' +\n        'so the application will use it to read/write user data.\\n' +\n        '\\n' +\n        'You can supply your encrypted backup phrase instead of the raw backup phrase.  If so, ' +\n        'then you will be prompted for your password before any authentication takes place.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"oak indicate inside poet please share dinner monitor glow hire source perfect\"\\n' +\n        '    $ export APP_GAIA_HUB=\"https://1.2.3.4\"\\n' +\n        '    $ export PROFILE_GAIA_HUB=\"https://hub.blockstack.org\"\\n' +\n        '    $ stx authenticator \"$APP_GAIA_HUB\" \"$BACKUP_PHRASE\" \"$PROFILE_GAIA_HUB\" 8888\\n' +\n        '    Press Ctrl+C to exit\\n' +\n        '    Authentication server started on 8888\\n',\n      group: 'Authentication',\n    },\n    balance: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Query the balance of an account.  Returns the balances of each kind of token ' +\n        'that the account owns.  The balances will be in the *smallest possible units* of the ' +\n        'token (i.e. satoshis for BTC, microStacks for Stacks, etc.).\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx balance 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"123456\"\\n' +\n        '      \"STACKS\": \"123456\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"123456\"\\n' +\n        '      \"STACKS\": \"123456\"\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    can_stack: {\n      type: 'array',\n      items: [\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'cycles',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'stx_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Check if specified account can stack a number of Stacks tokens for given number of cycles.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx can_stack 10000000 20 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4 SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n' +\n        '    {\\n' +\n        '      \"eligible\": true\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    call_contract_func: {\n      type: 'array',\n      items: [\n        {\n          name: 'contract_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'function_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_!?])*$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 6,\n      maxItems: 6,\n      help:\n        'Call a function in a deployed Clarity smart contract.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx call_contract_func SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X contract_name' +\n        '      contract_function 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    call_read_only_contract_func: {\n      type: 'array',\n      items: [\n        {\n          name: 'contract_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'function_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_!?])*$',\n        },\n        {\n          name: 'sender_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Call a read-only function in a deployed Clarity smart contract.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a Clarity value.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ stx call_read_only_contract_func SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X contract_name' +\n        '     contract_function SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    convert_address: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Convert a Bitcoin address to a Stacks address and vice versa.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx convert_address 12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\",\\n' +\n        '      \"BTC\": \"12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\"\\n' +\n        '    }\\n' +\n        '    $ stx convert_address SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\",\\n' +\n        '      \"BTC\": \"12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\"\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    decrypt_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'encrypted_backup_phrase',\n          type: 'string',\n          realtype: 'encrypted_backup_phrase',\n          pattern: '^[^ ]+$',\n        },\n        {\n          name: 'password',\n          type: 'string',\n          realtype: 'password',\n          pattern: '.+',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Decrypt an encrypted backup phrase with a password.  Decrypts to a 12-word ' +\n        'backup phrase if done correctly.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # password is \"asdf\"\\n' +\n        '    $ stx decrypt_keychain \"bfMDtOucUGcJXjZo6vkrZWgEzue9fzPsZ7A6Pl4LQuxLI1xsVF0VPgBkMsnSLCmYS5YHh7R3mNtMmX45Bq9sNGPfPsseQMR0fD9XaHi+tBg=\\n' +\n        '    Enter password:\\n' +\n        '    section amount spend resemble spray verify night immune tattoo best emotion parrot',\n      group: 'Key Management',\n    },\n    deploy_contract: {\n      type: 'array',\n      items: [\n        {\n          name: 'source_file',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Deploys a Clarity smart contract on the network.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx deploy_contract ./my_contract.clar my_contract 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    docs: {\n      type: 'array',\n      items: [\n        {\n          name: 'format',\n          type: 'string',\n          realtype: 'output_format',\n          pattern: '^json$',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help: 'Dump the documentation for all commands as JSON to standard out.',\n      group: 'CLI',\n    },\n    encrypt_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: 'backup_phrase',\n          pattern: '.+',\n        },\n        {\n          name: 'password',\n          type: 'string',\n          realtype: 'password',\n          pattern: '.+',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Encrypt a 12-word backup phrase, which can be decrypted later with the ' +\n        '`decrypt_backup_phrase` command.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ # password is \"asdf\"\\n' +\n        '     $ stx encrypt_keychain \"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '     Enter password:\\n' +\n        '     Enter password again:\\n' +\n        '     M+DnBHYb1fgw4N3oZ+5uTEAua5bAWkgTW/SjmmBhGGbJtjOtqVV+RrLJEJOgT35hBon4WKdGWye2vTdgqDo7+HIobwJwkQtN2YF9g3zPsKk=',\n      group: 'Key Management',\n    },\n    faucet: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Encrypt a 12-word backup phrase, which can be decrypted later with the ' +\n        '`decrypt_backup_phrase` command.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ # password is \"asdf\"\\n' +\n        '     $ blockstack-cli encrypt_keychain \"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '     Enter password:\\n' +\n        '     Enter password again:\\n' +\n        '     M+DnBHYb1fgw4N3oZ+5uTEAua5bAWkgTW/SjmmBhGGbJtjOtqVV+RrLJEJOgT35hBon4WKdGWye2vTdgqDo7+HIobwJwkQtN2YF9g3zPsKk=',\n      group: 'Key Management',\n    },\n    gaia_dump_bucket: {\n      type: 'array',\n      items: [\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name_or_id_address',\n          pattern: `${ID_ADDRESS_PATTERN}|${NAME_PATTERN}|${SUBDOMAIN_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'dump_dir',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Download the contents of a Gaia hub bucket to a given directory.  The `GAIA_HUB` argument ' +\n        'must correspond to the *write* endpoint of the Gaia hub -- that is, you should be able to fetch ' +\n        '`$GAIA_HUB/hub_info`.  If `DUMP_DIR` does not exist, it will be created.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"section amount spend resemble spray verify night immune tattoo best emotion parrot\\n' +\n        '    $ stx gaia_dump_bucket hello.id.blockstack https://sample.app https://hub.blockstack.org \"$BACKUP_PHRASE\" ./backups\\n' +\n        '    Download 3 files...\\n' +\n        '    Download hello_world to ./backups/hello_world\\n' +\n        '    Download dir/format to ./backups/dir\\\\x2fformat\\n' +\n        '    Download /.dotfile to ./backups/\\\\x2f.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_getfile: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'decrypt',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n        {\n          name: 'verify',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 6,\n      help:\n        \"Get a file from another user's Gaia hub.  Prints the file data to stdout.  If you \" +\n        'want to read an encrypted file, and/or verify a signed file, then you must pass an app ' +\n        'private key, and pass 1 for `DECRYPT` and/or `VERIFY`.  If the file is encrypted, and you do not ' +\n        'pass an app private key, then this command downloads the ciphertext.  If the file is signed, ' +\n        'and you want to download its data and its signature, then you must run this command twice -- ' +\n        'once to get the file contents at `FILENAME`, and once to get the signature (whose name will be `FILENAME`.sig).\\n' +\n        '\\n' +\n        'Gaia is a key-value store, so it does not have any built-in notion of directories.  However, ' +\n        'most underlying storage systems do -- directory separators in the name of a file in ' +\n        \"Gaia may be internally treated as first-class directories (it depends on the Gaia hub's driver).\" +\n        'As such, repeated directory separators will be treated as a single directory separator by this command.  ' +\n        'For example, the file name `a/b.txt`, `/a/b.txt`, and `///a////b.txt` will be treated as identical.\\n' +\n        '\\n' +\n        'Example without encryption:\\n' +\n        '\\n' +\n        '    $ # Get an unencrypted, unsigned file\\n' +\n        '    $ stx gaia_getfile ryan.id http://public.ykliao.com statuses.json\\n' +\n        '    [{\"id\":0,\"text\":\"Hello, Blockstack!\",\"created_at\":1515786983492}]\\n' +\n        '\\n' +\n        'Example with encryption:\\n' +\n        '\\n' +\n        '    $ # Get an encrypted file without decrypting\\n' +\n        '    $ stx gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json\\n' +\n        '    ' +\n        '    $ # Get an encrypted file, and decrypt it\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json \"$APP_KEY\" 1 0\\n',\n      group: 'Gaia',\n    },\n    gaia_putfile: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'data_path',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'gaia_filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'encrypt',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n        {\n          name: 'sign',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Put a file into a given Gaia hub, authenticating with the given app private key.  ' +\n        'Optionally encrypt and/or sign the data with the given app private key.  If the file is ' +\n        'successfully stored, this command prints out the URLs at which it can be fetched.\\n' +\n        '\\n' +\n        'Gaia is a key-value store, so it does not have any built-in notion of directories.  However, ' +\n        'most underlying storage systems do -- directory separators in the name of a file in ' +\n        \"Gaia may be internally treated as first-class directories (it depends on the Gaia hub's driver).\" +\n        'As such, repeated directory separators will be treated as a single directory separator by this command.  ' +\n        'For example, the file name `a/b.txt`, `/a/b.txt`, and `///a////b.txt` will be treated as identical.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Store 4 versions of a file: plaintext, encrypted, signed, and encrypted+signed\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file.txt\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-encrypted.txt 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-signed.txt 0 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-signed.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-encrypted-signed.txt 1 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted-signed.txt\"\\n' +\n        '    }\\n',\n      group: 'Gaia',\n    },\n    gaia_deletefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'gaia_filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'was_signed',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 4,\n      help:\n        'Delete a file in a Gaia hub, as well as its signature metadata (which is stored in a separate file).' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_deletefile https://hub.blockstack.org \"$APP_KEY\" file.txt false\\n' +\n        '    ok',\n      group: 'Gaia',\n    },\n    gaia_listfiles: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n      ],\n      minItems: 2,\n      maxItems: 3,\n      help:\n        'List all the files in a Gaia hub bucket.  You must have the private key for the bucket ' +\n        'in order to list its contents.  The command prints each file name on its own line, and when ' +\n        'finished, it prints the number of files listed.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_listfiles \"https://hub.blockstack.org\" \"$APP_KEY\"\\n' +\n        '    hello_world\\n' +\n        '    dir/format\\n' +\n        '    /.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_restore_bucket: {\n      type: 'array',\n      items: [\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name_or_id_address',\n          pattern: `${ID_ADDRESS_PATTERN}|${NAME_PATTERN}|${SUBDOMAIN_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'dump_dir',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Upload the contents of a previously-dumped Gaia bucket to a new Gaia hub.  The `GAIA_HUB` argument ' +\n        'must correspond to the *write* endpoint of the Gaia hub -- that is, you should be able to fetch ' +\n        '`$GAIA_HUB/hub_info`.  `DUMP_DIR` must contain the file contents created by a previous successful run of the gaia_dump_bucket command, ' +\n        'and both `NAME_OR_ID_ADDRESS` and `APP_ORIGIN` must be the same as they were when it was run.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '    $ stx gaia_restore_bucket hello.id.blockstack https://sample.app https://new.gaia.hub \"$BACKUP_PHRASE\" ./backups\\n' +\n        '    Uploaded ./backups/hello_world to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/hello_world\\n' +\n        '    Uploaded ./backups/dir\\\\x2fformat to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/dir/format\\n' +\n        '    Uploaded ./backups/\\\\x2f.dotfile to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc//.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_sethub: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'owner_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Set the Gaia hub for a particular application for a Blockstack ID.  If the command succeeds, ' +\n        'the URLs to your updated profile will be printed and your profile will contain an entry in its \"apps\" ' +\n        'key that links the given `APP_ORIGIN` to the given `APP_GAIA_HUB`.\\n' +\n        '\\n' +\n        'NOTE: Both `OWNER_GAIA_HUB` and `APP_GAIA_HUB` must be the *write* endpoints of their respective Gaia hubs.\\n' +\n        '\\n' +\n        'Your 12-word phrase (in either raw or encrypted form) is required to re-sign and store your ' +\n        'profile and to generate an app-specific key and Gaia bucket.  If you give the encrypted backup phrase, you will be prompted for a password.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    $ stx gaia_sethub hello_world.id https://hub.blockstack.org https://my.cool.app https://my.app.gaia.hub \"$BACKUP_PHRASE\"\\n' +\n        '    {\\n' +\n        '      \"profileUrls\": {\\n' +\n        '        \"error\": null,\\n' +\n        '        \"dataUrls\": [\\n' +\n        '          \"https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\"\\n' +\n        '        ]\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '    \\n' +\n        '    $ # You can check the new apps entry with curl and jq as follows:\\n' +\n        '    $ curl -sL https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json | jq \".[0].decodedToken.payload.claim.apps\"\\n' +\n        '    {\\n' +\n        '      \"https://my.cool.app\": \"https://my.app.gaia.hub/hub/1EqzyQLJ15KG1WQmi5cf1HtmSeqS1Wb8tY/\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Gaia',\n    },\n    get_account_history: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'page',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Query the history of account debits and credits over a given block range.  ' +\n        'Returns the history one page at a time.  An empty result indicates that the page ' +\n        'number has exceeded the number of historic operations in the given block range.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_account_history SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA 0\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56789\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"0\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"0e5db84d94adff5b771262b9df015164703b39bb4a70bf499a1602b858a0a5a1\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 0\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56790,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"64000000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"5a0c67144626f7bd4514e4de3f3bbf251383ca13887444f326bac4bc8b8060ee\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 1\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56791,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"70400000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"e54c271d6a9feb4d1859d32bc99ffd713493282adef5b4fbf50bca9e33fc0ecc\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 2\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56792,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"76800000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"06e0d313261baefec1e59783e256ab487e17e0e776e2fdab0920cc624537e3c8\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 3\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    get_account_at: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'blocknumber',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Query the list of token debits and credits on a given address that occurred ' +\n        'at a particular block height.  Does not include BTC debits and credits; only Stacks.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx -t get_account_at SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ 56789\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"debit_value\": \"0\",\\n' +\n        '        \"block_id\": 56789\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"291817c78a865c1f72938695218a48174265b2358e89b9448edc89ceefd66aa0\",\\n' +\n        '        \"address\": \"SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ\",\\n' +\n        '        \"credit_value\": \"1000000000000000000\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    get_address: {\n      type: 'array',\n      items: [\n        {\n          name: 'private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the address of a private key or multisig private key bundle.  Gives the BTC and STACKS addresses\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_address f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"1JFhWyVPpZQjbPcXFtpGtTmU22u4fhBVmq\",\\n' +\n        '      \"STACKS\": \"SP2YM3J4KQK09V670TD6ZZ1XYNYCNGCWCVVKSDFWQ\"\\n' +\n        '    }\\n' +\n        '    $ stx get_address 1,f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01,ff2ff4f4e7f8a1979ffad4fc869def1657fd5d48fc9cf40c1924725ead60942c01\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"363pKBhc5ipDws1k5181KFf6RSxhBZ7e3p\",\\n' +\n        '      \"STACKS\": \"SMQWZ30EXVG6XEC1K4QTDP16C1CAWSK1JSWMS0QN\"\\n' +\n        '    }',\n      group: 'Key Management',\n    },\n    get_blockchain_record: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the low-level blockchain-hosted state for a Blockstack ID.  This command ' +\n        'is used mainly for debugging and diagnostics.  You should not rely on it to be stable.',\n      group: 'Querying Blockstack IDs',\n    },\n    get_blockchain_history: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'page',\n          type: 'string',\n          realtype: 'page_number',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Get the low-level blockchain-hosted history of operations on a Blockstack ID.  ' +\n        'This command is used mainly for debugging and diagnostics, and is not guaranteed to ' +\n        'be stable across releases.',\n      group: 'Querying Blockstack IDs',\n    },\n    get_confirmations: {\n      type: 'array',\n      items: [\n        {\n          name: 'txid',\n          type: 'string',\n          realtype: 'transaction_id',\n          pattern: TXID_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the block height and number of confirmations for a transaction.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    get_namespace_blockchain_record: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the low-level blockchain-hosted state for a Blockstack namespace.  This command ' +\n        'is used mainly for debugging and diagnostics, and is not guaranteed to be stable across ' +\n        'releases.',\n      group: 'Namespace Operations',\n    },\n    get_app_keys: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name-or-id-address',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}|${ID_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Get the application private key from a 12-word backup phrase and a name or ID-address.  ' +\n        'This is the private key used to sign data in Gaia, and its address is the Gaia bucket ' +\n        'address.  If you provide your encrypted backup phrase, you will be asked to decrypt it.  ' +\n        'If you provide a name instead of an ID-address, its ID-address will be queried automatically ' +\n        '(note that this means that the name must already be registered).\\n' +\n        '\\n' +\n        'NOTE: This command does NOT verify whether or not the name or ID-address was created by the ' +\n        'backup phrase. You should do this yourself via the `get_owner_keys` command if you are not sure.\\n' +\n        '\\n' +\n        'There are two derivation paths emitted by this command:  a `keyInfo` path and a `legacyKeyInfo`' +\n        \"path.  You should use the one that matches the Gaia hub read URL's address, if you have already \" +\n        'signed in before.  If not, then you should use the `keyInfo` path when possible.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"one race buffalo dynamic icon drip width lake extra forest fee kit\"\\n' +\n        '    $ stx get_app_keys \"$BACKUP_PHRASE\" example.id.blockstack https://my.cool.dapp\\n' +\n        '    {\\n' +\n        '      \"keyInfo\": {\\n' +\n        '        \"privateKey\": \"TODO\",\\n' +\n        '        \"address\": \"TODO\"\\n' +\n        '      },\\n' +\n        '      \"legacyKeyInfo\": {\\n' +\n        '        \"privateKey\": \"90f9ec4e13fb9a00243b4c1510075157229bda73076c7c721208c2edca28ea8b\",\\n' +\n        '        \"address\": \"1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc\"\\n' +\n        '      },\\n' +\n        '      \"ownerKeyIndex\": 0\\n' +\n        '    }',\n      group: 'Key Management',\n    },\n    get_owner_keys: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'index',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Get the list of owner private keys and ID-addresses from a 12-word backup phrase.  ' +\n        'Pass non-zero values for INDEX to generate the sequence of ID-addresses that can be used ' +\n        'to own Blockstack IDs.  If you provide an encrypted 12-word backup phrase, you will be ' +\n        'asked for your password to decrypt it.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the first 3 owner keys and addresses for a backup phrase\\n' +\n        '    $ export BACKUP_PHRASE=\"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    $ stx get_owner_keys \"$BACKUP_PHRASE\" 3\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"14b0811d5cd3486d47279d8f3a97008647c64586b121e99862c18863e2a4183501\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 0,\\n' +\n        '        \"idAddress\": \"ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82\"\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"1b3572d8dd6866828281ac6cf135f04153210c1f9b123743eccb795fd3095e4901\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 1,\\n' +\n        '        \"idAddress\": \"ID-18pR3UpD1KFrnk88a3MGZmG2dLuZmbJZ25\"\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"b19b6d62356db96d570fb5f08b78f0aa7f384525ba3bdcb96fbde29b8e11710d01\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 2,\\n' +\n        '        \"idAddress\": \"ID-1Gx4s7ggkjENw3wSY6bNd1CwoQKk857AqN\"\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_payment_key: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the payment private key from a 12-word backup phrase.  If you provide an ' +\n        'encrypted backup phrase, you will be asked for your password to decrypt it.  This command ' +\n        'will tell you your Bitcoin and Stacks token addresses as well.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx get_payment_key \"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"4023435e33da4aff0775f33e7b258f257fb20ecff039c919b5782313ab73afb401\",\\n' +\n        '        \"address\": {\\n' +\n        '          \"BTC\": \"1ybaP1gaRwRSWRE4f8JXo2W8fiTZmA4rV\",\\n' +\n        '          \"STACKS\": \"SP5B89ZJAQHBRXVYP15YB5PAY5E24FEW9K4Q63PE\"\\n' +\n        '        },\\n' +\n        '        \"index\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_stacks_wallet_key: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '24_words_or_ciphertext',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the payment private key from a 24-word backup phrase used by the Stacks wallet.  If you provide an ' +\n        'encrypted backup phrase, you will be asked for your password to decrypt it.  This command ' +\n        'will tell you your Bitcoin and Stacks token addresses as well.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx get_stacks_payment_key \"toast canal educate tissue express melody produce later gospel victory meadow outdoor hollow catch liberty annual gasp hat hello april equip thank neck cruise\"\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"a25cea8d310ce656c6d427068c77bad58327334f73e39c296508b06589bc4fa201\",\\n' +\n        '        \"address\": {\\n' +\n        '          \"BTC\": \"1ATAW6TAbTCKgU3xPgAcWQwjW9Q26Eambx\",\\n' +\n        '          \"STACKS\": \"SP1KTQR7CTQNA20SV2VNTF9YABMR6RJERSES3KC6Z\"\\n' +\n        '        },\\n' +\n        '        \"index\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_zonefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get a zone file by hash.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_zonefile ee77ad484b7b229f09461e4c2b6d3bd3e152ba95\\n' +\n        '    $ORIGIN ryanshea.id\\n' +\n        '    $TTL 3600\\n' +\n        '    _http._tcp URI 10 1 \"https://gaia.blockstack.org/hub/15BcxePn59Y6mYD2fRLCLCaaHScefqW2No/1/profile.json\"\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    help: {\n      type: 'array',\n      items: [\n        {\n          name: 'command',\n          type: 'string',\n          realtype: 'command',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help: 'Get the usage string for a CLI command',\n      group: 'CLI',\n    },\n    lookup: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get and authenticate the profile and zone file for a Blockstack ID.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx lookup example.id\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    names: {\n      type: 'array',\n      items: [\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the list of Blockstack IDs owned by an ID-address.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx names ID-1FpBChfzHG3TdQQRKWAipbLragCUArueG9\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    make_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help:\n        'Generate the owner and payment private keys, optionally from a given 12-word ' +\n        'backup phrase.  If no backup phrase is given, a new one will be generated.  If you provide ' +\n        'your encrypted backup phrase, you will be asked to decrypt it.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx make_keychain\\n' +\n        '    {\\n' +\n        '      \"mnemonic\": \"apart spin rich leader siren foil dish sausage fee pipe ethics bundle\",\\n' +\n        '      \"keyInfo\": {\\n' +\n        '        \"address\": \"SP3G19B6J50FH6JGXAKS06N6WA1XPJCKKM4JCHC2D\"\\n' +\n        '        \"index\": 0,\\n' +\n        '        \"privateKey\": \"56d30f2b605ed114c7dc45599ae521c525d07e1286fbab67452a6586ea49332a01\"\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    make_zonefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'ID-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n        {\n          name: 'resolver_url',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n      ],\n      minItems: 3,\n      maxItems: 4,\n      help:\n        'Generate a zone file for a Blockstack ID with the given profile URL.  If you know ' +\n        'the ID-address for the Blockstack ID, the profile URL usually takes the form of:\\n' +\n        '\\n' +\n        '     {GAIA_URL_PREFIX}/{ADDRESS}/profile.json\\n' +\n        '\\n' +\n        'where `{GAIA_URL_PREFIX}` is the *read* endpoint of your Gaia hub (e.g. https://gaia.blockstack.org/hub) and ' +\n        \"`{ADDRESS}` is the base58check part of your ID-address (i.e. the string following 'ID-').\\n\" +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ stx make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub\\n' +\n        '     $ORIGIN example.id\\n' +\n        '     $TTL 3600\\n' +\n        '     _http._tcp      IN      URI     10      1       \"https://my.gaia.hub/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\"\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    name_import: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n        {\n          name: 'reveal_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Import a name into a namespace you revealed.  The `REVEAL_KEY` must be the same as ' +\n        'the key that revealed the namespace.  You can only import a name into a namespace if ' +\n        'the namespace has not yet been launched (i.e. via `namespace_ready`), and if the ' +\n        'namespace was revealed less than a year ago (52595 blocks ago).\\n' +\n        '\\n' +\n        'A zone file will be generated for this name automatically, if \"ZONEFILE\" is not given.  By default, ' +\n        \"the zone file will have a URL to the name owner's profile prefixed by `GAIA_URL_PREFIX`.  If you \" +\n        \"know the *write* endpoint for the name owner's Gaia hub, you can find out the `GAIA_URL_PREFIX` \" +\n        'to use with `curl $GAIA_HUB/hub_info`\".\\n' +\n        '\\n' +\n        'If you specify an argument for `ZONEFILE`, then the `GAIA_URL_PREFIX` argument is ignored in favor of ' +\n        'your custom zone file on disk.\\n' +\n        '\\n' +\n        'If you specify a valid zone file hash for `ZONEFILE_HASH` then it will be used in favor of ' +\n        'both `ZONEFILE` and `GAIA_URL_PREFIX`.  The zone file hash will be incorporated directly into the ' +\n        'name-import transaction.\\n' +\n        '\\n' +\n        'This command prints out a transaction ID if it succeeds, and it replicates the zone file (if given) ' +\n        'to a transaction broadcaster (you can choose which one with -T).  The zone file will be automatically ' +\n        'broadcast to the Blockstack peer network when the transaction confirms.  Alternatively, you can do so ' +\n        'yourself with the `zonefile_push` command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export REVEAL_KEY=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ export ID_ADDRESS=\"ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV\"\\n' +\n        '    $ stx name_import example.id \"$ID_ADDRESS\" https://gaia.blockstack.org/hub \"$REVEAL_KEY\"\\n' +\n        '    f726309cea7a9db364307466dc0e0e759d5c0d6bad1405e2fd970740adc7dc45\\n' +\n        '\\n',\n      group: 'Namespace Operations',\n    },\n    namespace_preorder: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Preorder a namespace.  This is the first of three steps to creating a namespace.  ' +\n        'Once this transaction is confirmed, you will need to use the `namespace_reveal` command ' +\n        'to reveal the namespace (within 24 hours, or 144 blocks).',\n      group: 'Namespace Operations',\n    },\n    namespace_reveal: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          // version\n          name: 'version',\n          type: 'string',\n          realtype: '2-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // lifetime\n          name: 'lifetime',\n          type: 'string',\n          realtype: '4-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // coeff\n          name: 'coefficient',\n          type: 'string',\n          realtype: '1-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // base\n          name: 'base',\n          type: 'string',\n          realtype: '1-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // buckets\n          name: 'price_buckets',\n          type: 'string',\n          realtype: 'csv-of-16-nybbles',\n          pattern: '^([0-9]{1,2},){15}[0-9]{1,2}$',\n        },\n        {\n          // non-alpha discount\n          name: 'nonalpha_discount',\n          type: 'string',\n          realtype: 'nybble',\n          pattern: INT_PATTERN,\n        },\n        {\n          // no-vowel discount\n          name: 'no_vowel_discount',\n          type: 'string',\n          realtype: 'nybble',\n          pattern: INT_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 10,\n      maxItems: 10,\n      help:\n        'Reveal a preordered namespace, and set the price curve and payment options.  ' +\n        'This is the second of three steps required to create a namespace, and must be done ' +\n        'shortly after the associated `namespace_preorder` command.',\n      group: 'Namespace Operations',\n    },\n    namespace_ready: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Launch a revealed namespace.  This is the third and final step of creating a namespace.  ' +\n        'Once launched, you will not be able to import names anymore.',\n      group: 'Namespace Operations',\n    },\n    price: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the price of an on-chain Blockstack ID.  Its namespace must already exist.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx price example.id\\n' +\n        '    {\\n' +\n        '      \"units\": \"BTC\",\\n' +\n        '      \"amount\": \"5500\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    price_namespace: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the price of a namespace.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the price of the .hello namespace\\n' +\n        '    $ stx price_namespace hello\\n' +\n        '    {\\n' +\n        '      \"units\": \"BTC\",\\n' +\n        '      \"amount\": \"40000000\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Namespace Operations',\n    },\n    profile_sign: {\n      type: 'array',\n      items: [\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Sign a profile on disk with a given owner private key.  Print out the signed profile JWT.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get the owner key from your 12-word backup phrase using the get_owner_keys command\\n' +\n        '    $ stx profile_sign /path/to/profile.json 0ffd299af9c257173be8486ef54a4dd1373407d0629ca25ca68ff24a76be09fb01\\n' +\n        '\\n',\n      group: 'Profiles',\n    },\n    profile_store: {\n      type: 'array',\n      items: [\n        {\n          name: 'user_id',\n          type: 'string',\n          realtype: 'name-or-id-address',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}|${ID_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Store a profile on disk to a Gaia hub.  `USER_ID` can be either a Blockstack ID or ' +\n        \"an ID-address.  The `GAIA_HUB` argument must be the *write* endpoint for the user's Gaia hub \" +\n        '(e.g. https://hub.blockstack.org).  You can verify this by ensuring that you can run ' +\n        '`curl \"$GAIA_HUB/hub_info\"` successfully.',\n      group: 'Profiles',\n    },\n    profile_verify: {\n      type: 'array',\n      items: [\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: `${ID_ADDRESS_PATTERN}|${PUBLIC_KEY_PATTERN}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Verify a JWT encoding a profile on disk using an ID-address.  Prints out the contained profile on success.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the raw profile JWT\\n' +\n        '    $ curl -sL https://raw.githubusercontent.com/jcnelson/profile/master/judecn.id > /tmp/judecn.id.jwt\\n' +\n        '    $ # Tip: you can get the ID-address for a name with the \"whois\" command\\n' +\n        '    $ stx profile_verify /tmp/judecn.id.jwt ID-16EMaNw3pkn3v6f2BgnSSs53zAKH4Q8YJg\\n' +\n        '\\n',\n      group: 'Profiles',\n    },\n    renew: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'new_id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 6,\n      help:\n        'Renew a name.  Optionally transfer it to a new owner address (`NEW_ID_ADDRESS`), ' +\n        'and optionally load up and give it a new zone file on disk (`ZONEFILE`).  If the command ' +\n        'succeeds, it prints out a transaction ID.  You can use with the `get_confirmations` ' +\n        'command to track its confirmations on the underlying blockchain -- once it reaches 7 ' +\n        'confirmations, the rest of the Blockstack peer network will process it.\\n' +\n        '\\n' +\n        'If you create a new zonefile for your name, you will need ' +\n        'to later use `zonefile_push` to replicate the zone file to the Blockstack peer network ' +\n        'once the transaction reaches 7 confirmations.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner key from your backup phrase with \"get_owner_keys\".\\n' +\n        '    $ # Tip: you can get your payment key from your backup phrase with \"get_payment_key\".\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    3d8945ce76d4261678d76592b472ed639a10d4298f9d730af4edbbc3ec02882e\\n' +\n        '\\n' +\n        '    $ # Renew with a new owner\\n' +\n        '    $ export NEW_OWNER=\"ID-141BcmFVbEuuMb7Bd6umXyV6ZD1WYomYDE\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\" \"$NEW_OWNER\"\\n' +\n        '    33865625ef3f1b607111c0dfba9e58604927173bd2e299a343e19aa6d2cfb263\\n' +\n        '\\n' +\n        '    $ # Renew with a new zone file.\\n' +\n        '    $ # Tip: you can create a new zonefile with the \"make_zonefile\" command.\\n' +\n        '    $ export ZONEFILE_PATH=\"/path/to/new/zonefile.txt\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\" --zonefile \"$ZONEFILE_PATH\"\\n' +\n        '    e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    $ # wait 7 confirmations\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push \"$ZONEFILE_PATH\"\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    register: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'If you are trying to register a name for a *private key*, use this command.\\n' +\n        '\\n' +\n        'Register a name to a single name-owning private key.  After successfully running this command, ' +\n        'and after waiting a couple hours, your name will be ready to use and will resolve to a ' +\n        'signed empty profile hosted on the given Gaia hub (`GAIA_HUB`).\\n' +\n        '\\n' +\n        'Behind the scenes, this will generate and send two transactions ' +\n        'and generate and replicate a zone file with the given Gaia hub URL (`GAIA_HUB`).  ' +\n        'Note that the `GAIA_HUB` argument must correspond to the *write* endpoint of the Gaia hub ' +\n        '(i.e. you should be able to run \\'curl \"$GAIA_HUB/hub_info\"\\' and get back data).  If you ' +\n        'are using Blockstack PBC\\'s default Gaia hub, pass \"https://hub.blockstack.org\" for this ' +\n        'argument.\\n' +\n        '\\n' +\n        \"By default, this command generates a zone file automatically that points to the Gaia hub's \" +\n        'read endpoint (which is queried on-the-fly from `GAIA_HUB`).  If you instead want to have a custom zone file for this name, ' +\n        'you can specify a path to it on disk with the `ZONEFILE` argument.\\n' +\n        '\\n' +\n        'If this command completes successfully, your name will be ready to use once both transactions have 7+ confirmations.  ' +\n        'You can use the `get_confirmations` command to track the confirmations ' +\n        'on the transaction IDs returned by this command.\\n' +\n        '\\n' +\n        'WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while the name is being confirmed.  ' +\n        'If you do so, you could double-spend one of the pending transactions and lose your name.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx register example.id \"$OWNER\" \"$PAYMENT\" https://hub.blockstack.org\\n' +\n        '    9bb908bfd4ab221f0829167a461229172184fc825a012c4e551533aa283207b1\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    register_addr: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id-address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'If you are trying to register a name for an *ID-address*, use this command.\\n' +\n        '\\n' +\n        \"Register a name to someone's ID-address.  After successfully running this \" +\n        'command and waiting a couple of hours, the name will be registered on-chain and have a ' +\n        \"zone file with a URL to where the owner's profile should be.  This command does NOT \" +\n        'generate, sign, or replicate a profile for the name---the name owner will need to do this ' +\n        'separately, once the name is registered.\\n' +\n        '\\n' +\n        'Behind the scenes, this command will generate two ' +\n        'transactions, and generate and replicate a zone file with the given Gaia hub read URL ' +\n        '(`GAIA_URL_PREFIX`).  Note that the `GAIA_URL_PREFIX` argument must correspond to the *read* endpoint of the Gaia hub ' +\n        '(e.g. if you are using Blockstack PBC\\'s default Gaia hub, this is \"https://gaia.blockstack.org/hub\"). ' +\n        \"If you know the *write* endpoint of the name owner's Gaia hub, you can find the right value for \" +\n        '`GAIA_URL_PREFIX` by running \"curl $GAIA_HUB/hub_info\".\\n' +\n        '\\n' +\n        'No profile will be generated or uploaded by this command.  Instead, this command generates ' +\n        'a zone file that will include the URL to a profile based on the `GAIA_URL_PREFIX` argument.\\n' +\n        '\\n' +\n        'The zone file will be generated automatically from the `GAIA_URL_PREFIX` argument.  If you need ' +\n        'to use a custom zone file, you can pass the path to it on disk via the `ZONEFILE` argument.\\n' +\n        '\\n' +\n        'If this command completes successfully, the name will be ready to use in a couple of ' +\n        'hours---that is, once both transactions have 7+ confirmations. ' +\n        'You can use the `get_confirmations` command to track the confirmations.\\n' +\n        '\\n' +\n        'WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while the name is being confirmed.  ' +\n        'If you do so, you could double-spend one of the pending transactions and lose the name.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export ID_ADDRESS=\"ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx register_addr example.id \"$ID_ADDRESS\" \"$PAYMENT\" https://gaia.blockstack.org/hub',\n      group: 'Blockstack ID Management',\n    },\n    register_subdomain: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'registrar',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'Register a subdomain.  This will generate and sign a subdomain zone file record ' +\n        'with the given `GAIA_HUB` URL and send it to the given subdomain registrar (`REGISTRAR`).\\n' +\n        '\\n' +\n        'This command generates, signs, and uploads a profile to the `GAIA_HUB` url.  Note that the `GAIA_HUB` ' +\n        'argument must correspond to the *write* endpoint of your Gaia hub (i.e. you should be able ' +\n        \"to run 'curl \\\"$GAIA_HUB/hub_info\\\"' successfully).  If you are using Blockstack PBC's default \" +\n        'Gaia hub, this argument should be \"https://hub.blockstack.org\".\\n' +\n        '\\n' +\n        'WARNING: At this time, no validation will occur on the registrar URL.  Be sure that the URL ' +\n        'corresponds to the registrar for the on-chain name before running this command!\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ # NOTE: https://registrar.blockstack.org is the registrar for personal.id!\\n' +\n        '    $ stx register_subdomain hello.personal.id \"$OWNER\" https://hub.blockstack.org https://registrar.blockstack.org\\n',\n      group: 'Blockstack ID Management',\n    },\n    revoke: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Revoke a name.  This renders it unusable until it expires (if ever).  This command ' +\n        'prints out the transaction ID if it succeeds.  Once the transaction confirms, the name will ' +\n        'be revoked by each node in the peer network.  This command only works for on-chain names, not ' +\n        'subdomains.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx revoke example.id \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    233b559c97891affa010567bd582110508d0236b4e3f88d3b1d0731629e030b0\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    send_btc: {\n      type: 'array',\n      items: [\n        {\n          name: 'recipient_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'satoshis',\n          pattern: INT_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Send some Bitcoin (in satoshis) from a payment key to an address.  Up to the given ' +\n        'amount will be spent, but likely less---the actual amount sent will be the amount given, ' +\n        'minus the transaction fee.  For example, if you want to send 10000 satoshis but the ' +\n        'transaction fee is 2000 satoshis, then the resulting transaction will send 8000 satoshis ' +\n        'to the given address.  This is to ensure that this command does not *over*-spend your ' +\n        'Bitcoin.  If you want to check the amount before spending, pass the `-x` flag to see the ' +\n        'raw transaction.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out the transaction ID.  You can track its confirmations ' +\n        'with the `get_confirmations` command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx send_btc 18qTSE5PPQmypwKKej7QX5Db2XAttgYeA1 123456 \"$PAYMENT\"\\n' +\n        '    c7e239fd24da30e36e011e6bc7db153574a5b40a3a8dc3b727adb54ad038acc5\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    send_tokens: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'memo',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^.{0,34}$',\n        },\n      ],\n      minItems: 5,\n      maxItems: 6,\n      help:\n        'Send a particular type of tokens to the given `ADDRESS`.  Right now, only supported `TOKEN-TYPE` is `STACKS`.  Optionally ' +\n        'include a memo string (`MEMO`) up to 34 characters long.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.  You can track the confirmations on the transaction ' +\n        'via the `get_confirmations` command.  Once the transaction has 7 confirmations, the Blockstack peer network ' +\n        'will have processed it, and your payment key balance and recipient balance will be updated.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # check balances of sender and recipient before sending.\\n' +\n        '    $ # address of the key below is SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"10000000\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"0\"\\n' +\n        '    }\\n' +\n        '\\n' +\n        '    $ # send tokens\\n' +\n        '    $ stx send_tokens SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY 12345 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n' +\n        '    $ # wait for transaction to be confirmed\\n' +\n        '\\n' +\n        '    $ stx balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"9987655\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"12345\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    stack: {\n      type: 'array',\n      items: [\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'cycles',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'integer',\n          pattern: `${ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Stack the specified number of Stacks tokens for given number of cycles.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx stack 10000000 20 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4 136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\\n' +\n        '    {\\n' +\n        '      \"txid\": true\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    stacking_status: {\n      type: 'array',\n      items: [\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'integer',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get stacking status for specified address.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx stacking_status SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n',\n      group: 'Account Management',\n    },\n    transfer: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'new_id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'keep_zonefile',\n          type: 'string',\n          realtype: 'true-or-false',\n          pattern: '^true$|^false$',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Transfer a Blockstack ID to a new address (`NEW_ID_ADDRESS`).  Optionally preserve ' +\n        'its zone file (`KEEP_ZONEFILE`).  If the command succeeds, it will print a transaction ID.  ' +\n        'Once the transaction reaches 7 confirmations, the Blockstack peer network will transfer the ' +\n        \"Blockstack ID to the new ID-address.  You can track the transaction's confirmations with \" +\n        'the `get_confirmations` command.\\n' +\n        '\\n' +\n        'NOTE: This command only works for on-chain Blockstack IDs.  It does not yet work for subdomains.\\n' +\n        '\\n' +\n        'An ID-address can only own up to 25 Blockstack IDs.  In practice, you should generate a new ' +\n        'owner key and ID-address for each name you receive (via the `get_owner_keys` command).\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner key from your backup phrase with \"get_owner_keys\".\\n' +\n        '    $ # Tip: you can get your payment key from your backup phrase with \"get_payment_key\".\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx transfer example.id ID-1HJA1AJvWef21XbQVL2AcTv71b6JHGPfDX true \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    e09dc158e586d0c09dbcdcba917ec394e6c6ac2b9c91c4b55f32f5973e4f08fc\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    tx_preorder: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Generate and send `NAME_PREORDER` transaction, for a Blockstack ID to be owned ' +\n        'by a given `ID_ADDRESS`.  The name cost will be paid for by the gven `PAYMENT_KEY`.  The ' +\n        'ID-address should be a never-before-seen address, since it will be used as a salt when ' +\n        'generating the name preorder hash.\\n' +\n        '\\n' +\n        'This is a low-level command that only experienced Blockstack developers should use.  ' +\n        'If you just want to register a name, use the \"register\" command.\\n',\n      group: 'Blockstack ID Management',\n    },\n    tx_register: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zoenfile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 5,\n      help:\n        'Generate and send a NAME_REGISTRATION transaction, assigning the given `BLOCKSTACK_ID` ' +\n        'to the given `ID_ADDRESS`.  Optionally pair the Blockstack ID with a zone file (`ZONEFILE`) or ' +\n        'the hash of the zone file (`ZONEFILE_HASH`).  You will need to push the zone file to the peer ' +\n        'network after the transaction confirms (i.e. with `zonefile_push`).\\n' +\n        '\\n' +\n        'This is a low-level command that only experienced Blockstack developers should use.  If you ' +\n        'just want to register a name, you should use the `register` command.',\n      group: 'Blockstack ID Management',\n    },\n    update: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'Update the zonefile for an on-chain Blockstack ID.  You can generate a well-formed ' +\n        'zone file using the `make_zonefile` command, or you can supply your own.  Zone files can be ' +\n        'up to 40Kb.  Alternatively, if you only want to announce the hash of a zone file (or any ' +\n        'arbitrary 20-byte hex string), you can do so by passing a value for `ZONEFILE_HASH`.  If `ZONEFILE_HASH` ' +\n        'is given, then the value for `ZONEFILE` will be ignored.\\n' +\n        '\\n' +\n        'If this command succeeds, it prints out a transaction ID.  Once the transaction has 7 confirmations, ' +\n        \"the Blockstack peer network will set the name's zone file hash to the `RIPEMD160`(SHA256) hash of \" +\n        'the given zone file (or it will simply set it to the hash given in `ZONEFILE_HASH`).\\n' +\n        '\\n' +\n        'Once the transaction confirms, you will need to replicate the zone file to the Blockstack peer network.  ' +\n        'This can be done with the `zonefile_push` command.  Until you do so, no Blockstack clients will be able ' +\n        'to obtain the zone file announced by this command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ # make a new zone file\\n' +\n        '    $ stx make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub > /tmp/zonefile.txt\\n' +\n        '    \\n' +\n        '    $ # update the name to reference this new zone file\\n' +\n        '    $ stx update example.id /tmp/zonefile.txt \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    8e94a5b6647276727a343713d3213d587836e1322b1e38bc158406f5f8ebe3fd\\n' +\n        '    \\n' +\n        '    $ # check confirmations\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '    \\n' +\n        '    $ # send out the new zone file to a Blockstack peer\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push /tmp/zonefile.txt\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    whois: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Look up the zone file and owner of a Blockstack ID.  Works with both on-chain and off-chain names.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx whois example.id\\n' +\n        '    {\\n' +\n        '      \"address\": \"1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82\",\\n' +\n        '      \"block_renewed_at\": 567890,\\n' +\n        '      \"blockchain\": \"bitcoin\",\\n' +\n        '      \"expire_block\": 687010,\\n' +\n        '      \"grace_period\": false,\\n' +\n        '      \"last_transaction_height\": \"567891\",\\n' +\n        '      \"last_txid\": \"a564aa482ee43eb2bdfb016e01ea3b950bab0cfa39eace627d632e73c7c93e48\",\\n' +\n        '      \"owner_script\": \"76a9146c1c2fc3cf74d900c51e9b5628205130d7b98ae488ac\",\\n' +\n        '      \"renewal_deadline\": 692010,\\n' +\n        '      \"resolver\": null,\\n' +\n        '      \"status\": \"registered\",\\n' +\n        '      \"zonefile\": \"$ORIGIN example.id\\\\n$TTL 3600\\\\n_http._tcp URI 10 1 \\\\\"https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\\\\\"\\\\n\",\\n' +\n        '      \"zonefile_hash\": \"ae4ee8e7f30aa890468164e667e2c203266f726e\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    zonefile_push: {\n      type: 'array',\n      items: [\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Push a zone file on disk to the Blockstack peer network.  The zone file must ' +\n        'correspond to a zone file hash that has already been announced.  That is, you use this command ' +\n        'in conjunction with the `register`, `update`, `renew`, or `name_import` commands.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push /path/to/zonefile.txt\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    get_did_configuration: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'domain',\n          type: 'string',\n          realtype: 'domain',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Creates a DID configuration for the given blockstack id and domain to create a link between both.' +\n        'The specification is define by the Decentralized Identity Foundation at https://identity.foundation/specs/did-configuration/\\n' +\n        'The DID configuration should be placed in the json file \".well_known/did_configuration\"' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner keys from your 12-word backup phrase using the get_owner_keys command.\\n' +\n        '    $ export PRIVATE_OWNER_KEY=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ stx get_did_configuration public_profile_for_testing.id.blockstack helloblockstack.com PRIVATE_OWNER_KEY\\n' +\n        '    {\\n' +\n        '       \"entries\": [\\n' +\n        '          {\\n' +\n        '            \"did\": \"did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0\",\\n' +\n        '            \"jwt\": \"eyJ0eXAiOiJKV1QiL....\"\\n' +\n        '          }\\n' +\n        '       ]\\n' +\n        '    }\\n' +\n        '\\n' +\n        'The decoded content of the jwt above is \\n' +\n        '    {\\n' +\n        '       \"header\": {\\n' +\n        '          \"typ\": \"JWT\", \"alg\": \"ES256K\"\\n' +\n        '       },\\n' +\n        '       \"payload\": {\\n' +\n        '           \"iss\": \"did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0\",\\n' +\n        '           \"domain\": \"helloblockstack.com\",\\n' +\n        '           \"exp\": \"2020-12-07T13:05:28.375Z\"\\n' +\n        '       },\\n' +\n        '       \"signature\": \"NDY7ISzgAHKcZDvbxzTxQdVnf6xWMZ46w5vHcDpNx_1Fsyip0M6E6GMq_2YZ-gUcwmwlo8Ag9jgnfOkaBIFpoQ\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'DID',\n    },\n  } as CLI_PROP,\n  additionalProperties: false,\n  strict: true,\n};\n\n// usage string for built-in options\nexport const USAGE = `Usage: ${process.argv[1]} [options] command [command arguments]\nOptions can be:\n    -c                  Path to a config file (defaults to\n                        ${DEFAULT_CONFIG_PATH})\n\n    -d                  Print verbose debugging output\n\n    -e                  Estimate the BTC cost of an transaction (in satoshis).\n                        Do not generate or send any transactions.\n\n    -m MAGIC_BYTES      Use an alternative magic byte string instead of \"id\".\n\n    -t                  Use the public testnet instead of mainnet.\n\n    -i                  Use integration test framework instead of mainnet.\n\n    -U                  Unsafe mode.  No safety checks will be performed.\n\n    -x                  Do not broadcast a transaction.  Only generate and\n                        print them to stdout.\n\n    -B BURN_ADDR        Use the given namespace burn address instead of the one\n                        obtained from the Blockstack network (DANGEROUS)\n\n    -D DENOMINATION     Denominate the price to pay in the given units\n                        (DANGEROUS)\n\n    -C CONSENSUS_HASH   Use the given consensus hash instead of one obtained\n                        from the network\n\n    -F FEE_RATE         Use the given transaction fee rate instead of the one\n                        obtained from the Bitcoin network\n\n    -G GRACE_PERIOD     Number of blocks in which a name can be renewed after it\n                        expires (DANGEROUS)\n\n    -H URL              Use an alternative Blockstack Core API endpoint.\n\n    -I URL              Use an alternative Blockstack Core Indexer endpoint.\n\n    -M MAX_INDEX        Maximum keychain index to use when searching for an identity address\n                        (default is ${DEFAULT_MAX_ID_SEARCH_INDEX}).\n\n    -N PAY2NS_PERIOD    Number of blocks in which a namespace receives the registration\n                        and renewal fees after it is created (DANGEROUS)\n\n    -P PRICE            Use the given price to pay for names or namespaces\n                        (DANGEROUS)\n\n    -T URL              Use an alternative Blockstack transaction broadcaster.\n    \n    -X URL              Use an alternative UTXO service endpoint.\n\n    -u USERNAME         A username to be passed to bitcoind RPC endpoints\n\n    -p PASSWORD         A password to be passed to bitcoind RPC endpoints\n`;\n\n/*\n * Format help\n */\nfunction formatHelpString(indent: number, limit: number, helpString: string): string {\n  const lines = helpString.split('\\n');\n  let buf = '';\n  let pad = '';\n  for (let i = 0; i < indent; i++) {\n    pad += ' ';\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    let linebuf = pad.slice();\n    const words = lines[i].split(/ /).filter(word => word.length > 0);\n    if (words.length == 0) {\n      buf += '\\n';\n      continue;\n    }\n\n    if (words[0] === '$' || lines[i].substring(0, 4) === '    ') {\n      // literal line\n      buf += lines[i] + '\\n';\n      continue;\n    }\n\n    for (let j = 0; j < words.length; j++) {\n      if (words[j].length === 0) {\n        // explicit line break\n        linebuf += '\\n';\n        break;\n      }\n\n      if (linebuf.split('\\n').slice(-1)[0].length + 1 + words[j].length > limit) {\n        linebuf += '\\n';\n        linebuf += pad;\n      }\n      linebuf += words[j] + ' ';\n    }\n\n    buf += linebuf + '\\n';\n  }\n  return buf;\n}\n\n/*\n * Format command usage lines.\n * Generate two strings:\n * raw string:\n *    COMMAND ARG_NAME ARG_NAME ARG_NAME [OPTINONAL ARG NAME]\n * keyword string:\n *    COMMAND --arg_name TYPE\n *            --arg_name TYPE\n *            [--arg_name TYPE]\n */\ninterface CLI_COMMAND_HELP {\n  raw: string;\n  kw: string;\n}\n\nfunction formatCommandHelpLines(\n  commandName: string,\n  commandArgs: Array<CLI_PROP_ITEM>\n): CLI_COMMAND_HELP {\n  let rawUsage = '';\n  let kwUsage = '';\n  let kwPad = '';\n  const commandInfo = CLI_ARGS.properties[commandName];\n\n  rawUsage = `  ${commandName} `;\n  for (let i = 0; i < commandArgs.length; i++) {\n    if (!commandArgs[i].name) {\n      console.log(commandName);\n      console.log(commandArgs[i]);\n      throw new Error('BUG: command info is missing a \"name\" field');\n    }\n    if (i + 1 <= commandInfo.minItems) {\n      rawUsage += `${commandArgs[i].name.toUpperCase()} `;\n    } else {\n      rawUsage += `[${commandArgs[i].name.toUpperCase()}] `;\n    }\n  }\n\n  kwUsage = `  ${commandName} `;\n  for (let i = 0; i < commandName.length + 3; i++) {\n    kwPad += ' ';\n  }\n\n  for (let i = 0; i < commandArgs.length; i++) {\n    if (!commandArgs[i].realtype) {\n      console.log(commandName);\n      console.log(commandArgs[i]);\n      throw new Error('BUG: command info is missing a \"realtype\" field');\n    }\n    if (i + 1 <= commandInfo.minItems) {\n      kwUsage += `--${commandArgs[i].name} ${commandArgs[i].realtype.toUpperCase()}`;\n    } else {\n      kwUsage += `[--${commandArgs[i].name} ${commandArgs[i].realtype.toUpperCase()}]`;\n    }\n    kwUsage += '\\n';\n    kwUsage += kwPad;\n  }\n\n  return { raw: rawUsage, kw: kwUsage } as CLI_COMMAND_HELP;\n}\n\n/*\n * Get the set of commands grouped by command group\n */\ninterface CLI_COMMAND_GROUP_ITEM {\n  command: string;\n  help: string;\n}\n\ninterface CLI_COMMAND_GROUP {\n  [index: string]: CLI_COMMAND_GROUP_ITEM[];\n}\n\nfunction getCommandGroups(): CLI_COMMAND_GROUP {\n  const groups: CLI_COMMAND_GROUP = {};\n  const commands = Object.keys(CLI_ARGS.properties);\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    const group = CLI_ARGS.properties[command].group;\n\n    if (!groups.hasOwnProperty(group)) {\n      groups[group] = [\n        {\n          command: command,\n          help: CLI_ARGS.properties[command].help,\n        } as CLI_COMMAND_GROUP_ITEM,\n      ];\n    } else {\n      groups[group].push({\n        command: command,\n        help: CLI_ARGS.properties[command].help,\n      } as CLI_COMMAND_GROUP_ITEM);\n    }\n  }\n  return groups;\n}\n\n/*\n * Make all commands list\n */\nexport function makeAllCommandsList(): string {\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  let res = `All commands (run '${process.argv[1]} help COMMAND' for details):\\n`;\n  for (let i = 0; i < groupNames.length; i++) {\n    res += `  ${groupNames[i]}: `;\n    const cmds = [];\n    for (let j = 0; j < groups[groupNames[i]].length; j++) {\n      cmds.push(groups[groupNames[i]][j].command);\n    }\n\n    // wrap at 80 characters\n    const helpLineSpaces = formatHelpString(4, 70, cmds.join(' '));\n    const helpLineCSV =\n      '    ' +\n      helpLineSpaces\n        .split('\\n    ')\n        .map(line => line.trim().replace(/ /g, ', '))\n        .join('\\n    ') +\n      '\\n';\n\n    res += '\\n' + helpLineCSV;\n    res += '\\n';\n  }\n  return res.trim();\n}\n\n/*\n * Make help for all commands\n */\nexport function makeAllCommandsHelp(): string {\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  const helps = [];\n  let cmds = [];\n  for (let i = 0; i < groupNames.length; i++) {\n    for (let j = 0; j < groups[groupNames[i]].length; j++) {\n      cmds.push(groups[groupNames[i]][j].command);\n    }\n  }\n\n  cmds = cmds.sort();\n  for (let i = 0; i < cmds.length; i++) {\n    helps.push(makeCommandUsageString(cmds[i]).trim());\n  }\n\n  return helps.join('\\n\\n');\n}\n\n/*\n * Make a usage string for a single command\n */\nexport function makeCommandUsageString(command?: string): string {\n  let res = '';\n  if (command === 'all') {\n    return makeAllCommandsHelp();\n  }\n  if (!command) {\n    return makeAllCommandsList();\n  }\n\n  const commandInfo = CLI_ARGS.properties[command];\n  if (!commandInfo || command === 'help') {\n    return makeAllCommandsList();\n  }\n\n  const help = commandInfo.help;\n\n  const cmdFormat = formatCommandHelpLines(command, commandInfo.items);\n  const formattedHelp = formatHelpString(2, 78, help);\n\n  // make help string for one command\n  res += `Command: ${command}\\n`;\n  res += 'Usage:\\n';\n  res += `${cmdFormat.raw}\\n`;\n  res += `${cmdFormat.kw}\\n`;\n  res += formattedHelp;\n  return res.trim() + '\\n';\n}\n\n/*\n * Make the usage documentation\n */\nexport function makeUsageString(): string {\n  let res = `${USAGE}\\n\\nCommand reference\\n`;\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  for (let i = 0; i < groupNames.length; i++) {\n    const groupName = groupNames[i];\n    const groupCommands = groups[groupName];\n\n    res += `Command group: ${groupName}\\n\\n`;\n    for (let j = 0; j < groupCommands.length; j++) {\n      const command = groupCommands[j].command;\n      const help = groupCommands[j].help;\n\n      const commandInfo = CLI_ARGS.properties[command];\n\n      const cmdFormat = formatCommandHelpLines(command, commandInfo.items);\n      const formattedHelp = formatHelpString(4, 76, help);\n\n      res += cmdFormat.raw;\n      res += '\\n';\n      res += cmdFormat.kw;\n      res += '\\n';\n      res += formattedHelp;\n      res += '\\n';\n    }\n    res += '\\n';\n  }\n\n  return res;\n}\n\n/*\n * Print usage\n */\nexport function printUsage() {\n  console.error(makeUsageString());\n}\n\n/*\n * Implement just enough getopt(3) to be useful.\n * Only handles short options.\n * Returns an object whose keys are option flags that map to true/false,\n * or to a value.\n * The key _ is mapped to the non-opts list.\n */\ninterface CLI_OPTS {\n  [index: string]: null | boolean | string | string[];\n}\n\nexport function getCLIOpts(\n  argv: string[],\n  opts: string = 'deitUxC:F:B:P:D:G:N:H:T:I:m:M:X:u:p:'\n): CLI_OPTS {\n  const optsTable: CLI_OPTS = {};\n  const remainingArgv = [];\n  const argvBuff = argv.slice(0);\n\n  for (let i = 0; i < opts.length; i++) {\n    if (opts[i] == ':') {\n      continue;\n    }\n    if (i + 1 < opts.length && opts[i + 1] == ':') {\n      optsTable[opts[i]] = null;\n    } else {\n      optsTable[opts[i]] = false;\n    }\n  }\n\n  for (const opt of Object.keys(optsTable)) {\n    for (let i = 0; i < argvBuff.length; i++) {\n      if (argvBuff[i] === null) {\n        break;\n      }\n      if (argvBuff[i] === '--') {\n        break;\n      }\n\n      const argvOpt = `-${opt}`;\n      if (argvOpt === argvBuff[i]) {\n        if (optsTable[opt] === false) {\n          // boolean switch\n          optsTable[opt] = true;\n          argvBuff[i] = '';\n        } else {\n          // argument\n          optsTable[opt] = argvBuff[i + 1];\n          argvBuff[i] = '';\n          argvBuff[i + 1] = '';\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < argvBuff.length; i++) {\n    if (argvBuff[i].length > 0) {\n      if (argvBuff[i] === '--') {\n        continue;\n      }\n      remainingArgv.push(argvBuff[i]);\n    }\n  }\n\n  optsTable['_'] = remainingArgv;\n  return optsTable;\n}\n\nexport function CLIOptAsString(opts: CLI_OPTS, key: string): string | null {\n  if (opts[key] === null || opts[key] === undefined) {\n    return null;\n  } else if (typeof opts[key] === 'string') {\n    return `${opts[key]}`;\n  } else {\n    throw new Error(`Option '${key}' is not a string`);\n  }\n}\n\nexport function CLIOptAsBool(opts: CLI_OPTS, key: string): boolean {\n  if (typeof opts[key] === 'boolean' || opts[key] === null) {\n    return !!opts[key];\n  } else {\n    throw new Error(`Option '${key}' is not a boolean`);\n  }\n}\n\nfunction isStringArray(value: any): value is string[] {\n  if (value instanceof Array) {\n    return value\n      .map((s: any) => typeof s === 'string')\n      .reduce((x: boolean, y: boolean) => x && y, true);\n  } else {\n    return false;\n  }\n}\n\nexport function CLIOptAsStringArray(opts: CLI_OPTS, key: string): string[] | null {\n  const value: any = opts[key];\n  if (value === null || value === undefined) {\n    return null;\n  } else if (isStringArray(value)) {\n    return value;\n  } else {\n    throw new Error(`Option '${key}' is not a string array`);\n  }\n}\n\n/*\n * Use the CLI schema to get all positional and keyword args\n * for a given command.\n */\nexport function getCommandArgs(command: string, argsList: Array<string>) {\n  let commandProps = CLI_ARGS.properties[command].items;\n  if (!Array.isArray(commandProps)) {\n    commandProps = [commandProps];\n  }\n\n  const orderedArgs = [];\n  const foundArgs: Record<string, string> = {};\n\n  // scan for keywords\n  for (let i = 0; i < argsList.length; i++) {\n    if (argsList[i].startsWith('--')) {\n      // keyword argument\n      const argName = argsList[i].slice(2);\n      let argValue = null;\n\n      // dup?\n      if (foundArgs.hasOwnProperty(argName)) {\n        return {\n          status: false,\n          error: `duplicate argument ${argsList[i]}`,\n        };\n      }\n\n      for (let j = 0; j < commandProps.length; j++) {\n        if (!commandProps[j].hasOwnProperty('name')) {\n          continue;\n        }\n        if (commandProps[j].name === argName) {\n          // found!\n          // end of args?\n          if (i + 1 >= argsList.length) {\n            return {\n              status: false,\n              error: `no value for argument ${argsList[i]}`,\n            };\n          }\n\n          argValue = argsList[i + 1];\n        }\n      }\n\n      if (argValue) {\n        // found an argument given as a keyword\n        i += 1;\n        foundArgs[argName] = argValue;\n      } else {\n        return {\n          status: false,\n          error: `no such argument ${argsList[i]}`,\n        };\n      }\n    } else {\n      // positional argument\n      orderedArgs.push(argsList[i]);\n    }\n  }\n\n  // merge foundArgs and orderedArgs back into an ordered argument list\n  // that is conformant to the CLI specification.\n  const mergedArgs = [];\n  let orderedArgIndex = 0;\n\n  for (let i = 0; i < commandProps.length; i++) {\n    if (orderedArgIndex < orderedArgs.length) {\n      if (!commandProps[i].hasOwnProperty('name')) {\n        // unnamed positional argument\n        mergedArgs.push(orderedArgs[orderedArgIndex]);\n        orderedArgIndex += 1;\n      } else if (!foundArgs.hasOwnProperty(commandProps[i].name)) {\n        // named positional argument, NOT given as a keyword\n        mergedArgs.push(orderedArgs[orderedArgIndex]);\n        orderedArgIndex += 1;\n      } else {\n        // keyword argument\n        mergedArgs.push(foundArgs[commandProps[i].name]);\n      }\n    } else {\n      // keyword argument (possibly undefined)\n      mergedArgs.push(foundArgs[commandProps[i].name]);\n    }\n  }\n\n  return {\n    status: true,\n    arguments: mergedArgs,\n  };\n}\n\n/*\n * Check command args\n */\nexport interface CheckArgsSuccessType {\n  success: true;\n  command: string;\n  args: Array<string>;\n}\n\nexport interface CheckArgsFailType {\n  success: false;\n  error: string;\n  command: string;\n  usage: boolean;\n}\n\nexport function checkArgs(argList: Array<string>): CheckArgsSuccessType | CheckArgsFailType {\n  if (argList.length <= 2) {\n    return {\n      success: false,\n      error: 'No command given',\n      usage: true,\n      command: '',\n    };\n  }\n\n  const commandName = argList[2];\n  const allCommandArgs = argList.slice(3);\n\n  if (!CLI_ARGS.properties.hasOwnProperty(commandName)) {\n    return {\n      success: false,\n      error: `Unrecognized command '${commandName}'`,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  const parsedCommandArgs = getCommandArgs(commandName, allCommandArgs);\n  if (!parsedCommandArgs.status) {\n    return {\n      success: false,\n      error: parsedCommandArgs.error!,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  const commandArgs = parsedCommandArgs.arguments;\n\n  // validate all required commands as given.\n  // if there are optional commands, then only validate\n  // them if they're given.\n  const commandSchema = JSON.parse(JSON.stringify(CLI_ARGS.properties[commandName]));\n  for (let i = commandSchema.minItems; i < commandSchema.maxItems; i++) {\n    if (i < commandArgs!.length) {\n      if (commandArgs![i] === null || commandArgs![i] === undefined) {\n        // optional argument not given.  Update the schema we're checking against\n        // to expect this.\n        // @ts-ignore\n        commandArgs[i] = null;\n        commandSchema.items[i] = { type: 'null' };\n      }\n    }\n  }\n\n  const ajv = Ajv();\n  const valid = ajv.validate(commandSchema, commandArgs);\n  if (!valid) {\n    let errorMsg = '';\n    for (let i = 0; i < ajv.errors!.length; i++) {\n      const msg = `Invalid command arguments: Schema \"${\n        ajv.errors![0].schemaPath\n      }\" failed validation (problem: \"${ajv.errors![0].message}\", cause: \"${JSON.stringify(\n        ajv.errors![0].params\n      )}\")\\n`;\n      errorMsg += msg;\n    }\n    return {\n      success: false,\n      error: errorMsg,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  return {\n    success: true,\n    command: commandName,\n    args: commandArgs!,\n  };\n}\n\n/**\n * Load the config file and return a config dict.\n * If no config file exists, then return the default config.\n *\n * @configPath (string) the path to the config file.\n * @networkType (sring) 'mainnet', 'regtest', or 'testnet'\n */\nexport function loadConfig(configFile: string, networkType: string): CLI_CONFIG_TYPE {\n  if (networkType !== 'mainnet' && networkType !== 'testnet' && networkType != 'regtest') {\n    throw new Error('Unregognized network');\n  }\n\n  let configRet: CLI_CONFIG_TYPE;\n\n  if (networkType === 'mainnet') {\n    configRet = Object.assign({}, CONFIG_DEFAULTS);\n  } else if (networkType === 'regtest') {\n    configRet = Object.assign({}, CONFIG_REGTEST_DEFAULTS);\n  } else {\n    configRet = Object.assign({}, CONFIG_TESTNET_DEFAULTS);\n  }\n\n  try {\n    configRet = JSON.parse(fs.readFileSync(configFile).toString()) as CLI_CONFIG_TYPE;\n  } catch (e) {}\n\n  return configRet;\n}\n"],"names":["NAME_PATTERN","NAMESPACE_PATTERN","ADDRESS_CHARS","C32_ADDRESS_CHARS","ADDRESS_PATTERN","ID_ADDRESS_PATTERN","STACKS_ADDRESS_PATTERN","PRIVATE_KEY_PATTERN","PRIVATE_KEY_UNCOMPRESSED_PATTERN","PRIVATE_KEY_NOSIGN_PATTERN","PRIVATE_KEY_MULTISIG_PATTERN","PRIVATE_KEY_SEGWIT_P2SH_PATTERN","PRIVATE_KEY_PATTERN_ANY","PUBLIC_KEY_PATTERN","INT_PATTERN","ZONEFILE_HASH_PATTERN","URL_PATTERN","SUBDOMAIN_PATTERN","TXID_PATTERN","BOOLEAN_PATTERN","LOG_CONFIG_DEFAULTS","level","handleExceptions","timestamp","stringify","colorize","json","CONFIG_DEFAULTS","blockstackAPIUrl","blockstackNodeUrl","broadcastServiceUrl","utxoServiceUrl","logConfig","CONFIG_REGTEST_DEFAULTS","bitcoindPassword","bitcoindUsername","PUBLIC_TESTNET_HOST","CONFIG_TESTNET_DEFAULTS","Object","assign","DEFAULT_CONFIG_PATH","DEFAULT_CONFIG_REGTEST_PATH","DEFAULT_CONFIG_TESTNET_PATH","DEFAULT_MAX_ID_SEARCH_INDEX","CLI_ARGS","type","properties","announce","items","name","realtype","pattern","minItems","maxItems","help","group","authenticator","balance","can_stack","call_contract_func","call_read_only_contract_func","convert_address","decrypt_keychain","deploy_contract","docs","encrypt_keychain","faucet","gaia_dump_bucket","gaia_getfile","gaia_putfile","gaia_deletefile","gaia_listfiles","gaia_restore_bucket","gaia_sethub","get_account_history","get_account_at","get_address","get_blockchain_record","get_blockchain_history","get_confirmations","get_namespace_blockchain_record","get_app_keys","get_owner_keys","get_payment_key","get_stacks_wallet_key","get_zonefile","lookup","names","make_keychain","make_zonefile","name_import","namespace_preorder","namespace_reveal","namespace_ready","price","price_namespace","profile_sign","profile_store","profile_verify","renew","register","register_addr","register_subdomain","revoke","send_btc","send_tokens","stack","stacking_status","transfer","tx_preorder","tx_register","update","whois","zonefile_push","get_did_configuration","additionalProperties","strict","USAGE","process","formatHelpString","indent","limit","helpString","lines","split","buf","pad","i","length","linebuf","slice","words","filter","word","substring","j","formatCommandHelpLines","commandName","commandArgs","rawUsage","kwUsage","kwPad","commandInfo","console","log","Error","toUpperCase","raw","kw","getCommandGroups","groups","commands","keys","command","hasOwnProperty","push","makeAllCommandsList","groupNames","sort","res","cmds","helpLineSpaces","join","helpLineCSV","map","line","trim","replace","makeAllCommandsHelp","helps","makeCommandUsageString","cmdFormat","formattedHelp","getCLIOpts","argv","opts","optsTable","remainingArgv","argvBuff","opt","argvOpt","CLIOptAsString","key","undefined","CLIOptAsBool","isStringArray","value","Array","s","reduce","x","y","CLIOptAsStringArray","getCommandArgs","argsList","commandProps","isArray","orderedArgs","foundArgs","startsWith","argName","argValue","status","error","mergedArgs","orderedArgIndex","arguments","checkArgs","argList","success","usage","allCommandArgs","parsedCommandArgs","commandSchema","JSON","parse","ajv","Ajv","valid","validate","errorMsg","errors","msg","schemaPath","message","params","args","loadConfig","configFile","networkType","configRet","fs","toString","e"],"mappings":"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"}