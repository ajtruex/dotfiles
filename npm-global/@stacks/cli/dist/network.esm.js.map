{"version":3,"file":"network.esm.js","sources":["../src/network.ts"],"sourcesContent":["import blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nconst BN = require('bn.js');\nimport fetch from 'node-fetch';\n\nimport { CLI_CONFIG_TYPE } from './argparse';\n\nimport { BlockstackNetwork } from 'blockstack/lib/network';\n\nconst SATOSHIS_PER_BTC = 1e8;\n\nexport interface CLI_NETWORK_OPTS {\n  consensusHash: string | null;\n  feeRate: number | null;\n  namespaceBurnAddress: string | null;\n  priceToPay: string | null;\n  priceUnits: string | null;\n  receiveFeesPeriod: number | null;\n  gracePeriod: number | null;\n  altAPIUrl: string | null;\n  altTransactionBroadcasterUrl: string | null;\n  nodeAPIUrl: string | null;\n}\n\nexport interface PriceType {\n  units: 'BTC' | 'STACKS';\n  amount: import('bn.js');\n}\n\nexport type NameInfoType = {\n  address: string;\n  blockchain?: string;\n  did?: string;\n  expire_block?: number;\n  grace_period?: number;\n  last_txid?: string;\n  renewal_deadline?: number;\n  resolver?: string | null;\n  status?: string;\n  zonefile?: string | null;\n  zonefile_hash?: string | null;\n};\n\n/*\n * Adapter class that allows us to use data obtained\n * from the CLI.\n */\nexport class CLINetworkAdapter {\n  consensusHash: string | null;\n  feeRate: number | null;\n  namespaceBurnAddress: string | null;\n  priceToPay: string | null;\n  priceUnits: string | null;\n  gracePeriod: number | null;\n  receiveFeesPeriod: number | null;\n  nodeAPIUrl: string;\n  optAlwaysCoerceAddress: boolean;\n  legacyNetwork: BlockstackNetwork;\n\n  constructor(network: BlockstackNetwork, opts: CLI_NETWORK_OPTS) {\n    const optsDefault: CLI_NETWORK_OPTS = {\n      consensusHash: null,\n      feeRate: null,\n      namespaceBurnAddress: null,\n      priceToPay: null,\n      priceUnits: null,\n      receiveFeesPeriod: null,\n      gracePeriod: null,\n      altAPIUrl: opts.nodeAPIUrl,\n      altTransactionBroadcasterUrl: network.broadcastServiceUrl,\n      nodeAPIUrl: opts.nodeAPIUrl,\n    };\n\n    opts = Object.assign({}, optsDefault, opts);\n\n    this.legacyNetwork = new BlockstackNetwork(\n      opts.nodeAPIUrl!,\n      opts.altTransactionBroadcasterUrl!,\n      network.btc,\n      network.layer1\n    );\n    this.consensusHash = opts.consensusHash;\n    this.feeRate = opts.feeRate;\n    this.namespaceBurnAddress = opts.namespaceBurnAddress;\n    this.priceToPay = opts.priceToPay;\n    this.priceUnits = opts.priceUnits;\n    this.receiveFeesPeriod = opts.receiveFeesPeriod;\n    this.gracePeriod = opts.gracePeriod;\n    this.nodeAPIUrl = opts.nodeAPIUrl!;\n\n    this.optAlwaysCoerceAddress = false;\n  }\n\n  isMainnet(): boolean {\n    return this.legacyNetwork.layer1.pubKeyHash === bitcoin.networks.bitcoin.pubKeyHash;\n  }\n\n  isTestnet(): boolean {\n    return this.legacyNetwork.layer1.pubKeyHash === bitcoin.networks.testnet.pubKeyHash;\n  }\n\n  setCoerceMainnetAddress(value: boolean) {\n    this.optAlwaysCoerceAddress = value;\n  }\n\n  coerceMainnetAddress(address: string): string {\n    const addressInfo = bitcoin.address.fromBase58Check(address);\n    const addressHash = addressInfo.hash;\n    const addressVersion = addressInfo.version;\n    let newVersion = 0;\n\n    if (addressVersion === this.legacyNetwork.layer1.pubKeyHash) {\n      newVersion = 0;\n    } else if (addressVersion === this.legacyNetwork.layer1.scriptHash) {\n      newVersion = 5;\n    }\n    return bitcoin.address.toBase58Check(addressHash, newVersion);\n  }\n\n  getFeeRate(): Promise<number> {\n    if (this.feeRate) {\n      // override with CLI option\n      return Promise.resolve(this.feeRate);\n    }\n    if (this.isTestnet()) {\n      // in regtest mode\n      return Promise.resolve(Math.floor(0.00001 * SATOSHIS_PER_BTC));\n    }\n    return this.legacyNetwork.getFeeRate();\n  }\n\n  getConsensusHash(): Promise<string> {\n    // override with CLI option\n    if (this.consensusHash) {\n      return new Promise((resolve: any) => resolve(this.consensusHash));\n    }\n    return this.legacyNetwork.getConsensusHash().then((c: string) => c);\n  }\n\n  getGracePeriod(): Promise<number> {\n    if (this.gracePeriod) {\n      return new Promise((resolve: any) => resolve(this.gracePeriod));\n    }\n    return this.legacyNetwork.getGracePeriod().then((g: number) => g);\n  }\n\n  getNamePrice(name: string): Promise<PriceType> {\n    // override with CLI option\n    if (this.priceUnits && this.priceToPay) {\n      return new Promise((resolve: any) =>\n        resolve({\n          units: String(this.priceUnits),\n          amount: new BN(this.priceToPay),\n        } as PriceType)\n      );\n    }\n    // @ts-ignore\n    return this.legacyNetwork.getNamePrice(name).then((priceInfo: PriceType) => {\n      // use v2 scheme\n      if (!priceInfo.units) {\n        priceInfo = {\n          units: 'BTC',\n          amount: new BN(String(priceInfo)),\n        };\n      }\n      return priceInfo;\n    });\n  }\n\n  getNamespacePrice(namespaceID: string): Promise<PriceType> {\n    // override with CLI option\n    if (this.priceUnits && this.priceToPay) {\n      return new Promise((resolve: any) =>\n        resolve({\n          units: String(this.priceUnits),\n          amount: new BN(String(this.priceToPay)),\n        } as PriceType)\n      );\n    }\n    // @ts-ignore\n    return super.getNamespacePrice(namespaceID).then((priceInfo: PriceType) => {\n      // use v2 scheme\n      if (!priceInfo.units) {\n        priceInfo = {\n          units: 'BTC',\n          amount: new BN(String(priceInfo)),\n        } as PriceType;\n      }\n      return priceInfo;\n    });\n  }\n\n  getNamespaceBurnAddress(\n    namespace: string,\n    useCLI: boolean = true,\n    receiveFeesPeriod: number = -1\n  ): Promise<string> {\n    // override with CLI option\n    if (this.namespaceBurnAddress && useCLI) {\n      return new Promise((resolve: any) => resolve(this.namespaceBurnAddress));\n    }\n\n    return Promise.all([\n      fetch(`${this.legacyNetwork.blockstackAPIUrl}/v1/namespaces/${namespace}`),\n      this.legacyNetwork.getBlockHeight(),\n    ])\n      .then(([resp, blockHeight]: [any, number]) => {\n        if (resp.status === 404) {\n          throw new Error(`No such namespace '${namespace}'`);\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return Promise.all([resp.json(), blockHeight]);\n        }\n      })\n      .then(([namespaceInfo, blockHeight]: [any, number]) => {\n        let address = '1111111111111111111114oLvT2'; // default burn address\n        if (namespaceInfo.version === 2) {\n          // pay-to-namespace-creator if this namespace is less than $receiveFeesPeriod blocks old\n          if (receiveFeesPeriod < 0) {\n            receiveFeesPeriod = this.receiveFeesPeriod!;\n          }\n\n          if (namespaceInfo.reveal_block + receiveFeesPeriod > blockHeight) {\n            address = namespaceInfo.address;\n          }\n        }\n        return address;\n      })\n      .then((address: string) => this.legacyNetwork.coerceAddress(address));\n  }\n\n  getNameInfo(name: string): Promise<NameInfoType> {\n    // optionally coerce addresses\n    return this.legacyNetwork.getNameInfo(name).then((ni: any) => {\n      const nameInfo: NameInfoType = {\n        address: this.optAlwaysCoerceAddress ? this.coerceMainnetAddress(ni.address) : ni.address,\n        blockchain: ni.blockchain,\n        did: ni.did,\n        expire_block: ni.expire_block,\n        grace_period: ni.grace_period,\n        last_txid: ni.last_txid,\n        renewal_deadline: ni.renewal_deadline,\n        resolver: ni.resolver,\n        status: ni.status,\n        zonefile: ni.zonefile,\n        zonefile_hash: ni.zonefile_hash,\n      };\n      return nameInfo;\n    });\n  }\n\n  getBlockchainNameRecord(name: string): Promise<any> {\n    // TODO: send to blockstack.js\n    const url = `${this.legacyNetwork.blockstackAPIUrl}/v1/blockchains/bitcoin/names/${name}`;\n    return fetch(url)\n      .then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // coerce all addresses\n        const fixedAddresses: Record<string, any> = {};\n        for (const addrAttr of ['address', 'importer_address', 'recipient_address']) {\n          if (nameInfo.hasOwnProperty(addrAttr) && nameInfo[addrAttr]) {\n            fixedAddresses[addrAttr] = this.legacyNetwork.coerceAddress(nameInfo[addrAttr]);\n          }\n        }\n        return Object.assign(nameInfo, fixedAddresses);\n      });\n  }\n\n  getNameHistory(name: string, page: number): Promise<Record<string, any[]>> {\n    // TODO: send to blockstack.js\n    const url = `${this.legacyNetwork.blockstackAPIUrl}/v1/names/${name}/history?page=${page}`;\n    return fetch(url)\n      .then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        }\n        return resp.json();\n      })\n      .then(historyInfo => {\n        // coerce all addresses\n        const fixedHistory: Record<string, any[]> = {};\n        for (const historyBlock of Object.keys(historyInfo)) {\n          const fixedHistoryList: any[] = [];\n          for (const historyEntry of historyInfo[historyBlock]) {\n            const fixedAddresses: Record<string, string> = {};\n            let fixedHistoryEntry: any = {};\n            for (const addrAttr of ['address', 'importer_address', 'recipient_address']) {\n              if (historyEntry.hasOwnProperty(addrAttr) && historyEntry[addrAttr]) {\n                fixedAddresses[addrAttr] = this.legacyNetwork.coerceAddress(historyEntry[addrAttr]);\n              }\n            }\n            fixedHistoryEntry = Object.assign(historyEntry, fixedAddresses);\n            fixedHistoryList.push(fixedHistoryEntry);\n          }\n          fixedHistory[historyBlock] = fixedHistoryList;\n        }\n        return fixedHistory;\n      });\n  }\n\n  coerceAddress(address: string) {\n    return this.legacyNetwork.coerceAddress(address);\n  }\n\n  getAccountHistoryPage(address: string, page: number) {\n    return this.legacyNetwork.getAccountHistoryPage(address, page);\n  }\n\n  broadcastTransaction(tx: string) {\n    return this.legacyNetwork.broadcastTransaction(tx);\n  }\n\n  broadcastZoneFile(zonefile: string, txid: string) {\n    return this.legacyNetwork.broadcastZoneFile(zonefile, txid);\n  }\n\n  getNamesOwned(address: string) {\n    return this.legacyNetwork.getNamesOwned(address);\n  }\n}\n\n/*\n * Instantiate a network using settings from the config file.\n */\nexport function getNetwork(configData: CLI_CONFIG_TYPE, regTest: boolean): BlockstackNetwork {\n  if (regTest) {\n    const network = new blockstack.network.LocalRegtest(\n      configData.blockstackAPIUrl,\n      configData.broadcastServiceUrl,\n      new blockstack.network.BitcoindAPI(configData.utxoServiceUrl, {\n        username: configData.bitcoindUsername || 'blockstack',\n        password: configData.bitcoindPassword || 'blockstacksystem',\n      })\n    );\n\n    return network;\n  } else {\n    const network = new BlockstackNetwork(\n      configData.blockstackAPIUrl,\n      configData.broadcastServiceUrl,\n      new blockstack.network.BlockchainInfoApi(configData.utxoServiceUrl)\n    );\n\n    return network;\n  }\n}\n"],"names":["BN","require","SATOSHIS_PER_BTC","CLINetworkAdapter","network","opts","optsDefault","consensusHash","feeRate","namespaceBurnAddress","priceToPay","priceUnits","receiveFeesPeriod","gracePeriod","altAPIUrl","nodeAPIUrl","altTransactionBroadcasterUrl","broadcastServiceUrl","Object","assign","legacyNetwork","BlockstackNetwork","btc","layer1","optAlwaysCoerceAddress","isMainnet","pubKeyHash","bitcoin","isTestnet","testnet","setCoerceMainnetAddress","value","coerceMainnetAddress","address","addressInfo","fromBase58Check","addressHash","hash","addressVersion","version","newVersion","scriptHash","toBase58Check","getFeeRate","Promise","resolve","Math","floor","getConsensusHash","then","c","getGracePeriod","g","getNamePrice","name","units","String","amount","priceInfo","getNamespacePrice","namespaceID","getNamespaceBurnAddress","namespace","useCLI","all","fetch","blockstackAPIUrl","getBlockHeight","resp","blockHeight","status","Error","json","namespaceInfo","reveal_block","coerceAddress","getNameInfo","ni","nameInfo","blockchain","did","expire_block","grace_period","last_txid","renewal_deadline","resolver","zonefile","zonefile_hash","getBlockchainNameRecord","url","fixedAddresses","addrAttr","hasOwnProperty","getNameHistory","page","historyInfo","fixedHistory","keys","historyBlock","fixedHistoryList","historyEntry","fixedHistoryEntry","push","getAccountHistoryPage","broadcastTransaction","tx","broadcastZoneFile","txid","getNamesOwned","getNetwork","configData","regTest","blockstack","LocalRegtest","BitcoindAPI","utxoServiceUrl","username","bitcoindUsername","password","bitcoindPassword","BlockchainInfoApi"],"mappings":"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"}