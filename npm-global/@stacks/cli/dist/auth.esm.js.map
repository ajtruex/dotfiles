{"version":3,"file":"auth.esm.js","sources":["../src/auth.ts"],"sourcesContent":["import * as blockstack from 'blockstack';\nimport * as express from 'express';\nimport * as crypto from 'crypto';\nimport * as jsontokens from 'jsontokens';\nimport * as logger from 'winston';\n\nimport {\n  gaiaConnect,\n  gaiaUploadProfileAll,\n  makeAssociationToken,\n  getGaiaAddressFromProfile,\n} from './data';\n\nimport { getApplicationKeyInfo, getOwnerKeyInfo, extractAppKey } from './keys';\n\nimport { nameLookup, makeProfileJWT } from './utils';\n\nimport { CLINetworkAdapter } from './network';\n\nimport { GaiaHubConfig } from '@stacks/storage';\n\nexport const SIGNIN_CSS = `\nh1 { \n  font-family: monospace; \n  font-size: 24px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 700; \n  line-height: 26.4px; \n} \nh3 { \n  font-family: monospace; \n  font-size: 14px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 700; \n  line-height: 15.4px; \n}\np { \n  font-family: monospace; \n  font-size: 14px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 400; \n  line-height: 20px; \n}\nb {\n  background-color: #e8e8e8;\n}\npre { \n  font-family: monospace; \n  font-size: 13px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 400; \n  line-height: 18.5714px;\n}`;\n\nexport const SIGNIN_HEADER = `<html><head><style>${SIGNIN_CSS}</style></head></body><h3>Blockstack CLI Sign-in</h3><br>`;\nexport const SIGNIN_DESC = '<p>Sign-in request for <b>\"{appName}\"</b></p>';\nexport const SIGNIN_SCOPES = '<p>Requested scopes: <b>\"{appScopes}\"</b></p>';\nexport const SIGNIN_FMT_NAME = '<p><a href=\"{authRedirect}\">{blockstackID}</a> ({idAddress})</p>';\nexport const SIGNIN_FMT_ID = '<p><a href=\"{authRedirect}\">{idAddress}</a> (anonymous)</p>';\nexport const SIGNIN_FOOTER = '</body></html>';\n\nexport interface NamedIdentityType {\n  name: string;\n  idAddress: string;\n  privateKey: string;\n  index: number;\n  profile: Object;\n  profileUrl: string;\n}\n\ninterface AuthRequestType {\n  jti: string;\n  iat: number;\n  exp: number;\n  iss: null | string;\n  public_keys: string[];\n  domain_name: string;\n  manifest_uri: string;\n  redirect_uri: string;\n  version: string;\n  do_not_include_profile: boolean;\n  supports_hub_url: boolean;\n  scopes: string[];\n}\n\n// new ecdsa private key each time\nconst authTransitNonce = crypto.randomBytes(32).toString('hex');\n\n/*\n * Get the app private key\n */\nasync function getAppPrivateKey(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  id: NamedIdentityType,\n  appOrigin: string\n): Promise<string> {\n  const appKeyInfo = await getApplicationKeyInfo(\n    network,\n    mnemonic,\n    id.idAddress,\n    appOrigin,\n    id.index\n  );\n  let appPrivateKey;\n  try {\n    const existingAppAddress = getGaiaAddressFromProfile(network, id.profile, appOrigin);\n    appPrivateKey = extractAppKey(network, appKeyInfo, existingAppAddress);\n  } catch (e) {\n    appPrivateKey = extractAppKey(network, appKeyInfo);\n  }\n\n  return appPrivateKey;\n}\n\n/*\n * Make a sign-in link\n */\nasync function makeSignInLink(\n  network: CLINetworkAdapter,\n  authPort: number,\n  mnemonic: string,\n  authRequest: AuthRequestType,\n  hubUrl: string,\n  id: NamedIdentityType\n): Promise<string> {\n  const appOrigin = authRequest.domain_name;\n  const appPrivateKey = await getAppPrivateKey(network, mnemonic, id, appOrigin);\n\n  const associationToken = makeAssociationToken(appPrivateKey, id.privateKey);\n  const authResponseTmp = blockstack.makeAuthResponse(\n    id.privateKey,\n    {},\n    id.name,\n    { email: undefined, profileUrl: id.profileUrl },\n    undefined,\n    appPrivateKey,\n    undefined,\n    authRequest.public_keys[0],\n    hubUrl,\n    blockstack.config.network.blockstackAPIUrl,\n    associationToken\n  );\n\n  // pass along some helpful data from the authRequest\n  const authResponsePayload = jsontokens.decodeToken(authResponseTmp).payload;\n  const id_public = Object.assign({}, id);\n  id_public.profile = {};\n  // @ts-ignore\n  id_public.privateKey = undefined;\n\n  (authResponsePayload as any).metadata = {\n    id: id_public,\n    profileUrl: id.profileUrl,\n    appOrigin: appOrigin,\n    redirect_uri: authRequest.redirect_uri,\n    scopes: authRequest.scopes,\n    salt: crypto.randomBytes(16).toString('hex'),\n    nonce: authTransitNonce,\n    // fill in more CLI-specific fields here\n  };\n\n  const tokenSigner = new jsontokens.TokenSigner('ES256k', id.privateKey);\n  const authResponse = tokenSigner.sign(authResponsePayload);\n\n  return blockstack.updateQueryStringParameter(\n    `http://localhost:${authPort}/signin`,\n    'authResponse',\n    authResponse\n  );\n}\n\n/*\n * Make the sign-in page\n */\nasync function makeAuthPage(\n  network: CLINetworkAdapter,\n  authPort: number,\n  mnemonic: string,\n  hubUrl: string,\n  manifest: any,\n  authRequest: AuthRequestType,\n  ids: Array<NamedIdentityType>\n): Promise<string> {\n  let signinBody = SIGNIN_HEADER;\n  const signinDescription = SIGNIN_DESC.replace(/{appName}/, manifest.name || '(Unknown app)');\n\n  const signinScopes = SIGNIN_SCOPES.replace(\n    /{appScopes}/,\n    authRequest.scopes.length > 0 ? authRequest.scopes.join(', ') : '(none)'\n  );\n\n  signinBody = `${signinBody}${signinDescription}${signinScopes}`;\n\n  for (let i = 0; i < ids.length; i++) {\n    let signinEntry;\n    if (ids[i].name) {\n      signinEntry = SIGNIN_FMT_NAME.replace(\n        /{authRedirect}/,\n        await makeSignInLink(network, authPort, mnemonic, authRequest, hubUrl, ids[i])\n      )\n        .replace(/{blockstackID}/, ids[i].name)\n        .replace(/{idAddress}/, ids[i].idAddress);\n    } else {\n      signinEntry = SIGNIN_FMT_ID.replace(\n        /{authRedirect}/,\n        await makeSignInLink(network, authPort, mnemonic, authRequest, hubUrl, ids[i])\n      ).replace(/{idAddress}/, ids[i].idAddress);\n    }\n\n    signinBody = `${signinBody}${signinEntry}`;\n  }\n\n  signinBody = `${signinBody}${SIGNIN_FOOTER}`;\n  return signinBody;\n}\n\n/*\n * Find all identity addresses that have names attached to them.\n * Fills in identities.\n */\nasync function loadNamedIdentitiesLoop(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number,\n  identities: NamedIdentityType[]\n): Promise<NamedIdentityType[]> {\n  // 65536 is a ridiculously huge number\n  if (index > 65536) {\n    throw new Error('Too many names');\n  }\n\n  const keyInfo = await getOwnerKeyInfo(network, mnemonic, index);\n  const nameList = await network.getNamesOwned(keyInfo.idAddress.slice(3));\n  if (nameList.length === 0) {\n    // out of names\n    return identities;\n  }\n  for (let i = 0; i < nameList.length; i++) {\n    const identity: NamedIdentityType = {\n      name: nameList[i],\n      idAddress: keyInfo.idAddress,\n      privateKey: keyInfo.privateKey,\n      index: index,\n      profile: {},\n      profileUrl: '',\n    };\n    identities.push(identity);\n  }\n  return await loadNamedIdentitiesLoop(network, mnemonic, index + 1, identities);\n}\n\n/*\n * Load all named identities for a mnemonic.\n * Keep loading until we find an ID-address that does not have a name.\n */\nexport function loadNamedIdentities(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<Array<NamedIdentityType>> {\n  return loadNamedIdentitiesLoop(network, mnemonic, 0, []);\n}\n\n/*\n * Generate identity info for an unnamed ID\n */\nasync function loadUnnamedIdentity(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number\n): Promise<NamedIdentityType> {\n  const keyInfo = await getOwnerKeyInfo(network, mnemonic, index);\n  const idInfo = {\n    name: '',\n    idAddress: keyInfo.idAddress,\n    privateKey: keyInfo.privateKey,\n    index: index,\n    profile: {},\n    profileUrl: '',\n  };\n  return idInfo;\n}\n\n/*\n * Send a JSON HTTP response\n */\nfunction sendJSON(res: express.Response, data: Object, statusCode: number) {\n  logger.info(`Respond ${statusCode}: ${JSON.stringify(data)}`);\n  res.writeHead(statusCode, { 'Content-Type': 'application/json' });\n  res.write(JSON.stringify(data));\n  res.end();\n}\n\n/*\n * Get all of a 12-word phrase's identities, profiles, and Gaia connections.\n * Returns a Promise to an Array of NamedIdentityType instances.\n *\n * NOTE: should be the *only* promise chain running!\n */\nasync function getIdentityInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  _appGaiaHub: string,\n  _profileGaiaHub: string\n): Promise<NamedIdentityType[]> {\n  network.setCoerceMainnetAddress(true); // for lookups in regtest\n  let identities: NamedIdentityType[];\n\n  try {\n    // load up all of our identity addresses and profile URLs\n    identities = await loadNamedIdentities(network, mnemonic);\n    const nameInfoPromises = identities.map(id => {\n      const lookup: Promise<{\n        profile: any;\n        profileUrl?: string;\n        zonefile?: string;\n      } | null> = nameLookup(network, id.name, true).catch(() => null);\n      return lookup;\n    });\n\n    let nameDatas = await Promise.all(nameInfoPromises);\n\n    network.setCoerceMainnetAddress(false);\n    nameDatas = nameDatas.filter(p => p !== null && p !== undefined);\n\n    for (let i = 0; i < nameDatas.length; i++) {\n      if (nameDatas[i]!.hasOwnProperty('error') && (nameDatas[i] as any).error) {\n        // no data for this name\n        identities[i].profileUrl = '';\n      } else {\n        identities[i].profileUrl = nameDatas[i]!.profileUrl!;\n        identities[i].profile = nameDatas[i]!.profile;\n      }\n    }\n\n    const nextIndex = identities.length + 1;\n\n    // ignore identities with no data\n    identities = identities.filter(id => !!id.profileUrl);\n\n    // add in the next non-named identity\n    identities.push(await loadUnnamedIdentity(network, mnemonic, nextIndex));\n  } catch (e) {\n    network.setCoerceMainnetAddress(false);\n    throw e;\n  }\n\n  return identities;\n}\n\n/*\n * Handle GET /auth?authRequest=...\n * If the authRequest is verifiable and well-formed, and if we can fetch the application\n * manifest, then we can render an auth page to the user.\n * Serves back the sign-in page on success.\n * Serves back an error page on error.\n * Returns a Promise that resolves to nothing.\n *\n * NOTE: should be the *only* promise chain running!\n */\nexport async function handleAuth(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  gaiaHubUrl: string,\n  profileGaiaHub: string,\n  port: number,\n  req: express.Request,\n  res: express.Response\n): Promise<any> {\n  const authToken = req.query.authRequest as string;\n  if (!authToken) {\n    return Promise.resolve().then(() => {\n      sendJSON(res, { error: 'No authRequest given' }, 400);\n    });\n  }\n\n  let errorMsg = '';\n  let identities: NamedIdentityType[] = [];\n\n  try {\n    identities = await getIdentityInfo(network, mnemonic, gaiaHubUrl, profileGaiaHub);\n\n    errorMsg = 'Unable to verify authentication token';\n    const valid = await blockstack.verifyAuthRequest(authToken);\n\n    if (!valid) {\n      errorMsg = 'Invalid authentication token: could not verify';\n      throw new Error(errorMsg);\n    }\n    errorMsg = 'Unable to fetch app manifest';\n    const appManifest = await blockstack.fetchAppManifest(authToken);\n\n    errorMsg = 'Unable to decode token';\n    const decodedAuthToken = jsontokens.decodeToken(authToken);\n    const decodedAuthPayload = decodedAuthToken.payload;\n    if (!decodedAuthPayload) {\n      errorMsg = 'Invalid authentication token: no payload';\n      throw new Error(errorMsg);\n    }\n\n    errorMsg = 'Unable to make auth page';\n\n    // make sign-in page\n    const authPage = await makeAuthPage(\n      network,\n      port,\n      mnemonic,\n      gaiaHubUrl,\n      appManifest,\n      decodedAuthPayload as AuthRequestType,\n      identities\n    );\n\n    res.writeHead(200, { 'Content-Type': 'text/html', 'Content-Length': authPage.length });\n    res.write(authPage);\n    res.end();\n  } catch (e) {\n    if (!errorMsg) {\n      errorMsg = e.message;\n    }\n\n    console.log(e.stack);\n    logger.error(errorMsg);\n    sendJSON(res, { error: `Unable to authenticate app request: ${errorMsg}` }, 400);\n  }\n}\n\n/*\n * Update a named identity's profile with new app data, if necessary.\n * Indicates whether or not the profile was changed.\n */\nfunction updateProfileApps(\n  network: CLINetworkAdapter,\n  id: NamedIdentityType,\n  appOrigin: string,\n  appGaiaConfig: GaiaHubConfig,\n  profile?: any\n): Promise<{ profile: any; changed: boolean }> {\n  let needProfileUpdate = false;\n\n  // go get the profile from the profile URL in the id\n  const profilePromise = Promise.resolve().then(() => {\n    if (profile === null || profile === undefined) {\n      return nameLookup(network, id.name).catch(_e => null);\n    } else {\n      return { profile: profile };\n    }\n  });\n\n  return profilePromise.then(profileData => {\n    if (profileData) {\n      profile = profileData.profile;\n    }\n\n    if (!profile) {\n      // instantiate\n      logger.debug(`Profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Instantiating profile for ${id.name}`);\n      needProfileUpdate = true;\n      profile = {\n        type: '@Person',\n        account: [],\n        apps: {},\n      };\n    }\n\n    // do we need to update the Gaia hub read URL in the profile?\n    if (profile.apps === null || profile.apps === undefined) {\n      needProfileUpdate = true;\n\n      logger.debug(`Adding multi-reader Gaia links to profile for ${id.name}`);\n      profile.apps = {};\n    }\n\n    const gaiaPrefix = `${appGaiaConfig.url_prefix}${appGaiaConfig.address}/`;\n\n    if (!profile.apps.hasOwnProperty(appOrigin) || !profile.apps[appOrigin]) {\n      needProfileUpdate = true;\n      logger.debug(\n        `Setting Gaia read URL ${gaiaPrefix} for ${appOrigin} ` + `in profile for ${id.name}`\n      );\n\n      profile.apps[appOrigin] = gaiaPrefix;\n    } else if (!profile.apps[appOrigin].startsWith(gaiaPrefix)) {\n      needProfileUpdate = true;\n      logger.debug(\n        `Overriding Gaia read URL for ${appOrigin} from ${profile.apps[appOrigin]} ` +\n          `to ${gaiaPrefix} in profile for ${id.name}`\n      );\n\n      profile.apps[appOrigin] = gaiaPrefix;\n    }\n\n    return { profile, changed: needProfileUpdate };\n  });\n}\n\n/*\n * Updates a named identitie's profile's API settings, if necessary.\n * Indicates whether or not the profile data changed.\n */\nfunction updateProfileAPISettings(\n  network: CLINetworkAdapter,\n  id: NamedIdentityType,\n  appGaiaConfig: GaiaHubConfig,\n  profile?: any\n): Promise<{ profile: any; changed: boolean }> {\n  let needProfileUpdate = false;\n\n  // go get the profile from the profile URL in the id\n  const profilePromise = Promise.resolve().then(() => {\n    if (profile === null || profile === undefined) {\n      return nameLookup(network, id.name).catch(_e => null);\n    } else {\n      return { profile: profile };\n    }\n  });\n\n  return profilePromise.then(profileData => {\n    if (profileData) {\n      profile = profileData.profile;\n    }\n\n    if (!profile) {\n      // instantiate\n      logger.debug(`Profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Instantiating profile for ${id.name}`);\n      needProfileUpdate = true;\n      profile = {\n        type: '@Person',\n        account: [],\n        api: {},\n      };\n    }\n\n    // do we need to update the API settings in the profile?\n    if (profile.api === null || profile.api === undefined) {\n      needProfileUpdate = true;\n\n      logger.debug(`Adding API settings to profile for ${id.name}`);\n      profile.api = {\n        gaiaHubConfig: {\n          url_prefix: appGaiaConfig.url_prefix,\n        },\n        gaiaHubUrl: appGaiaConfig.server,\n      };\n    }\n\n    if (\n      !profile.hasOwnProperty('api') ||\n      !profile.api.hasOwnProperty('gaiaHubConfig') ||\n      !profile.api.gaiaHubConfig.hasOwnProperty('url_prefix') ||\n      !profile.api.gaiaHubConfig.url_prefix ||\n      !profile.api.hasOwnProperty('gaiaHubUrl') ||\n      !profile.api.gaiaHubUrl\n    ) {\n      logger.debug(`Existing profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Updating API settings to profile for ${id.name}`);\n      profile.api = {\n        gaiaHubConfig: {\n          url_prefix: appGaiaConfig.url_prefix,\n        },\n        gaiaHubUrl: appGaiaConfig.server,\n      };\n    }\n\n    return { profile, changed: needProfileUpdate };\n  });\n}\n\n/*\n * Handle GET /signin?encAuthResponse=...\n * Takes an encrypted authResponse from the page generated on GET /auth?authRequest=....,\n * verifies it, updates the name's profile's app's entry with the latest Gaia\n * hub information (if necessary), and redirects the user back to the application.\n *\n * If adminKey is given, then the new app private key will be automatically added\n * as an authorized writer to the Gaia hub.\n *\n * Redirects the user on success.\n * Sends the user an error page on failure.\n * Returns a Promise that resolves to nothing.\n */\nexport async function handleSignIn(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  appGaiaHub: string,\n  profileGaiaHub: string,\n  req: express.Request,\n  res: express.Response\n): Promise<any> {\n  const authResponseQP = req.query.authResponse as string;\n  if (!authResponseQP) {\n    return Promise.resolve().then(() => {\n      sendJSON(res, { error: 'No authResponse given' }, 400);\n    });\n  }\n  const nameLookupUrl = `${network.legacyNetwork.blockstackAPIUrl}/v1/names/`;\n\n  let errorMsg = '';\n  let errorStatusCode = 400;\n  let authResponsePayload: any;\n\n  let id: NamedIdentityType;\n  let profileUrl: string;\n  let appOrigin: string;\n  let redirectUri: string;\n  let scopes: string[];\n  let authResponse: string;\n  let hubConfig: GaiaHubConfig;\n  let needProfileAPIUpdate = false;\n  let profileAPIUpdate: boolean;\n\n  try {\n    const valid = await blockstack.verifyAuthResponse(authResponseQP, nameLookupUrl);\n    if (!valid) {\n      errorMsg = `Unable to verify authResponse token ${authResponseQP}`;\n      throw new Error(errorMsg);\n    }\n\n    const authResponseToken = jsontokens.decodeToken(authResponseQP);\n    authResponsePayload = authResponseToken.payload;\n\n    id = authResponsePayload.metadata.id;\n    profileUrl = authResponsePayload.metadata.profileUrl;\n    appOrigin = authResponsePayload.metadata.appOrigin;\n    redirectUri = authResponsePayload.metadata.redirect_uri;\n    scopes = authResponsePayload.metadata.scopes;\n    const nonce = authResponsePayload.metadata.nonce;\n\n    if (nonce != authTransitNonce) {\n      throw new Error('Invalid auth response: not generated by this authenticator');\n    }\n\n    // restore\n    id.privateKey = (await getOwnerKeyInfo(network, mnemonic, id.index)).privateKey;\n\n    const appPrivateKey = await getAppPrivateKey(network, mnemonic, id, appOrigin);\n\n    // remove sensitive (CLI-specific) information\n    authResponsePayload.metadata = {\n      profileUrl: profileUrl,\n    };\n\n    authResponse = new jsontokens.TokenSigner('ES256K', id.privateKey).sign(authResponsePayload);\n\n    logger.debug(`App ${appOrigin} requests scopes ${JSON.stringify(scopes)}`);\n\n    // connect to the app gaia hub\n    const appHubConfig = await gaiaConnect(network, appGaiaHub, appPrivateKey);\n\n    hubConfig = appHubConfig;\n    let newProfileData = await updateProfileAPISettings(network, id, hubConfig);\n\n    needProfileAPIUpdate = newProfileData.changed;\n    profileAPIUpdate = newProfileData.profile;\n    newProfileData = await updateProfileApps(network, id, appOrigin, hubConfig, profileAPIUpdate);\n\n    const profile = newProfileData.profile;\n    const needProfileSigninUpdate = newProfileData.changed && scopes.includes('store_write');\n\n    logger.debug(`Resulting profile for ${id.name} is ${JSON.stringify(profile)}`);\n\n    let gaiaUrls: any;\n\n    // sign and replicate new profile if we need to.\n    // otherwise do nothing\n    if (needProfileSigninUpdate) {\n      logger.debug(`Upload new profile with new sign-in data to ${profileGaiaHub}`);\n      const profileJWT = makeProfileJWT(profile, id.privateKey);\n      gaiaUrls = await gaiaUploadProfileAll(\n        network,\n        [profileGaiaHub],\n        profileJWT,\n        id.privateKey,\n        id.name\n      );\n    } else if (needProfileAPIUpdate) {\n      // API settings changed, but we won't be adding an app entry\n      logger.debug(`Upload new profile with new API settings to ${profileGaiaHub}`);\n      const profileJWT = makeProfileJWT(profileAPIUpdate, id.privateKey);\n      gaiaUrls = await gaiaUploadProfileAll(\n        network,\n        [profileGaiaHub],\n        profileJWT,\n        id.privateKey,\n        id.name\n      );\n    } else {\n      logger.debug(`Gaia read URL for ${appOrigin} is ${profile.apps[appOrigin]}`);\n      gaiaUrls = { dataUrls: [], error: null };\n    }\n\n    if (gaiaUrls.hasOwnProperty('error') && gaiaUrls.error) {\n      errorMsg = `Failed to upload new profile: ${gaiaUrls.error}`;\n      errorStatusCode = 502;\n      throw new Error(errorMsg);\n    }\n\n    // success!\n    // redirect to application\n    logger.debug(`Handled sign-in to ${appOrigin} using ${id.name}`);\n    const appUri = blockstack.updateQueryStringParameter(redirectUri, 'authResponse', authResponse);\n\n    logger.info(`Redirect to ${appUri}`);\n    res.writeHead(302, { Location: appUri });\n    res.end();\n  } catch (e) {\n    logger.error(e);\n    logger.error(errorMsg);\n    sendJSON(res, { error: `Unable to process signin request: ${errorMsg}` }, errorStatusCode);\n  }\n}\n"],"names":["SIGNIN_CSS","SIGNIN_HEADER","SIGNIN_DESC","SIGNIN_SCOPES","SIGNIN_FMT_NAME","SIGNIN_FMT_ID","SIGNIN_FOOTER","authTransitNonce","crypto","toString","getAppPrivateKey","network","mnemonic","id","appOrigin","getApplicationKeyInfo","idAddress","index","appKeyInfo","existingAppAddress","getGaiaAddressFromProfile","profile","appPrivateKey","extractAppKey","e","makeSignInLink","authPort","authRequest","hubUrl","domain_name","associationToken","makeAssociationToken","privateKey","authResponseTmp","blockstack","name","email","undefined","profileUrl","public_keys","blockstackAPIUrl","authResponsePayload","jsontokens","payload","id_public","Object","assign","metadata","redirect_uri","scopes","salt","nonce","tokenSigner","authResponse","sign","makeAuthPage","manifest","ids","signinBody","signinDescription","replace","signinScopes","length","join","i","signinEntry","loadNamedIdentitiesLoop","identities","Error","getOwnerKeyInfo","keyInfo","getNamesOwned","slice","nameList","identity","push","loadNamedIdentities","loadUnnamedIdentity","idInfo","sendJSON","res","data","statusCode","logger","JSON","stringify","writeHead","write","end","getIdentityInfo","_appGaiaHub","_profileGaiaHub","setCoerceMainnetAddress","nameInfoPromises","map","lookup","nameLookup","Promise","all","nameDatas","filter","p","hasOwnProperty","error","nextIndex","handleAuth","gaiaHubUrl","profileGaiaHub","port","req","authToken","query","resolve","then","errorMsg","valid","appManifest","decodedAuthToken","decodedAuthPayload","authPage","message","console","log","stack","updateProfileApps","appGaiaConfig","needProfileUpdate","profilePromise","_e","profileData","type","account","apps","gaiaPrefix","url_prefix","address","startsWith","changed","updateProfileAPISettings","api","gaiaHubConfig","server","handleSignIn","appGaiaHub","authResponseQP","nameLookupUrl","legacyNetwork","errorStatusCode","needProfileAPIUpdate","authResponseToken","redirectUri","gaiaConnect","appHubConfig","hubConfig","newProfileData","profileAPIUpdate","needProfileSigninUpdate","includes","profileJWT","makeProfileJWT","gaiaUploadProfileAll","gaiaUrls","dataUrls","appUri","Location"],"mappings":"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"}