{"version":3,"file":"keys.esm.js","sources":["../src/keys.ts"],"sourcesContent":["// TODO: most of this code should be in blockstack.js\n// Will remove most of this code once the wallet functionality is there instead.\n\nimport * as blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nimport * as bip39 from 'bip39';\n\nconst c32check = require('c32check');\n\nimport { getPrivateKeyAddress } from './utils';\n\nimport { getMaxIDSearchIndex } from './cli';\n\nimport { CLINetworkAdapter } from './network';\n\nimport * as bip32 from 'bip32';\nimport { BIP32Interface } from 'bip32';\n\nexport const STRENGTH = 128; // 12 words\nexport const STX_WALLET_COMPATIBLE_SEED_STRENGTH = 256;\nexport const DERIVATION_PATH = \"m/44'/5757'/0'/0/0\";\n\nexport type OwnerKeyInfoType = {\n  privateKey: string;\n  version: string;\n  index: number;\n  idAddress: string;\n};\n\nexport type PaymentKeyInfoType = {\n  privateKey: string;\n  address: {\n    BTC: string;\n    STACKS: string;\n  };\n  index: number;\n};\n\nexport type StacksKeyInfoType = {\n  privateKey: string;\n  address: string;\n  btcAddress: string;\n  index: number;\n};\n\nexport type AppKeyInfoType = {\n  keyInfo: {\n    privateKey: string;\n    address: string;\n  };\n  legacyKeyInfo: {\n    privateKey: string;\n    address: string;\n  };\n  ownerKeyIndex: number;\n};\n\nasync function walletFromMnemonic(mnemonic: string): Promise<blockstack.BlockstackWallet> {\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return new blockstack.BlockstackWallet(bip32.fromSeed(seed));\n}\n\nfunction getNodePrivateKey(node: BIP32Interface): string {\n  return blockstack.ecPairToHexString(bitcoin.ECPair.fromPrivateKey(node.privateKey!));\n}\n\n/*\n * Get the owner key information for a 12-word phrase, at a specific index.\n * @network (object) the blockstack network\n * @mnemonic (string) the 12-word phrase\n * @index (number) the account index\n * @version (string) the derivation version string\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .version (string) the version string of the derivation\n *    .idAddress (string) the ID-address\n */\nexport async function getOwnerKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number,\n  version: string = 'v0.10-current'\n): Promise<OwnerKeyInfoType> {\n  const wallet = await walletFromMnemonic(mnemonic);\n  const identity = wallet.getIdentityAddressNode(index);\n  const addr = network.coerceAddress(blockstack.BlockstackWallet.getAddressFromBIP32Node(identity));\n  const privkey = getNodePrivateKey(identity);\n  return {\n    privateKey: privkey,\n    version: version,\n    index: index,\n    idAddress: `ID-${addr}`,\n  } as OwnerKeyInfoType;\n}\n\n/*\n * Get the payment key information for a 12-word phrase.\n * @network (object) the blockstack network\n * @mnemonic (string) the 12-word phrase\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .address (string) the address of the private key\n */\nexport async function getPaymentKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<PaymentKeyInfoType> {\n  const wallet = await walletFromMnemonic(mnemonic);\n  const privkey = wallet.getBitcoinPrivateKey(0);\n  const addr = getPrivateKeyAddress(network, privkey);\n  const result: PaymentKeyInfoType = {\n    privateKey: privkey,\n    address: {\n      BTC: addr,\n      STACKS: c32check.b58ToC32(addr),\n    },\n    index: 0,\n  };\n  return result;\n}\n\n/*\n * Get the payment key information for a 24-word phrase used by the Stacks wallet.\n * @network (object) the blockstack network\n * @mnemonic (string) the 24-word phrase\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .address (string) the address of the private key\n */\nexport async function getStacksWalletKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<StacksKeyInfoType> {\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  const master = bip32.fromSeed(seed);\n  const child = master.derivePath(\"m/44'/5757'/0'/0/0\"); // taken from stacks-wallet. See https://github.com/blockstack/stacks-wallet\n  const ecPair = bitcoin.ECPair.fromPrivateKey(child.privateKey!);\n  const privkey = blockstack.ecPairToHexString(ecPair);\n\n  const addr = getPrivateKeyAddress(network, privkey);\n  let btcAddress: string;\n  if (network.isTestnet()) {\n    // btcAddress = const { address } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey });\n    const { address } = bitcoin.payments.p2pkh({\n      pubkey: ecPair.publicKey,\n      network: bitcoin.networks.regtest,\n    });\n    btcAddress = address!;\n  } else {\n    const { address } = bitcoin.payments.p2pkh({\n      pubkey: ecPair.publicKey,\n      network: bitcoin.networks.bitcoin,\n    });\n    btcAddress = address!;\n  }\n  const result: StacksKeyInfoType = {\n    privateKey: privkey,\n    address: c32check.b58ToC32(addr),\n    btcAddress,\n    index: 0,\n  };\n  return result;\n}\n\n/*\n * Find the index of an ID address, given the mnemonic.\n * Returns the index if found\n * Returns -1 if not found\n */\nexport async function findIdentityIndex(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  idAddress: string,\n  maxIndex?: number\n): Promise<number> {\n  if (!maxIndex) {\n    maxIndex = getMaxIDSearchIndex();\n  }\n\n  if (idAddress.substring(0, 3) !== 'ID-') {\n    throw new Error('Not an identity address');\n  }\n\n  const wallet = await walletFromMnemonic(mnemonic);\n  for (let i = 0; i < maxIndex; i++) {\n    const identity = wallet.getIdentityAddressNode(i);\n    const addr = blockstack.BlockstackWallet.getAddressFromBIP32Node(identity);\n\n    if (network.coerceAddress(addr) === network.coerceAddress(idAddress.slice(3))) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/*\n * Get the Gaia application key from a 12-word phrase\n * @network (object) the blockstack network\n * @mmemonic (string) the 12-word phrase\n * @idAddress (string) the ID-address used to sign in\n * @appDomain (string) the application's Origin\n *\n * Returns an object with\n *    .keyInfo (object) the app key info with the current derivation path\n *      .privateKey (string) the app's hex private key\n *      .address (string) the address of the private key\n *    .legacyKeyInfo (object) the app key info with the legacy derivation path\n *      .privateKey (string) the app's hex private key\n *      .address (string) the address of the private key\n */\nexport async function getApplicationKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  idAddress: string,\n  appDomain: string,\n  idIndex?: number\n): Promise<AppKeyInfoType> {\n  if (!idIndex) {\n    idIndex = -1;\n  }\n\n  if (idIndex < 0) {\n    idIndex = await findIdentityIndex(network, mnemonic, idAddress);\n    if (idIndex < 0) {\n      throw new Error('Identity address does not belong to this keychain');\n    }\n  }\n\n  const wallet = await walletFromMnemonic(mnemonic);\n  const identityOwnerAddressNode = wallet.getIdentityAddressNode(idIndex);\n  const appsNode = blockstack.BlockstackWallet.getAppsNode(identityOwnerAddressNode);\n\n  //const appPrivateKey = blockstack.BlockstackWallet.getAppPrivateKey(\n  //  appsNode.toBase58(), wallet.getIdentitySalt(), appDomain);\n  const legacyAppPrivateKey = blockstack.BlockstackWallet.getLegacyAppPrivateKey(\n    appsNode.toBase58(),\n    wallet.getIdentitySalt(),\n    appDomain\n  );\n\n  // TODO: figure out when we can start using the new derivation path\n  const res: AppKeyInfoType = {\n    keyInfo: {\n      privateKey: 'TODO', // appPrivateKey,\n      address: 'TODO', // getPrivateKeyAddress(network, `${appPrivateKey}01`)\n    },\n    legacyKeyInfo: {\n      privateKey: legacyAppPrivateKey,\n      address: getPrivateKeyAddress(network, `${legacyAppPrivateKey}01`),\n    },\n    ownerKeyIndex: idIndex,\n  };\n  return res;\n}\n\n/*\n * Extract the \"right\" app key\n */\nexport function extractAppKey(\n  network: CLINetworkAdapter,\n  appKeyInfo: {\n    keyInfo: { privateKey: string; address: string };\n    legacyKeyInfo: { privateKey: string; address: string };\n  },\n  appAddress?: string\n): string {\n  if (appAddress) {\n    if (\n      network.coerceMainnetAddress(appKeyInfo.keyInfo.address) ===\n      network.coerceMainnetAddress(appAddress)\n    ) {\n      return appKeyInfo.keyInfo.privateKey;\n    }\n    if (\n      network.coerceMainnetAddress(appKeyInfo.legacyKeyInfo.address) ===\n      network.coerceMainnetAddress(appAddress)\n    ) {\n      return appKeyInfo.legacyKeyInfo.privateKey;\n    }\n  }\n\n  const appPrivateKey =\n    appKeyInfo.keyInfo.privateKey === 'TODO' || !appKeyInfo.keyInfo.privateKey\n      ? appKeyInfo.legacyKeyInfo.privateKey\n      : appKeyInfo.keyInfo.privateKey;\n  return appPrivateKey;\n}\n"],"names":["c32check","require","STX_WALLET_COMPATIBLE_SEED_STRENGTH","walletFromMnemonic","mnemonic","bip39","seed","blockstack","bip32","getNodePrivateKey","node","bitcoin","fromPrivateKey","privateKey","getOwnerKeyInfo","network","index","version","wallet","identity","getIdentityAddressNode","addr","coerceAddress","getAddressFromBIP32Node","privkey","idAddress","getPaymentKeyInfo","getBitcoinPrivateKey","getPrivateKeyAddress","result","address","BTC","STACKS","b58ToC32","getStacksWalletKeyInfo","master","child","derivePath","ecPair","isTestnet","p2pkh","pubkey","publicKey","regtest","btcAddress","findIdentityIndex","maxIndex","getMaxIDSearchIndex","substring","Error","i","slice","getApplicationKeyInfo","appDomain","idIndex","identityOwnerAddressNode","appsNode","getAppsNode","legacyAppPrivateKey","getLegacyAppPrivateKey","toBase58","getIdentitySalt","res","keyInfo","legacyKeyInfo","ownerKeyIndex","extractAppKey","appKeyInfo","appAddress","coerceMainnetAddress","appPrivateKey"],"mappings":"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"}