{"version":3,"file":"cli.umd.development.js","sources":["../../../node_modules/regenerator-runtime/runtime.js","../src/argparse.ts","../src/encrypt.ts","../src/utils.ts","../src/keys.ts","../src/network.ts","../src/data.ts","../src/auth.ts","../src/cli.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import Ajv from 'ajv';\nimport * as process from 'process';\nimport * as fs from 'fs';\n\nexport const NAME_PATTERN = '^([0-9a-z_.+-]{3,37})$';\n\nexport const NAMESPACE_PATTERN = '^([0-9a-z_-]{1,19})$';\n\nexport const ADDRESS_CHARS = '[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{1,35}';\n\nexport const C32_ADDRESS_CHARS = '[0123456789ABCDEFGHJKMNPQRSTVWXYZ]+';\n\nexport const ADDRESS_PATTERN = `^(${ADDRESS_CHARS})$`;\n\nexport const ID_ADDRESS_PATTERN = `^ID-${ADDRESS_CHARS}$`;\n\nexport const STACKS_ADDRESS_PATTERN = `^(${C32_ADDRESS_CHARS})$`;\n\n// hex private key\nexport const PRIVATE_KEY_PATTERN = '^([0-9a-f]{64,66})$';\n\n// hex private key, no compression\nexport const PRIVATE_KEY_UNCOMPRESSED_PATTERN = '^([0-9a-f]{64})$';\n\n// nosign:addr\nexport const PRIVATE_KEY_NOSIGN_PATTERN = `^nosign:${ADDRESS_CHARS}$`;\n\n// m,pk1,pk2,...,pkn\nexport const PRIVATE_KEY_MULTISIG_PATTERN = '^([0-9]+),([0-9a-f]{64,66},)*([0-9a-f]{64,66})$';\n\n// segwit:p2sh:m,pk1,pk2,...,pkn\nexport const PRIVATE_KEY_SEGWIT_P2SH_PATTERN =\n  '^segwit:p2sh:([0-9]+),([0-9a-f]{64,66},)*([0-9a-f]{64,66})$';\n\n// any private key pattern we support\nexport const PRIVATE_KEY_PATTERN_ANY = `${PRIVATE_KEY_PATTERN}|${PRIVATE_KEY_MULTISIG_PATTERN}|${PRIVATE_KEY_SEGWIT_P2SH_PATTERN}|${PRIVATE_KEY_NOSIGN_PATTERN}`;\n\nexport const PUBLIC_KEY_PATTERN = '^([0-9a-f]{66,130})$';\n\nexport const INT_PATTERN = '^-?[0-9]+$';\n\nexport const ZONEFILE_HASH_PATTERN = '^([0-9a-f]{40})$';\n\nexport const URL_PATTERN = '^http[s]?://.+$';\n\nexport const SUBDOMAIN_PATTERN = '^([0-9a-z_+-]{1,37}).([0-9a-z_.+-]{3,37})$';\n\nexport const TXID_PATTERN = '^([0-9a-f]{64})$';\n\nexport const BOOLEAN_PATTERN = '^(0|1|true|false)$';\n\nexport interface CLI_LOG_CONFIG_TYPE {\n  level: string;\n  handleExceptions: boolean;\n  timestamp: boolean;\n  stringify: boolean;\n  colorize: boolean;\n  json: boolean;\n}\n\nexport interface CLI_CONFIG_TYPE {\n  blockstackAPIUrl: string;\n  blockstackNodeUrl: string;\n  broadcastServiceUrl: string;\n  utxoServiceUrl: string;\n  logConfig: CLI_LOG_CONFIG_TYPE;\n  bitcoindUsername?: string;\n  bitcoindPassword?: string;\n}\n\nconst LOG_CONFIG_DEFAULTS: CLI_LOG_CONFIG_TYPE = {\n  level: 'info',\n  handleExceptions: true,\n  timestamp: true,\n  stringify: true,\n  colorize: true,\n  json: true,\n};\n\nconst CONFIG_DEFAULTS: CLI_CONFIG_TYPE = {\n  blockstackAPIUrl: 'http://stacks-node-api.stacks.co',\n  blockstackNodeUrl: 'http://stacks-node-api.stacks.co',\n  broadcastServiceUrl: 'http://stacks-node-api.stacks.co/v2/transactions',\n  utxoServiceUrl: 'https://blockchain.info',\n  logConfig: LOG_CONFIG_DEFAULTS,\n};\n\nconst CONFIG_REGTEST_DEFAULTS: CLI_CONFIG_TYPE = {\n  blockstackAPIUrl: 'http://localhost:16268',\n  blockstackNodeUrl: 'http://localhost:16264',\n  broadcastServiceUrl: 'http://localhost:16269',\n  utxoServiceUrl: 'http://localhost:18332',\n  logConfig: LOG_CONFIG_DEFAULTS,\n  bitcoindPassword: 'blockstacksystem',\n  bitcoindUsername: 'blockstack',\n};\n\nconst PUBLIC_TESTNET_HOST = 'testnet-master.blockstack.org';\n\nconst CONFIG_TESTNET_DEFAULTS = {\n  blockstackAPIUrl: `http://${PUBLIC_TESTNET_HOST}:20443`,\n  blockstackNodeUrl: `http://${PUBLIC_TESTNET_HOST}:20443`,\n  broadcastServiceUrl: `http://${PUBLIC_TESTNET_HOST}:20443/v2/transactions`,\n  utxoServiceUrl: `http://${PUBLIC_TESTNET_HOST}:18332`,\n  logConfig: Object.assign({}, LOG_CONFIG_DEFAULTS, { level: 'debug' }),\n};\n\nexport const DEFAULT_CONFIG_PATH = '~/.blockstack-cli.conf';\nexport const DEFAULT_CONFIG_REGTEST_PATH = '~/.blockstack-cli-regtest.conf';\nexport const DEFAULT_CONFIG_TESTNET_PATH = '~/.blockstack-cli-testnet.conf';\n\nexport const DEFAULT_MAX_ID_SEARCH_INDEX = 256;\n\ninterface CLI_PROP_ITEM {\n  name: string;\n  type: 'string';\n  realtype: string;\n  pattern?: string;\n}\n\ninterface CLI_PROP {\n  [index: string]: {\n    type: 'array';\n    items: CLI_PROP_ITEM[];\n    minItems: number;\n    maxItems: number;\n    help: string;\n    group: string;\n  };\n}\n\n// CLI usage\nexport const CLI_ARGS = {\n  type: 'object',\n  properties: {\n    announce: {\n      type: 'array',\n      items: [\n        {\n          name: 'message_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Broadcast a message on the blockchain for subscribers to read.  ' +\n        'The `MESSAGE_HASH` argument must be the hash of a previously-announced zone file.  ' +\n        'The `OWNER_KEY` used to sign the transaction must correspond to the Blockstack ID ' +\n        'to which other users have already subscribed.  `OWNER_KEY` can be a single private key ' +\n        'or a serialized multisig private key bundle.\\n' +\n        '\\n' +\n        'If this command succeeds, it will print a transaction ID.  The rest of the Blockstack peer ' +\n        'network will process it once the transaction reaches 7 confirmations.\\n' +\n        '\\n' +\n        'Examples:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the owner key with the get_owner_keys command\\n' +\n        '    $ export OWNER_KEY=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ stx announce 737c631c7c5d911c6617993c21fba731363f1cfe \"$OWNER_KEY\"\\n' +\n        '    d51749aeec2803e91a2f8bdec8d3e413491fd816b4962372b214ab74acb0bba8\\n' +\n        '\\n' +\n        '    $ export OWNER_KEY=\"2,136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01,1885cba486a42960499d1f137ef3a475725ceb11f45d74631f9928280196f67401,2418981c7f3a91d4467a65a518e14fafa30e07e6879c11fab7106ea72b49a7cb01\"\\n' +\n        '    $ stx announce 737c631c7c5d911c6617993c21fba731363f1cfe \"$OWNER_KEY\"\\n' +\n        '    8136a1114098893b28a693e8d84451abf99ee37ef8766f4bc59808eed76968c9\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    authenticator: {\n      type: 'array',\n      items: [\n        {\n          name: 'app_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n          pattern: '.+',\n        },\n        {\n          name: 'profile_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'port',\n          type: 'string',\n          realtype: 'portnum',\n          pattern: '^[0-9]+',\n        },\n      ],\n      minItems: 2,\n      maxItems: 4,\n      help:\n        'Run an authentication endpoint for the set of names owned ' +\n        'by the given backup phrase.  Send applications the given Gaia hub URL on sign-in, ' +\n        'so the application will use it to read/write user data.\\n' +\n        '\\n' +\n        'You can supply your encrypted backup phrase instead of the raw backup phrase.  If so, ' +\n        'then you will be prompted for your password before any authentication takes place.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"oak indicate inside poet please share dinner monitor glow hire source perfect\"\\n' +\n        '    $ export APP_GAIA_HUB=\"https://1.2.3.4\"\\n' +\n        '    $ export PROFILE_GAIA_HUB=\"https://hub.blockstack.org\"\\n' +\n        '    $ stx authenticator \"$APP_GAIA_HUB\" \"$BACKUP_PHRASE\" \"$PROFILE_GAIA_HUB\" 8888\\n' +\n        '    Press Ctrl+C to exit\\n' +\n        '    Authentication server started on 8888\\n',\n      group: 'Authentication',\n    },\n    balance: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Query the balance of an account.  Returns the balances of each kind of token ' +\n        'that the account owns.  The balances will be in the *smallest possible units* of the ' +\n        'token (i.e. satoshis for BTC, microStacks for Stacks, etc.).\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx balance 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"123456\"\\n' +\n        '      \"STACKS\": \"123456\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"123456\"\\n' +\n        '      \"STACKS\": \"123456\"\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    can_stack: {\n      type: 'array',\n      items: [\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'cycles',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'stx_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Check if specified account can stack a number of Stacks tokens for given number of cycles.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx can_stack 10000000 20 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4 SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n' +\n        '    {\\n' +\n        '      \"eligible\": true\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    call_contract_func: {\n      type: 'array',\n      items: [\n        {\n          name: 'contract_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'function_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_!?])*$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 6,\n      maxItems: 6,\n      help:\n        'Call a function in a deployed Clarity smart contract.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx call_contract_func SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X contract_name' +\n        '      contract_function 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    call_read_only_contract_func: {\n      type: 'array',\n      items: [\n        {\n          name: 'contract_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'function_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_!?])*$',\n        },\n        {\n          name: 'sender_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Call a read-only function in a deployed Clarity smart contract.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a Clarity value.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ stx call_read_only_contract_func SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X contract_name' +\n        '     contract_function SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    convert_address: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Convert a Bitcoin address to a Stacks address and vice versa.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx convert_address 12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\",\\n' +\n        '      \"BTC\": \"12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\"\\n' +\n        '    }\\n' +\n        '    $ stx convert_address SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"SPA2MZWV9N67TBYVWTE0PSSKMJ2F6YXW7CBE6YPW\",\\n' +\n        '      \"BTC\": \"12qdRgXxgNBNPnDeEChy3fYTbSHQ8nfZfD\"\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    decrypt_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'encrypted_backup_phrase',\n          type: 'string',\n          realtype: 'encrypted_backup_phrase',\n          pattern: '^[^ ]+$',\n        },\n        {\n          name: 'password',\n          type: 'string',\n          realtype: 'password',\n          pattern: '.+',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Decrypt an encrypted backup phrase with a password.  Decrypts to a 12-word ' +\n        'backup phrase if done correctly.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # password is \"asdf\"\\n' +\n        '    $ stx decrypt_keychain \"bfMDtOucUGcJXjZo6vkrZWgEzue9fzPsZ7A6Pl4LQuxLI1xsVF0VPgBkMsnSLCmYS5YHh7R3mNtMmX45Bq9sNGPfPsseQMR0fD9XaHi+tBg=\\n' +\n        '    Enter password:\\n' +\n        '    section amount spend resemble spray verify night immune tattoo best emotion parrot',\n      group: 'Key Management',\n    },\n    deploy_contract: {\n      type: 'array',\n      items: [\n        {\n          name: 'source_file',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'contract_name',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^[a-zA-Z]([a-zA-Z0-9]|[-_])*$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Deploys a Clarity smart contract on the network.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.' +\n        '\\n' +\n        'Example:\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx deploy_contract ./my_contract.clar my_contract 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    docs: {\n      type: 'array',\n      items: [\n        {\n          name: 'format',\n          type: 'string',\n          realtype: 'output_format',\n          pattern: '^json$',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help: 'Dump the documentation for all commands as JSON to standard out.',\n      group: 'CLI',\n    },\n    encrypt_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: 'backup_phrase',\n          pattern: '.+',\n        },\n        {\n          name: 'password',\n          type: 'string',\n          realtype: 'password',\n          pattern: '.+',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Encrypt a 12-word backup phrase, which can be decrypted later with the ' +\n        '`decrypt_backup_phrase` command.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ # password is \"asdf\"\\n' +\n        '     $ stx encrypt_keychain \"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '     Enter password:\\n' +\n        '     Enter password again:\\n' +\n        '     M+DnBHYb1fgw4N3oZ+5uTEAua5bAWkgTW/SjmmBhGGbJtjOtqVV+RrLJEJOgT35hBon4WKdGWye2vTdgqDo7+HIobwJwkQtN2YF9g3zPsKk=',\n      group: 'Key Management',\n    },\n    faucet: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: `${ADDRESS_PATTERN}|${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Encrypt a 12-word backup phrase, which can be decrypted later with the ' +\n        '`decrypt_backup_phrase` command.  The password will be prompted if not given.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ # password is \"asdf\"\\n' +\n        '     $ blockstack-cli encrypt_keychain \"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '     Enter password:\\n' +\n        '     Enter password again:\\n' +\n        '     M+DnBHYb1fgw4N3oZ+5uTEAua5bAWkgTW/SjmmBhGGbJtjOtqVV+RrLJEJOgT35hBon4WKdGWye2vTdgqDo7+HIobwJwkQtN2YF9g3zPsKk=',\n      group: 'Key Management',\n    },\n    gaia_dump_bucket: {\n      type: 'array',\n      items: [\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name_or_id_address',\n          pattern: `${ID_ADDRESS_PATTERN}|${NAME_PATTERN}|${SUBDOMAIN_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'dump_dir',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Download the contents of a Gaia hub bucket to a given directory.  The `GAIA_HUB` argument ' +\n        'must correspond to the *write* endpoint of the Gaia hub -- that is, you should be able to fetch ' +\n        '`$GAIA_HUB/hub_info`.  If `DUMP_DIR` does not exist, it will be created.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"section amount spend resemble spray verify night immune tattoo best emotion parrot\\n' +\n        '    $ stx gaia_dump_bucket hello.id.blockstack https://sample.app https://hub.blockstack.org \"$BACKUP_PHRASE\" ./backups\\n' +\n        '    Download 3 files...\\n' +\n        '    Download hello_world to ./backups/hello_world\\n' +\n        '    Download dir/format to ./backups/dir\\\\x2fformat\\n' +\n        '    Download /.dotfile to ./backups/\\\\x2f.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_getfile: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'decrypt',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n        {\n          name: 'verify',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 6,\n      help:\n        \"Get a file from another user's Gaia hub.  Prints the file data to stdout.  If you \" +\n        'want to read an encrypted file, and/or verify a signed file, then you must pass an app ' +\n        'private key, and pass 1 for `DECRYPT` and/or `VERIFY`.  If the file is encrypted, and you do not ' +\n        'pass an app private key, then this command downloads the ciphertext.  If the file is signed, ' +\n        'and you want to download its data and its signature, then you must run this command twice -- ' +\n        'once to get the file contents at `FILENAME`, and once to get the signature (whose name will be `FILENAME`.sig).\\n' +\n        '\\n' +\n        'Gaia is a key-value store, so it does not have any built-in notion of directories.  However, ' +\n        'most underlying storage systems do -- directory separators in the name of a file in ' +\n        \"Gaia may be internally treated as first-class directories (it depends on the Gaia hub's driver).\" +\n        'As such, repeated directory separators will be treated as a single directory separator by this command.  ' +\n        'For example, the file name `a/b.txt`, `/a/b.txt`, and `///a////b.txt` will be treated as identical.\\n' +\n        '\\n' +\n        'Example without encryption:\\n' +\n        '\\n' +\n        '    $ # Get an unencrypted, unsigned file\\n' +\n        '    $ stx gaia_getfile ryan.id http://public.ykliao.com statuses.json\\n' +\n        '    [{\"id\":0,\"text\":\"Hello, Blockstack!\",\"created_at\":1515786983492}]\\n' +\n        '\\n' +\n        'Example with encryption:\\n' +\n        '\\n' +\n        '    $ # Get an encrypted file without decrypting\\n' +\n        '    $ stx gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json\\n' +\n        '    ' +\n        '    $ # Get an encrypted file, and decrypt it\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_getfile ryan.id https://app.graphitedocs.com documentscollection.json \"$APP_KEY\" 1 0\\n',\n      group: 'Gaia',\n    },\n    gaia_putfile: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'data_path',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'gaia_filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'encrypt',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n        {\n          name: 'sign',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Put a file into a given Gaia hub, authenticating with the given app private key.  ' +\n        'Optionally encrypt and/or sign the data with the given app private key.  If the file is ' +\n        'successfully stored, this command prints out the URLs at which it can be fetched.\\n' +\n        '\\n' +\n        'Gaia is a key-value store, so it does not have any built-in notion of directories.  However, ' +\n        'most underlying storage systems do -- directory separators in the name of a file in ' +\n        \"Gaia may be internally treated as first-class directories (it depends on the Gaia hub's driver).\" +\n        'As such, repeated directory separators will be treated as a single directory separator by this command.  ' +\n        'For example, the file name `a/b.txt`, `/a/b.txt`, and `///a////b.txt` will be treated as identical.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Store 4 versions of a file: plaintext, encrypted, signed, and encrypted+signed\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file.txt\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-encrypted.txt 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-signed.txt 0 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-signed.txt\"\\n' +\n        '    }\\n' +\n        '    $ stx gaia_putfile https://hub.blockstack.org \"$APP_KEY\" /path/to/file.txt file-encrypted-signed.txt 1 1\\n' +\n        '    {\\n' +\n        '       \"urls\": \"https://gaia.blockstack.org/hub/19KAzYp4kSKozeAGMUsnuqkEGdgQQLEvwo/file-encrypted-signed.txt\"\\n' +\n        '    }\\n',\n      group: 'Gaia',\n    },\n    gaia_deletefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n        {\n          name: 'gaia_filename',\n          type: 'string',\n          realtype: 'filename',\n          pattern: '.+',\n        },\n        {\n          name: 'was_signed',\n          type: 'string',\n          realtype: 'boolean',\n          pattern: BOOLEAN_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 4,\n      help:\n        'Delete a file in a Gaia hub, as well as its signature metadata (which is stored in a separate file).' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_deletefile https://hub.blockstack.org \"$APP_KEY\" file.txt false\\n' +\n        '    ok',\n      group: 'Gaia',\n    },\n    gaia_listfiles: {\n      type: 'array',\n      items: [\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_UNCOMPRESSED_PATTERN,\n        },\n      ],\n      minItems: 2,\n      maxItems: 3,\n      help:\n        'List all the files in a Gaia hub bucket.  You must have the private key for the bucket ' +\n        'in order to list its contents.  The command prints each file name on its own line, and when ' +\n        'finished, it prints the number of files listed.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: You can obtain the app key with the get_app_keys command.\\n' +\n        '    $ export APP_KEY=\"3ac770e8c3d88b1003bf4a0a148ceb920a6172bdade8e0325a1ed1480ab4fb19\"\\n' +\n        '    $ stx gaia_listfiles \"https://hub.blockstack.org\" \"$APP_KEY\"\\n' +\n        '    hello_world\\n' +\n        '    dir/format\\n' +\n        '    /.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_restore_bucket: {\n      type: 'array',\n      items: [\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name_or_id_address',\n          pattern: `${ID_ADDRESS_PATTERN}|${NAME_PATTERN}|${SUBDOMAIN_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'dump_dir',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Upload the contents of a previously-dumped Gaia bucket to a new Gaia hub.  The `GAIA_HUB` argument ' +\n        'must correspond to the *write* endpoint of the Gaia hub -- that is, you should be able to fetch ' +\n        '`$GAIA_HUB/hub_info`.  `DUMP_DIR` must contain the file contents created by a previous successful run of the gaia_dump_bucket command, ' +\n        'and both `NAME_OR_ID_ADDRESS` and `APP_ORIGIN` must be the same as they were when it was run.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"section amount spend resemble spray verify night immune tattoo best emotion parrot\"\\n' +\n        '    $ stx gaia_restore_bucket hello.id.blockstack https://sample.app https://new.gaia.hub \"$BACKUP_PHRASE\" ./backups\\n' +\n        '    Uploaded ./backups/hello_world to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/hello_world\\n' +\n        '    Uploaded ./backups/dir\\\\x2fformat to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc/dir/format\\n' +\n        '    Uploaded ./backups/\\\\x2f.dotfile to https://new.gaia.hub/hub/1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc//.dotfile\\n' +\n        '    3\\n',\n      group: 'Gaia',\n    },\n    gaia_sethub: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'owner_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'app_gaia_hub',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Set the Gaia hub for a particular application for a Blockstack ID.  If the command succeeds, ' +\n        'the URLs to your updated profile will be printed and your profile will contain an entry in its \"apps\" ' +\n        'key that links the given `APP_ORIGIN` to the given `APP_GAIA_HUB`.\\n' +\n        '\\n' +\n        'NOTE: Both `OWNER_GAIA_HUB` and `APP_GAIA_HUB` must be the *write* endpoints of their respective Gaia hubs.\\n' +\n        '\\n' +\n        'Your 12-word phrase (in either raw or encrypted form) is required to re-sign and store your ' +\n        'profile and to generate an app-specific key and Gaia bucket.  If you give the encrypted backup phrase, you will be prompted for a password.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    $ stx gaia_sethub hello_world.id https://hub.blockstack.org https://my.cool.app https://my.app.gaia.hub \"$BACKUP_PHRASE\"\\n' +\n        '    {\\n' +\n        '      \"profileUrls\": {\\n' +\n        '        \"error\": null,\\n' +\n        '        \"dataUrls\": [\\n' +\n        '          \"https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\"\\n' +\n        '        ]\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '    \\n' +\n        '    $ # You can check the new apps entry with curl and jq as follows:\\n' +\n        '    $ curl -sL https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json | jq \".[0].decodedToken.payload.claim.apps\"\\n' +\n        '    {\\n' +\n        '      \"https://my.cool.app\": \"https://my.app.gaia.hub/hub/1EqzyQLJ15KG1WQmi5cf1HtmSeqS1Wb8tY/\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Gaia',\n    },\n    get_account_history: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'page',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Query the history of account debits and credits over a given block range.  ' +\n        'Returns the history one page at a time.  An empty result indicates that the page ' +\n        'number has exceeded the number of historic operations in the given block range.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_account_history SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA 0\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56789\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"0\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"0e5db84d94adff5b771262b9df015164703b39bb4a70bf499a1602b858a0a5a1\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 0\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56790,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"64000000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"5a0c67144626f7bd4514e4de3f3bbf251383ca13887444f326bac4bc8b8060ee\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 1\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56791,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"70400000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"e54c271d6a9feb4d1859d32bc99ffd713493282adef5b4fbf50bca9e33fc0ecc\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 2\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"address\": \"SP2H7VMY13ESQDAD5808QEY1EMGESMHZWBJRTN2YA\",\\n' +\n        '        \"block_id\": 56792,\\n' +\n        '        \"credit_value\": \"100000000000\",\\n' +\n        '        \"debit_value\": \"76800000000\",\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"06e0d313261baefec1e59783e256ab487e17e0e776e2fdab0920cc624537e3c8\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 3\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    get_account_at: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'blocknumber',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Query the list of token debits and credits on a given address that occurred ' +\n        'at a particular block height.  Does not include BTC debits and credits; only Stacks.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx -t get_account_at SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ 56789\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"debit_value\": \"0\",\\n' +\n        '        \"block_id\": 56789\\n' +\n        '        \"lock_transfer_block_id\": 0,\\n' +\n        '        \"txid\": \"291817c78a865c1f72938695218a48174265b2358e89b9448edc89ceefd66aa0\",\\n' +\n        '        \"address\": \"SP2NTAQFECYGSTE1W47P71FG21H8F00KZZWFGEVKQ\",\\n' +\n        '        \"credit_value\": \"1000000000000000000\",\\n' +\n        '        \"type\": \"STACKS\",\\n' +\n        '        \"vtxindex\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    get_address: {\n      type: 'array',\n      items: [\n        {\n          name: 'private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the address of a private key or multisig private key bundle.  Gives the BTC and STACKS addresses\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_address f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"1JFhWyVPpZQjbPcXFtpGtTmU22u4fhBVmq\",\\n' +\n        '      \"STACKS\": \"SP2YM3J4KQK09V670TD6ZZ1XYNYCNGCWCVVKSDFWQ\"\\n' +\n        '    }\\n' +\n        '    $ stx get_address 1,f5185b9ca93bdcb5753fded3b097dab8547a8b47d2be578412d0687a9a0184cb01,ff2ff4f4e7f8a1979ffad4fc869def1657fd5d48fc9cf40c1924725ead60942c01\\n' +\n        '    {\\n' +\n        '      \"BTC\": \"363pKBhc5ipDws1k5181KFf6RSxhBZ7e3p\",\\n' +\n        '      \"STACKS\": \"SMQWZ30EXVG6XEC1K4QTDP16C1CAWSK1JSWMS0QN\"\\n' +\n        '    }',\n      group: 'Key Management',\n    },\n    get_blockchain_record: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the low-level blockchain-hosted state for a Blockstack ID.  This command ' +\n        'is used mainly for debugging and diagnostics.  You should not rely on it to be stable.',\n      group: 'Querying Blockstack IDs',\n    },\n    get_blockchain_history: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'page',\n          type: 'string',\n          realtype: 'page_number',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Get the low-level blockchain-hosted history of operations on a Blockstack ID.  ' +\n        'This command is used mainly for debugging and diagnostics, and is not guaranteed to ' +\n        'be stable across releases.',\n      group: 'Querying Blockstack IDs',\n    },\n    get_confirmations: {\n      type: 'array',\n      items: [\n        {\n          name: 'txid',\n          type: 'string',\n          realtype: 'transaction_id',\n          pattern: TXID_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the block height and number of confirmations for a transaction.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    get_namespace_blockchain_record: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the low-level blockchain-hosted state for a Blockstack namespace.  This command ' +\n        'is used mainly for debugging and diagnostics, and is not guaranteed to be stable across ' +\n        'releases.',\n      group: 'Namespace Operations',\n    },\n    get_app_keys: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'name_or_id_address',\n          type: 'string',\n          realtype: 'name-or-id-address',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}|${ID_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'app_origin',\n          type: 'string',\n          realtype: 'url',\n          pattern: URL_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Get the application private key from a 12-word backup phrase and a name or ID-address.  ' +\n        'This is the private key used to sign data in Gaia, and its address is the Gaia bucket ' +\n        'address.  If you provide your encrypted backup phrase, you will be asked to decrypt it.  ' +\n        'If you provide a name instead of an ID-address, its ID-address will be queried automatically ' +\n        '(note that this means that the name must already be registered).\\n' +\n        '\\n' +\n        'NOTE: This command does NOT verify whether or not the name or ID-address was created by the ' +\n        'backup phrase. You should do this yourself via the `get_owner_keys` command if you are not sure.\\n' +\n        '\\n' +\n        'There are two derivation paths emitted by this command:  a `keyInfo` path and a `legacyKeyInfo`' +\n        \"path.  You should use the one that matches the Gaia hub read URL's address, if you have already \" +\n        'signed in before.  If not, then you should use the `keyInfo` path when possible.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export BACKUP_PHRASE=\"one race buffalo dynamic icon drip width lake extra forest fee kit\"\\n' +\n        '    $ stx get_app_keys \"$BACKUP_PHRASE\" example.id.blockstack https://my.cool.dapp\\n' +\n        '    {\\n' +\n        '      \"keyInfo\": {\\n' +\n        '        \"privateKey\": \"TODO\",\\n' +\n        '        \"address\": \"TODO\"\\n' +\n        '      },\\n' +\n        '      \"legacyKeyInfo\": {\\n' +\n        '        \"privateKey\": \"90f9ec4e13fb9a00243b4c1510075157229bda73076c7c721208c2edca28ea8b\",\\n' +\n        '        \"address\": \"1Lr8ggSgdmfcb4764woYutUfFqQMjEoKHc\"\\n' +\n        '      },\\n' +\n        '      \"ownerKeyIndex\": 0\\n' +\n        '    }',\n      group: 'Key Management',\n    },\n    get_owner_keys: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n        {\n          name: 'index',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 1,\n      maxItems: 2,\n      help:\n        'Get the list of owner private keys and ID-addresses from a 12-word backup phrase.  ' +\n        'Pass non-zero values for INDEX to generate the sequence of ID-addresses that can be used ' +\n        'to own Blockstack IDs.  If you provide an encrypted 12-word backup phrase, you will be ' +\n        'asked for your password to decrypt it.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the first 3 owner keys and addresses for a backup phrase\\n' +\n        '    $ export BACKUP_PHRASE=\"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    $ stx get_owner_keys \"$BACKUP_PHRASE\" 3\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"14b0811d5cd3486d47279d8f3a97008647c64586b121e99862c18863e2a4183501\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 0,\\n' +\n        '        \"idAddress\": \"ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82\"\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"1b3572d8dd6866828281ac6cf135f04153210c1f9b123743eccb795fd3095e4901\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 1,\\n' +\n        '        \"idAddress\": \"ID-18pR3UpD1KFrnk88a3MGZmG2dLuZmbJZ25\"\\n' +\n        '      },\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"b19b6d62356db96d570fb5f08b78f0aa7f384525ba3bdcb96fbde29b8e11710d01\",\\n' +\n        '        \"version\": \"v0.10-current\",\\n' +\n        '        \"index\": 2,\\n' +\n        '        \"idAddress\": \"ID-1Gx4s7ggkjENw3wSY6bNd1CwoQKk857AqN\"\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_payment_key: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the payment private key from a 12-word backup phrase.  If you provide an ' +\n        'encrypted backup phrase, you will be asked for your password to decrypt it.  This command ' +\n        'will tell you your Bitcoin and Stacks token addresses as well.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx get_payment_key \"soap fog wealth upon actual blossom neither timber phone exile monkey vocal\"\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"4023435e33da4aff0775f33e7b258f257fb20ecff039c919b5782313ab73afb401\",\\n' +\n        '        \"address\": {\\n' +\n        '          \"BTC\": \"1ybaP1gaRwRSWRE4f8JXo2W8fiTZmA4rV\",\\n' +\n        '          \"STACKS\": \"SP5B89ZJAQHBRXVYP15YB5PAY5E24FEW9K4Q63PE\"\\n' +\n        '        },\\n' +\n        '        \"index\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_stacks_wallet_key: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '24_words_or_ciphertext',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the payment private key from a 24-word backup phrase used by the Stacks wallet.  If you provide an ' +\n        'encrypted backup phrase, you will be asked for your password to decrypt it.  This command ' +\n        'will tell you your Bitcoin and Stacks token addresses as well.\\n' +\n        '\\n' +\n        'Example\\n' +\n        '\\n' +\n        '    $ stx get_stacks_payment_key \"toast canal educate tissue express melody produce later gospel victory meadow outdoor hollow catch liberty annual gasp hat hello april equip thank neck cruise\"\\n' +\n        '    [\\n' +\n        '      {\\n' +\n        '        \"privateKey\": \"a25cea8d310ce656c6d427068c77bad58327334f73e39c296508b06589bc4fa201\",\\n' +\n        '        \"address\": {\\n' +\n        '          \"BTC\": \"1ATAW6TAbTCKgU3xPgAcWQwjW9Q26Eambx\",\\n' +\n        '          \"STACKS\": \"SP1KTQR7CTQNA20SV2VNTF9YABMR6RJERSES3KC6Z\"\\n' +\n        '        },\\n' +\n        '        \"index\": 0\\n' +\n        '      }\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    get_zonefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get a zone file by hash.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx get_zonefile ee77ad484b7b229f09461e4c2b6d3bd3e152ba95\\n' +\n        '    $ORIGIN ryanshea.id\\n' +\n        '    $TTL 3600\\n' +\n        '    _http._tcp URI 10 1 \"https://gaia.blockstack.org/hub/15BcxePn59Y6mYD2fRLCLCaaHScefqW2No/1/profile.json\"\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    help: {\n      type: 'array',\n      items: [\n        {\n          name: 'command',\n          type: 'string',\n          realtype: 'command',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help: 'Get the usage string for a CLI command',\n      group: 'CLI',\n    },\n    lookup: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get and authenticate the profile and zone file for a Blockstack ID.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx lookup example.id\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    names: {\n      type: 'array',\n      items: [\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the list of Blockstack IDs owned by an ID-address.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx names ID-1FpBChfzHG3TdQQRKWAipbLragCUArueG9\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    make_keychain: {\n      type: 'array',\n      items: [\n        {\n          name: 'backup_phrase',\n          type: 'string',\n          realtype: '12_words_or_ciphertext',\n        },\n      ],\n      minItems: 0,\n      maxItems: 1,\n      help:\n        'Generate the owner and payment private keys, optionally from a given 12-word ' +\n        'backup phrase.  If no backup phrase is given, a new one will be generated.  If you provide ' +\n        'your encrypted backup phrase, you will be asked to decrypt it.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx make_keychain\\n' +\n        '    {\\n' +\n        '      \"mnemonic\": \"apart spin rich leader siren foil dish sausage fee pipe ethics bundle\",\\n' +\n        '      \"keyInfo\": {\\n' +\n        '        \"address\": \"SP3G19B6J50FH6JGXAKS06N6WA1XPJCKKM4JCHC2D\"\\n' +\n        '        \"index\": 0,\\n' +\n        '        \"privateKey\": \"56d30f2b605ed114c7dc45599ae521c525d07e1286fbab67452a6586ea49332a01\"\\n' +\n        '      }\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Key Management',\n    },\n    make_zonefile: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: `^${NAME_PATTERN}|${SUBDOMAIN_PATTERN}$`,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'ID-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n        {\n          name: 'resolver_url',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n      ],\n      minItems: 3,\n      maxItems: 4,\n      help:\n        'Generate a zone file for a Blockstack ID with the given profile URL.  If you know ' +\n        'the ID-address for the Blockstack ID, the profile URL usually takes the form of:\\n' +\n        '\\n' +\n        '     {GAIA_URL_PREFIX}/{ADDRESS}/profile.json\\n' +\n        '\\n' +\n        'where `{GAIA_URL_PREFIX}` is the *read* endpoint of your Gaia hub (e.g. https://gaia.blockstack.org/hub) and ' +\n        \"`{ADDRESS}` is the base58check part of your ID-address (i.e. the string following 'ID-').\\n\" +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '     $ stx make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub\\n' +\n        '     $ORIGIN example.id\\n' +\n        '     $TTL 3600\\n' +\n        '     _http._tcp      IN      URI     10      1       \"https://my.gaia.hub/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\"\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    name_import: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n          pattern: '.+',\n        },\n        {\n          name: 'reveal_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n          pattern: '.+',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Import a name into a namespace you revealed.  The `REVEAL_KEY` must be the same as ' +\n        'the key that revealed the namespace.  You can only import a name into a namespace if ' +\n        'the namespace has not yet been launched (i.e. via `namespace_ready`), and if the ' +\n        'namespace was revealed less than a year ago (52595 blocks ago).\\n' +\n        '\\n' +\n        'A zone file will be generated for this name automatically, if \"ZONEFILE\" is not given.  By default, ' +\n        \"the zone file will have a URL to the name owner's profile prefixed by `GAIA_URL_PREFIX`.  If you \" +\n        \"know the *write* endpoint for the name owner's Gaia hub, you can find out the `GAIA_URL_PREFIX` \" +\n        'to use with `curl $GAIA_HUB/hub_info`\".\\n' +\n        '\\n' +\n        'If you specify an argument for `ZONEFILE`, then the `GAIA_URL_PREFIX` argument is ignored in favor of ' +\n        'your custom zone file on disk.\\n' +\n        '\\n' +\n        'If you specify a valid zone file hash for `ZONEFILE_HASH` then it will be used in favor of ' +\n        'both `ZONEFILE` and `GAIA_URL_PREFIX`.  The zone file hash will be incorporated directly into the ' +\n        'name-import transaction.\\n' +\n        '\\n' +\n        'This command prints out a transaction ID if it succeeds, and it replicates the zone file (if given) ' +\n        'to a transaction broadcaster (you can choose which one with -T).  The zone file will be automatically ' +\n        'broadcast to the Blockstack peer network when the transaction confirms.  Alternatively, you can do so ' +\n        'yourself with the `zonefile_push` command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export REVEAL_KEY=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ export ID_ADDRESS=\"ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV\"\\n' +\n        '    $ stx name_import example.id \"$ID_ADDRESS\" https://gaia.blockstack.org/hub \"$REVEAL_KEY\"\\n' +\n        '    f726309cea7a9db364307466dc0e0e759d5c0d6bad1405e2fd970740adc7dc45\\n' +\n        '\\n',\n      group: 'Namespace Operations',\n    },\n    namespace_preorder: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Preorder a namespace.  This is the first of three steps to creating a namespace.  ' +\n        'Once this transaction is confirmed, you will need to use the `namespace_reveal` command ' +\n        'to reveal the namespace (within 24 hours, or 144 blocks).',\n      group: 'Namespace Operations',\n    },\n    namespace_reveal: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          // version\n          name: 'version',\n          type: 'string',\n          realtype: '2-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // lifetime\n          name: 'lifetime',\n          type: 'string',\n          realtype: '4-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // coeff\n          name: 'coefficient',\n          type: 'string',\n          realtype: '1-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // base\n          name: 'base',\n          type: 'string',\n          realtype: '1-byte-integer',\n          pattern: INT_PATTERN,\n        },\n        {\n          // buckets\n          name: 'price_buckets',\n          type: 'string',\n          realtype: 'csv-of-16-nybbles',\n          pattern: '^([0-9]{1,2},){15}[0-9]{1,2}$',\n        },\n        {\n          // non-alpha discount\n          name: 'nonalpha_discount',\n          type: 'string',\n          realtype: 'nybble',\n          pattern: INT_PATTERN,\n        },\n        {\n          // no-vowel discount\n          name: 'no_vowel_discount',\n          type: 'string',\n          realtype: 'nybble',\n          pattern: INT_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 10,\n      maxItems: 10,\n      help:\n        'Reveal a preordered namespace, and set the price curve and payment options.  ' +\n        'This is the second of three steps required to create a namespace, and must be done ' +\n        'shortly after the associated `namespace_preorder` command.',\n      group: 'Namespace Operations',\n    },\n    namespace_ready: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n        {\n          name: 'reveal_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Launch a revealed namespace.  This is the third and final step of creating a namespace.  ' +\n        'Once launched, you will not be able to import names anymore.',\n      group: 'Namespace Operations',\n    },\n    price: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the price of an on-chain Blockstack ID.  Its namespace must already exist.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx price example.id\\n' +\n        '    {\\n' +\n        '      \"units\": \"BTC\",\\n' +\n        '      \"amount\": \"5500\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    price_namespace: {\n      type: 'array',\n      items: [\n        {\n          name: 'namespace_id',\n          type: 'string',\n          realtype: 'namespace_id',\n          pattern: NAMESPACE_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get the price of a namespace.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the price of the .hello namespace\\n' +\n        '    $ stx price_namespace hello\\n' +\n        '    {\\n' +\n        '      \"units\": \"BTC\",\\n' +\n        '      \"amount\": \"40000000\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Namespace Operations',\n    },\n    profile_sign: {\n      type: 'array',\n      items: [\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Sign a profile on disk with a given owner private key.  Print out the signed profile JWT.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get the owner key from your 12-word backup phrase using the get_owner_keys command\\n' +\n        '    $ stx profile_sign /path/to/profile.json 0ffd299af9c257173be8486ef54a4dd1373407d0629ca25ca68ff24a76be09fb01\\n' +\n        '\\n',\n      group: 'Profiles',\n    },\n    profile_store: {\n      type: 'array',\n      items: [\n        {\n          name: 'user_id',\n          type: 'string',\n          realtype: 'name-or-id-address',\n          pattern: `${NAME_PATTERN}|${SUBDOMAIN_PATTERN}|${ID_ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n      ],\n      minItems: 4,\n      maxItems: 4,\n      help:\n        'Store a profile on disk to a Gaia hub.  `USER_ID` can be either a Blockstack ID or ' +\n        \"an ID-address.  The `GAIA_HUB` argument must be the *write* endpoint for the user's Gaia hub \" +\n        '(e.g. https://hub.blockstack.org).  You can verify this by ensuring that you can run ' +\n        '`curl \"$GAIA_HUB/hub_info\"` successfully.',\n      group: 'Profiles',\n    },\n    profile_verify: {\n      type: 'array',\n      items: [\n        {\n          name: 'profile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: `${ID_ADDRESS_PATTERN}|${PUBLIC_KEY_PATTERN}`,\n        },\n      ],\n      minItems: 2,\n      maxItems: 2,\n      help:\n        'Verify a JWT encoding a profile on disk using an ID-address.  Prints out the contained profile on success.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # get the raw profile JWT\\n' +\n        '    $ curl -sL https://raw.githubusercontent.com/jcnelson/profile/master/judecn.id > /tmp/judecn.id.jwt\\n' +\n        '    $ # Tip: you can get the ID-address for a name with the \"whois\" command\\n' +\n        '    $ stx profile_verify /tmp/judecn.id.jwt ID-16EMaNw3pkn3v6f2BgnSSs53zAKH4Q8YJg\\n' +\n        '\\n',\n      group: 'Profiles',\n    },\n    renew: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'new_id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 6,\n      help:\n        'Renew a name.  Optionally transfer it to a new owner address (`NEW_ID_ADDRESS`), ' +\n        'and optionally load up and give it a new zone file on disk (`ZONEFILE`).  If the command ' +\n        'succeeds, it prints out a transaction ID.  You can use with the `get_confirmations` ' +\n        'command to track its confirmations on the underlying blockchain -- once it reaches 7 ' +\n        'confirmations, the rest of the Blockstack peer network will process it.\\n' +\n        '\\n' +\n        'If you create a new zonefile for your name, you will need ' +\n        'to later use `zonefile_push` to replicate the zone file to the Blockstack peer network ' +\n        'once the transaction reaches 7 confirmations.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner key from your backup phrase with \"get_owner_keys\".\\n' +\n        '    $ # Tip: you can get your payment key from your backup phrase with \"get_payment_key\".\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    3d8945ce76d4261678d76592b472ed639a10d4298f9d730af4edbbc3ec02882e\\n' +\n        '\\n' +\n        '    $ # Renew with a new owner\\n' +\n        '    $ export NEW_OWNER=\"ID-141BcmFVbEuuMb7Bd6umXyV6ZD1WYomYDE\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\" \"$NEW_OWNER\"\\n' +\n        '    33865625ef3f1b607111c0dfba9e58604927173bd2e299a343e19aa6d2cfb263\\n' +\n        '\\n' +\n        '    $ # Renew with a new zone file.\\n' +\n        '    $ # Tip: you can create a new zonefile with the \"make_zonefile\" command.\\n' +\n        '    $ export ZONEFILE_PATH=\"/path/to/new/zonefile.txt\"\\n' +\n        '    $ stx renew hello_world.id \"$OWNER\" \"$PAYMENT\" --zonefile \"$ZONEFILE_PATH\"\\n' +\n        '    e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    $ # wait 7 confirmations\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push \"$ZONEFILE_PATH\"\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    register: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'If you are trying to register a name for a *private key*, use this command.\\n' +\n        '\\n' +\n        'Register a name to a single name-owning private key.  After successfully running this command, ' +\n        'and after waiting a couple hours, your name will be ready to use and will resolve to a ' +\n        'signed empty profile hosted on the given Gaia hub (`GAIA_HUB`).\\n' +\n        '\\n' +\n        'Behind the scenes, this will generate and send two transactions ' +\n        'and generate and replicate a zone file with the given Gaia hub URL (`GAIA_HUB`).  ' +\n        'Note that the `GAIA_HUB` argument must correspond to the *write* endpoint of the Gaia hub ' +\n        '(i.e. you should be able to run \\'curl \"$GAIA_HUB/hub_info\"\\' and get back data).  If you ' +\n        'are using Blockstack PBC\\'s default Gaia hub, pass \"https://hub.blockstack.org\" for this ' +\n        'argument.\\n' +\n        '\\n' +\n        \"By default, this command generates a zone file automatically that points to the Gaia hub's \" +\n        'read endpoint (which is queried on-the-fly from `GAIA_HUB`).  If you instead want to have a custom zone file for this name, ' +\n        'you can specify a path to it on disk with the `ZONEFILE` argument.\\n' +\n        '\\n' +\n        'If this command completes successfully, your name will be ready to use once both transactions have 7+ confirmations.  ' +\n        'You can use the `get_confirmations` command to track the confirmations ' +\n        'on the transaction IDs returned by this command.\\n' +\n        '\\n' +\n        'WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while the name is being confirmed.  ' +\n        'If you do so, you could double-spend one of the pending transactions and lose your name.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx register example.id \"$OWNER\" \"$PAYMENT\" https://hub.blockstack.org\\n' +\n        '    9bb908bfd4ab221f0829167a461229172184fc825a012c4e551533aa283207b1\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    register_addr: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id-address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'gaia_url_prefix',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'If you are trying to register a name for an *ID-address*, use this command.\\n' +\n        '\\n' +\n        \"Register a name to someone's ID-address.  After successfully running this \" +\n        'command and waiting a couple of hours, the name will be registered on-chain and have a ' +\n        \"zone file with a URL to where the owner's profile should be.  This command does NOT \" +\n        'generate, sign, or replicate a profile for the name---the name owner will need to do this ' +\n        'separately, once the name is registered.\\n' +\n        '\\n' +\n        'Behind the scenes, this command will generate two ' +\n        'transactions, and generate and replicate a zone file with the given Gaia hub read URL ' +\n        '(`GAIA_URL_PREFIX`).  Note that the `GAIA_URL_PREFIX` argument must correspond to the *read* endpoint of the Gaia hub ' +\n        '(e.g. if you are using Blockstack PBC\\'s default Gaia hub, this is \"https://gaia.blockstack.org/hub\"). ' +\n        \"If you know the *write* endpoint of the name owner's Gaia hub, you can find the right value for \" +\n        '`GAIA_URL_PREFIX` by running \"curl $GAIA_HUB/hub_info\".\\n' +\n        '\\n' +\n        'No profile will be generated or uploaded by this command.  Instead, this command generates ' +\n        'a zone file that will include the URL to a profile based on the `GAIA_URL_PREFIX` argument.\\n' +\n        '\\n' +\n        'The zone file will be generated automatically from the `GAIA_URL_PREFIX` argument.  If you need ' +\n        'to use a custom zone file, you can pass the path to it on disk via the `ZONEFILE` argument.\\n' +\n        '\\n' +\n        'If this command completes successfully, the name will be ready to use in a couple of ' +\n        'hours---that is, once both transactions have 7+ confirmations. ' +\n        'You can use the `get_confirmations` command to track the confirmations.\\n' +\n        '\\n' +\n        'WARNING: You should *NOT* use the payment private key (`PAYMENT_KEY`) while the name is being confirmed.  ' +\n        'If you do so, you could double-spend one of the pending transactions and lose the name.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export ID_ADDRESS=\"ID-18e1bqU7B5qUPY3zJgMLxDnexyStTeSnvV\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx register_addr example.id \"$ID_ADDRESS\" \"$PAYMENT\" https://gaia.blockstack.org/hub',\n      group: 'Blockstack ID Management',\n    },\n    register_subdomain: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: PRIVATE_KEY_PATTERN,\n        },\n        {\n          name: 'gaia_hub',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'registrar',\n          type: 'string',\n          realtype: 'url',\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'Register a subdomain.  This will generate and sign a subdomain zone file record ' +\n        'with the given `GAIA_HUB` URL and send it to the given subdomain registrar (`REGISTRAR`).\\n' +\n        '\\n' +\n        'This command generates, signs, and uploads a profile to the `GAIA_HUB` url.  Note that the `GAIA_HUB` ' +\n        'argument must correspond to the *write* endpoint of your Gaia hub (i.e. you should be able ' +\n        \"to run 'curl \\\"$GAIA_HUB/hub_info\\\"' successfully).  If you are using Blockstack PBC's default \" +\n        'Gaia hub, this argument should be \"https://hub.blockstack.org\".\\n' +\n        '\\n' +\n        'WARNING: At this time, no validation will occur on the registrar URL.  Be sure that the URL ' +\n        'corresponds to the registrar for the on-chain name before running this command!\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ # NOTE: https://registrar.blockstack.org is the registrar for personal.id!\\n' +\n        '    $ stx register_subdomain hello.personal.id \"$OWNER\" https://hub.blockstack.org https://registrar.blockstack.org\\n',\n      group: 'Blockstack ID Management',\n    },\n    revoke: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Revoke a name.  This renders it unusable until it expires (if ever).  This command ' +\n        'prints out the transaction ID if it succeeds.  Once the transaction confirms, the name will ' +\n        'be revoked by each node in the peer network.  This command only works for on-chain names, not ' +\n        'subdomains.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx revoke example.id \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    233b559c97891affa010567bd582110508d0236b4e3f88d3b1d0731629e030b0\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    send_btc: {\n      type: 'array',\n      items: [\n        {\n          name: 'recipient_address',\n          type: 'string',\n          realtype: 'address',\n          pattern: ADDRESS_PATTERN,\n        },\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'satoshis',\n          pattern: INT_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Send some Bitcoin (in satoshis) from a payment key to an address.  Up to the given ' +\n        'amount will be spent, but likely less---the actual amount sent will be the amount given, ' +\n        'minus the transaction fee.  For example, if you want to send 10000 satoshis but the ' +\n        'transaction fee is 2000 satoshis, then the resulting transaction will send 8000 satoshis ' +\n        'to the given address.  This is to ensure that this command does not *over*-spend your ' +\n        'Bitcoin.  If you want to check the amount before spending, pass the `-x` flag to see the ' +\n        'raw transaction.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out the transaction ID.  You can track its confirmations ' +\n        'with the `get_confirmations` command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx send_btc 18qTSE5PPQmypwKKej7QX5Db2XAttgYeA1 123456 \"$PAYMENT\"\\n' +\n        '    c7e239fd24da30e36e011e6bc7db153574a5b40a3a8dc3b727adb54ad038acc5\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    send_tokens: {\n      type: 'array',\n      items: [\n        {\n          name: 'address',\n          type: 'string',\n          realtype: 'address',\n          pattern: STACKS_ADDRESS_PATTERN,\n        },\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'memo',\n          type: 'string',\n          realtype: 'string',\n          pattern: '^.{0,34}$',\n        },\n      ],\n      minItems: 5,\n      maxItems: 6,\n      help:\n        'Send a particular type of tokens to the given `ADDRESS`.  Right now, only supported `TOKEN-TYPE` is `STACKS`.  Optionally ' +\n        'include a memo string (`MEMO`) up to 34 characters long.\\n' +\n        '\\n' +\n        'If the command succeeds, it prints out a transaction ID.  You can track the confirmations on the transaction ' +\n        'via the `get_confirmations` command.  Once the transaction has 7 confirmations, the Blockstack peer network ' +\n        'will have processed it, and your payment key balance and recipient balance will be updated.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # check balances of sender and recipient before sending.\\n' +\n        '    $ # address of the key below is SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"10000000\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"0\"\\n' +\n        '    }\\n' +\n        '\\n' +\n        '    $ # send tokens\\n' +\n        '    $ stx send_tokens SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY 12345 1 0 \"$PAYMENT\"\\n' +\n        '    a9d387a925fb0ba7a725fb1e11f2c3f1647473699dd5a147c312e6453d233456\\n' +\n        '\\n' +\n        '    $ # wait for transaction to be confirmed\\n' +\n        '\\n' +\n        '    $ stx balance SP2SC16ASH76GX549PT7J5WQZA4GHMFBKYMBQFF9V\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"9987655\"\\n' +\n        '    }\\n' +\n        '    $ stx balance SP1P10PS2T517S4SQGZT5WNX8R00G1ECTRKYCPMHY\\n' +\n        '    {\\n' +\n        '      \"STACKS\": \"12345\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Account Management',\n    },\n    stack: {\n      type: 'array',\n      items: [\n        {\n          name: 'amount',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'cycles',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'integer',\n          pattern: `${ADDRESS_PATTERN}`,\n        },\n        {\n          name: 'private_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'fee',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n        {\n          name: 'nonce',\n          type: 'string',\n          realtype: 'integer',\n          pattern: '^[0-9]+$',\n        },\n      ],\n      minItems: 4,\n      maxItems: 6,\n      help:\n        'Stack the specified number of Stacks tokens for given number of cycles.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx stack 10000000 20 16pm276FpJYpm7Dv3GEaRqTVvGPTdceoY4 136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\\n' +\n        '    {\\n' +\n        '      \"txid\": true\\n' +\n        '    }\\n',\n      group: 'Account Management',\n    },\n    stacking_status: {\n      type: 'array',\n      items: [\n        {\n          name: 'pox_address',\n          type: 'string',\n          realtype: 'integer',\n          pattern: `${STACKS_ADDRESS_PATTERN}`,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Get stacking status for specified address.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx stacking_status SPZY1V53Z4TVRHHW9Z7SFG8CZNRAG7BD8WJ6SXD0\\n',\n      group: 'Account Management',\n    },\n    transfer: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'new_id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'keep_zonefile',\n          type: 'string',\n          realtype: 'true-or-false',\n          pattern: '^true$|^false$',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 5,\n      maxItems: 5,\n      help:\n        'Transfer a Blockstack ID to a new address (`NEW_ID_ADDRESS`).  Optionally preserve ' +\n        'its zone file (`KEEP_ZONEFILE`).  If the command succeeds, it will print a transaction ID.  ' +\n        'Once the transaction reaches 7 confirmations, the Blockstack peer network will transfer the ' +\n        \"Blockstack ID to the new ID-address.  You can track the transaction's confirmations with \" +\n        'the `get_confirmations` command.\\n' +\n        '\\n' +\n        'NOTE: This command only works for on-chain Blockstack IDs.  It does not yet work for subdomains.\\n' +\n        '\\n' +\n        'An ID-address can only own up to 25 Blockstack IDs.  In practice, you should generate a new ' +\n        'owner key and ID-address for each name you receive (via the `get_owner_keys` command).\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner key from your backup phrase with \"get_owner_keys\".\\n' +\n        '    $ # Tip: you can get your payment key from your backup phrase with \"get_payment_key\".\\n' +\n        '    $ export OWNER=\"136ff26efa5db6f06b28f9c8c7a0216a1a52598045162abfe435d13036154a1b01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ stx transfer example.id ID-1HJA1AJvWef21XbQVL2AcTv71b6JHGPfDX true \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    e09dc158e586d0c09dbcdcba917ec394e6c6ac2b9c91c4b55f32f5973e4f08fc\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    tx_preorder: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Generate and send `NAME_PREORDER` transaction, for a Blockstack ID to be owned ' +\n        'by a given `ID_ADDRESS`.  The name cost will be paid for by the gven `PAYMENT_KEY`.  The ' +\n        'ID-address should be a never-before-seen address, since it will be used as a salt when ' +\n        'generating the name preorder hash.\\n' +\n        '\\n' +\n        'This is a low-level command that only experienced Blockstack developers should use.  ' +\n        'If you just want to register a name, use the \"register\" command.\\n',\n      group: 'Blockstack ID Management',\n    },\n    tx_register: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'id_address',\n          type: 'string',\n          realtype: 'id-address',\n          pattern: ID_ADDRESS_PATTERN,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zoenfile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 3,\n      maxItems: 5,\n      help:\n        'Generate and send a NAME_REGISTRATION transaction, assigning the given `BLOCKSTACK_ID` ' +\n        'to the given `ID_ADDRESS`.  Optionally pair the Blockstack ID with a zone file (`ZONEFILE`) or ' +\n        'the hash of the zone file (`ZONEFILE_HASH`).  You will need to push the zone file to the peer ' +\n        'network after the transaction confirms (i.e. with `zonefile_push`).\\n' +\n        '\\n' +\n        'This is a low-level command that only experienced Blockstack developers should use.  If you ' +\n        'just want to register a name, you should use the `register` command.',\n      group: 'Blockstack ID Management',\n    },\n    update: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'on-chain-blockstack_id',\n          pattern: NAME_PATTERN,\n        },\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'payment_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN_ANY}`,\n        },\n        {\n          name: 'zonefile_hash',\n          type: 'string',\n          realtype: 'zonefile_hash',\n          pattern: ZONEFILE_HASH_PATTERN,\n        },\n      ],\n      minItems: 4,\n      maxItems: 5,\n      help:\n        'Update the zonefile for an on-chain Blockstack ID.  You can generate a well-formed ' +\n        'zone file using the `make_zonefile` command, or you can supply your own.  Zone files can be ' +\n        'up to 40Kb.  Alternatively, if you only want to announce the hash of a zone file (or any ' +\n        'arbitrary 20-byte hex string), you can do so by passing a value for `ZONEFILE_HASH`.  If `ZONEFILE_HASH` ' +\n        'is given, then the value for `ZONEFILE` will be ignored.\\n' +\n        '\\n' +\n        'If this command succeeds, it prints out a transaction ID.  Once the transaction has 7 confirmations, ' +\n        \"the Blockstack peer network will set the name's zone file hash to the `RIPEMD160`(SHA256) hash of \" +\n        'the given zone file (or it will simply set it to the hash given in `ZONEFILE_HASH`).\\n' +\n        '\\n' +\n        'Once the transaction confirms, you will need to replicate the zone file to the Blockstack peer network.  ' +\n        'This can be done with the `zonefile_push` command.  Until you do so, no Blockstack clients will be able ' +\n        'to obtain the zone file announced by this command.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner and payment keys from your 12-word backup phrase using the get_owner_keys and get_payment_key commands.\\n' +\n        '    $ export OWNER=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ export PAYMENT=\"bfeffdf57f29b0cc1fab9ea197bb1413da2561fe4b83e962c7f02fbbe2b1cd5401\"\\n' +\n        '    $ # make a new zone file\\n' +\n        '    $ stx make_zonefile example.id ID-1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82 https://my.gaia.hub/hub > /tmp/zonefile.txt\\n' +\n        '    \\n' +\n        '    $ # update the name to reference this new zone file\\n' +\n        '    $ stx update example.id /tmp/zonefile.txt \"$OWNER\" \"$PAYMENT\"\\n' +\n        '    8e94a5b6647276727a343713d3213d587836e1322b1e38bc158406f5f8ebe3fd\\n' +\n        '    \\n' +\n        '    $ # check confirmations\\n' +\n        '    $ stx get_confirmations e41ce043ab64fd5a5fd382fba21acba8c1f46cbb1d7c08771ada858ce7d29eea\\n' +\n        '    {\\n' +\n        '      \"blockHeight\": 567890,\\n' +\n        '      \"confirmations\": 7,\\n' +\n        '    }\\n' +\n        '    \\n' +\n        '    $ # send out the new zone file to a Blockstack peer\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push /tmp/zonefile.txt\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Blockstack ID Management',\n    },\n    whois: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Look up the zone file and owner of a Blockstack ID.  Works with both on-chain and off-chain names.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx whois example.id\\n' +\n        '    {\\n' +\n        '      \"address\": \"1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82\",\\n' +\n        '      \"block_renewed_at\": 567890,\\n' +\n        '      \"blockchain\": \"bitcoin\",\\n' +\n        '      \"expire_block\": 687010,\\n' +\n        '      \"grace_period\": false,\\n' +\n        '      \"last_transaction_height\": \"567891\",\\n' +\n        '      \"last_txid\": \"a564aa482ee43eb2bdfb016e01ea3b950bab0cfa39eace627d632e73c7c93e48\",\\n' +\n        '      \"owner_script\": \"76a9146c1c2fc3cf74d900c51e9b5628205130d7b98ae488ac\",\\n' +\n        '      \"renewal_deadline\": 692010,\\n' +\n        '      \"resolver\": null,\\n' +\n        '      \"status\": \"registered\",\\n' +\n        '      \"zonefile\": \"$ORIGIN example.id\\\\n$TTL 3600\\\\n_http._tcp URI 10 1 \\\\\"https://gaia.blockstack.org/hub/1ArdkA2oLaKnbNbLccBaFhEV4pYju8hJ82/profile.json\\\\\"\\\\n\",\\n' +\n        '      \"zonefile_hash\": \"ae4ee8e7f30aa890468164e667e2c203266f726e\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'Querying Blockstack IDs',\n    },\n    zonefile_push: {\n      type: 'array',\n      items: [\n        {\n          name: 'zonefile',\n          type: 'string',\n          realtype: 'path',\n        },\n      ],\n      minItems: 1,\n      maxItems: 1,\n      help:\n        'Push a zone file on disk to the Blockstack peer network.  The zone file must ' +\n        'correspond to a zone file hash that has already been announced.  That is, you use this command ' +\n        'in conjunction with the `register`, `update`, `renew`, or `name_import` commands.\\n' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ stx -H https://core.blockstack.org zonefile_push /path/to/zonefile.txt\\n' +\n        '    [\\n' +\n        '      \"https://core.blockstack.org\"\\n' +\n        '    ]\\n' +\n        '\\n',\n      group: 'Peer Services',\n    },\n    get_did_configuration: {\n      type: 'array',\n      items: [\n        {\n          name: 'blockstack_id',\n          type: 'string',\n          realtype: 'blockstack_id',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'domain',\n          type: 'string',\n          realtype: 'domain',\n          pattern: NAME_PATTERN + '|' + SUBDOMAIN_PATTERN,\n        },\n        {\n          name: 'owner_key',\n          type: 'string',\n          realtype: 'private_key',\n          pattern: `${PRIVATE_KEY_PATTERN}`,\n        },\n      ],\n      minItems: 3,\n      maxItems: 3,\n      help:\n        'Creates a DID configuration for the given blockstack id and domain to create a link between both.' +\n        'The specification is define by the Decentralized Identity Foundation at https://identity.foundation/specs/did-configuration/\\n' +\n        'The DID configuration should be placed in the json file \".well_known/did_configuration\"' +\n        '\\n' +\n        'Example:\\n' +\n        '\\n' +\n        '    $ # Tip: you can get your owner keys from your 12-word backup phrase using the get_owner_keys command.\\n' +\n        '    $ export PRIVATE_OWNER_KEY=\"6e50431b955fe73f079469b24f06480aee44e4519282686433195b3c4b5336ef01\"\\n' +\n        '    $ stx get_did_configuration public_profile_for_testing.id.blockstack helloblockstack.com PRIVATE_OWNER_KEY\\n' +\n        '    {\\n' +\n        '       \"entries\": [\\n' +\n        '          {\\n' +\n        '            \"did\": \"did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0\",\\n' +\n        '            \"jwt\": \"eyJ0eXAiOiJKV1QiL....\"\\n' +\n        '          }\\n' +\n        '       ]\\n' +\n        '    }\\n' +\n        '\\n' +\n        'The decoded content of the jwt above is \\n' +\n        '    {\\n' +\n        '       \"header\": {\\n' +\n        '          \"typ\": \"JWT\", \"alg\": \"ES256K\"\\n' +\n        '       },\\n' +\n        '       \"payload\": {\\n' +\n        '           \"iss\": \"did:stack:v0:SewTRvPZUEQGdr45QvEnVMGHZBhx3FT1Jj-0\",\\n' +\n        '           \"domain\": \"helloblockstack.com\",\\n' +\n        '           \"exp\": \"2020-12-07T13:05:28.375Z\"\\n' +\n        '       },\\n' +\n        '       \"signature\": \"NDY7ISzgAHKcZDvbxzTxQdVnf6xWMZ46w5vHcDpNx_1Fsyip0M6E6GMq_2YZ-gUcwmwlo8Ag9jgnfOkaBIFpoQ\"\\n' +\n        '    }\\n' +\n        '\\n',\n      group: 'DID',\n    },\n  } as CLI_PROP,\n  additionalProperties: false,\n  strict: true,\n};\n\n// usage string for built-in options\nexport const USAGE = `Usage: ${process.argv[1]} [options] command [command arguments]\nOptions can be:\n    -c                  Path to a config file (defaults to\n                        ${DEFAULT_CONFIG_PATH})\n\n    -d                  Print verbose debugging output\n\n    -e                  Estimate the BTC cost of an transaction (in satoshis).\n                        Do not generate or send any transactions.\n\n    -m MAGIC_BYTES      Use an alternative magic byte string instead of \"id\".\n\n    -t                  Use the public testnet instead of mainnet.\n\n    -i                  Use integration test framework instead of mainnet.\n\n    -U                  Unsafe mode.  No safety checks will be performed.\n\n    -x                  Do not broadcast a transaction.  Only generate and\n                        print them to stdout.\n\n    -B BURN_ADDR        Use the given namespace burn address instead of the one\n                        obtained from the Blockstack network (DANGEROUS)\n\n    -D DENOMINATION     Denominate the price to pay in the given units\n                        (DANGEROUS)\n\n    -C CONSENSUS_HASH   Use the given consensus hash instead of one obtained\n                        from the network\n\n    -F FEE_RATE         Use the given transaction fee rate instead of the one\n                        obtained from the Bitcoin network\n\n    -G GRACE_PERIOD     Number of blocks in which a name can be renewed after it\n                        expires (DANGEROUS)\n\n    -H URL              Use an alternative Blockstack Core API endpoint.\n\n    -I URL              Use an alternative Blockstack Core Indexer endpoint.\n\n    -M MAX_INDEX        Maximum keychain index to use when searching for an identity address\n                        (default is ${DEFAULT_MAX_ID_SEARCH_INDEX}).\n\n    -N PAY2NS_PERIOD    Number of blocks in which a namespace receives the registration\n                        and renewal fees after it is created (DANGEROUS)\n\n    -P PRICE            Use the given price to pay for names or namespaces\n                        (DANGEROUS)\n\n    -T URL              Use an alternative Blockstack transaction broadcaster.\n    \n    -X URL              Use an alternative UTXO service endpoint.\n\n    -u USERNAME         A username to be passed to bitcoind RPC endpoints\n\n    -p PASSWORD         A password to be passed to bitcoind RPC endpoints\n`;\n\n/*\n * Format help\n */\nfunction formatHelpString(indent: number, limit: number, helpString: string): string {\n  const lines = helpString.split('\\n');\n  let buf = '';\n  let pad = '';\n  for (let i = 0; i < indent; i++) {\n    pad += ' ';\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    let linebuf = pad.slice();\n    const words = lines[i].split(/ /).filter(word => word.length > 0);\n    if (words.length == 0) {\n      buf += '\\n';\n      continue;\n    }\n\n    if (words[0] === '$' || lines[i].substring(0, 4) === '    ') {\n      // literal line\n      buf += lines[i] + '\\n';\n      continue;\n    }\n\n    for (let j = 0; j < words.length; j++) {\n      if (words[j].length === 0) {\n        // explicit line break\n        linebuf += '\\n';\n        break;\n      }\n\n      if (linebuf.split('\\n').slice(-1)[0].length + 1 + words[j].length > limit) {\n        linebuf += '\\n';\n        linebuf += pad;\n      }\n      linebuf += words[j] + ' ';\n    }\n\n    buf += linebuf + '\\n';\n  }\n  return buf;\n}\n\n/*\n * Format command usage lines.\n * Generate two strings:\n * raw string:\n *    COMMAND ARG_NAME ARG_NAME ARG_NAME [OPTINONAL ARG NAME]\n * keyword string:\n *    COMMAND --arg_name TYPE\n *            --arg_name TYPE\n *            [--arg_name TYPE]\n */\ninterface CLI_COMMAND_HELP {\n  raw: string;\n  kw: string;\n}\n\nfunction formatCommandHelpLines(\n  commandName: string,\n  commandArgs: Array<CLI_PROP_ITEM>\n): CLI_COMMAND_HELP {\n  let rawUsage = '';\n  let kwUsage = '';\n  let kwPad = '';\n  const commandInfo = CLI_ARGS.properties[commandName];\n\n  rawUsage = `  ${commandName} `;\n  for (let i = 0; i < commandArgs.length; i++) {\n    if (!commandArgs[i].name) {\n      console.log(commandName);\n      console.log(commandArgs[i]);\n      throw new Error('BUG: command info is missing a \"name\" field');\n    }\n    if (i + 1 <= commandInfo.minItems) {\n      rawUsage += `${commandArgs[i].name.toUpperCase()} `;\n    } else {\n      rawUsage += `[${commandArgs[i].name.toUpperCase()}] `;\n    }\n  }\n\n  kwUsage = `  ${commandName} `;\n  for (let i = 0; i < commandName.length + 3; i++) {\n    kwPad += ' ';\n  }\n\n  for (let i = 0; i < commandArgs.length; i++) {\n    if (!commandArgs[i].realtype) {\n      console.log(commandName);\n      console.log(commandArgs[i]);\n      throw new Error('BUG: command info is missing a \"realtype\" field');\n    }\n    if (i + 1 <= commandInfo.minItems) {\n      kwUsage += `--${commandArgs[i].name} ${commandArgs[i].realtype.toUpperCase()}`;\n    } else {\n      kwUsage += `[--${commandArgs[i].name} ${commandArgs[i].realtype.toUpperCase()}]`;\n    }\n    kwUsage += '\\n';\n    kwUsage += kwPad;\n  }\n\n  return { raw: rawUsage, kw: kwUsage } as CLI_COMMAND_HELP;\n}\n\n/*\n * Get the set of commands grouped by command group\n */\ninterface CLI_COMMAND_GROUP_ITEM {\n  command: string;\n  help: string;\n}\n\ninterface CLI_COMMAND_GROUP {\n  [index: string]: CLI_COMMAND_GROUP_ITEM[];\n}\n\nfunction getCommandGroups(): CLI_COMMAND_GROUP {\n  const groups: CLI_COMMAND_GROUP = {};\n  const commands = Object.keys(CLI_ARGS.properties);\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    const group = CLI_ARGS.properties[command].group;\n\n    if (!groups.hasOwnProperty(group)) {\n      groups[group] = [\n        {\n          command: command,\n          help: CLI_ARGS.properties[command].help,\n        } as CLI_COMMAND_GROUP_ITEM,\n      ];\n    } else {\n      groups[group].push({\n        command: command,\n        help: CLI_ARGS.properties[command].help,\n      } as CLI_COMMAND_GROUP_ITEM);\n    }\n  }\n  return groups;\n}\n\n/*\n * Make all commands list\n */\nexport function makeAllCommandsList(): string {\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  let res = `All commands (run '${process.argv[1]} help COMMAND' for details):\\n`;\n  for (let i = 0; i < groupNames.length; i++) {\n    res += `  ${groupNames[i]}: `;\n    const cmds = [];\n    for (let j = 0; j < groups[groupNames[i]].length; j++) {\n      cmds.push(groups[groupNames[i]][j].command);\n    }\n\n    // wrap at 80 characters\n    const helpLineSpaces = formatHelpString(4, 70, cmds.join(' '));\n    const helpLineCSV =\n      '    ' +\n      helpLineSpaces\n        .split('\\n    ')\n        .map(line => line.trim().replace(/ /g, ', '))\n        .join('\\n    ') +\n      '\\n';\n\n    res += '\\n' + helpLineCSV;\n    res += '\\n';\n  }\n  return res.trim();\n}\n\n/*\n * Make help for all commands\n */\nexport function makeAllCommandsHelp(): string {\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  const helps = [];\n  let cmds = [];\n  for (let i = 0; i < groupNames.length; i++) {\n    for (let j = 0; j < groups[groupNames[i]].length; j++) {\n      cmds.push(groups[groupNames[i]][j].command);\n    }\n  }\n\n  cmds = cmds.sort();\n  for (let i = 0; i < cmds.length; i++) {\n    helps.push(makeCommandUsageString(cmds[i]).trim());\n  }\n\n  return helps.join('\\n\\n');\n}\n\n/*\n * Make a usage string for a single command\n */\nexport function makeCommandUsageString(command?: string): string {\n  let res = '';\n  if (command === 'all') {\n    return makeAllCommandsHelp();\n  }\n  if (!command) {\n    return makeAllCommandsList();\n  }\n\n  const commandInfo = CLI_ARGS.properties[command];\n  if (!commandInfo || command === 'help') {\n    return makeAllCommandsList();\n  }\n\n  const help = commandInfo.help;\n\n  const cmdFormat = formatCommandHelpLines(command, commandInfo.items);\n  const formattedHelp = formatHelpString(2, 78, help);\n\n  // make help string for one command\n  res += `Command: ${command}\\n`;\n  res += 'Usage:\\n';\n  res += `${cmdFormat.raw}\\n`;\n  res += `${cmdFormat.kw}\\n`;\n  res += formattedHelp;\n  return res.trim() + '\\n';\n}\n\n/*\n * Make the usage documentation\n */\nexport function makeUsageString(): string {\n  let res = `${USAGE}\\n\\nCommand reference\\n`;\n  const groups = getCommandGroups();\n  const groupNames = Object.keys(groups).sort();\n\n  for (let i = 0; i < groupNames.length; i++) {\n    const groupName = groupNames[i];\n    const groupCommands = groups[groupName];\n\n    res += `Command group: ${groupName}\\n\\n`;\n    for (let j = 0; j < groupCommands.length; j++) {\n      const command = groupCommands[j].command;\n      const help = groupCommands[j].help;\n\n      const commandInfo = CLI_ARGS.properties[command];\n\n      const cmdFormat = formatCommandHelpLines(command, commandInfo.items);\n      const formattedHelp = formatHelpString(4, 76, help);\n\n      res += cmdFormat.raw;\n      res += '\\n';\n      res += cmdFormat.kw;\n      res += '\\n';\n      res += formattedHelp;\n      res += '\\n';\n    }\n    res += '\\n';\n  }\n\n  return res;\n}\n\n/*\n * Print usage\n */\nexport function printUsage() {\n  console.error(makeUsageString());\n}\n\n/*\n * Implement just enough getopt(3) to be useful.\n * Only handles short options.\n * Returns an object whose keys are option flags that map to true/false,\n * or to a value.\n * The key _ is mapped to the non-opts list.\n */\ninterface CLI_OPTS {\n  [index: string]: null | boolean | string | string[];\n}\n\nexport function getCLIOpts(\n  argv: string[],\n  opts: string = 'deitUxC:F:B:P:D:G:N:H:T:I:m:M:X:u:p:'\n): CLI_OPTS {\n  const optsTable: CLI_OPTS = {};\n  const remainingArgv = [];\n  const argvBuff = argv.slice(0);\n\n  for (let i = 0; i < opts.length; i++) {\n    if (opts[i] == ':') {\n      continue;\n    }\n    if (i + 1 < opts.length && opts[i + 1] == ':') {\n      optsTable[opts[i]] = null;\n    } else {\n      optsTable[opts[i]] = false;\n    }\n  }\n\n  for (const opt of Object.keys(optsTable)) {\n    for (let i = 0; i < argvBuff.length; i++) {\n      if (argvBuff[i] === null) {\n        break;\n      }\n      if (argvBuff[i] === '--') {\n        break;\n      }\n\n      const argvOpt = `-${opt}`;\n      if (argvOpt === argvBuff[i]) {\n        if (optsTable[opt] === false) {\n          // boolean switch\n          optsTable[opt] = true;\n          argvBuff[i] = '';\n        } else {\n          // argument\n          optsTable[opt] = argvBuff[i + 1];\n          argvBuff[i] = '';\n          argvBuff[i + 1] = '';\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < argvBuff.length; i++) {\n    if (argvBuff[i].length > 0) {\n      if (argvBuff[i] === '--') {\n        continue;\n      }\n      remainingArgv.push(argvBuff[i]);\n    }\n  }\n\n  optsTable['_'] = remainingArgv;\n  return optsTable;\n}\n\nexport function CLIOptAsString(opts: CLI_OPTS, key: string): string | null {\n  if (opts[key] === null || opts[key] === undefined) {\n    return null;\n  } else if (typeof opts[key] === 'string') {\n    return `${opts[key]}`;\n  } else {\n    throw new Error(`Option '${key}' is not a string`);\n  }\n}\n\nexport function CLIOptAsBool(opts: CLI_OPTS, key: string): boolean {\n  if (typeof opts[key] === 'boolean' || opts[key] === null) {\n    return !!opts[key];\n  } else {\n    throw new Error(`Option '${key}' is not a boolean`);\n  }\n}\n\nfunction isStringArray(value: any): value is string[] {\n  if (value instanceof Array) {\n    return value\n      .map((s: any) => typeof s === 'string')\n      .reduce((x: boolean, y: boolean) => x && y, true);\n  } else {\n    return false;\n  }\n}\n\nexport function CLIOptAsStringArray(opts: CLI_OPTS, key: string): string[] | null {\n  const value: any = opts[key];\n  if (value === null || value === undefined) {\n    return null;\n  } else if (isStringArray(value)) {\n    return value;\n  } else {\n    throw new Error(`Option '${key}' is not a string array`);\n  }\n}\n\n/*\n * Use the CLI schema to get all positional and keyword args\n * for a given command.\n */\nexport function getCommandArgs(command: string, argsList: Array<string>) {\n  let commandProps = CLI_ARGS.properties[command].items;\n  if (!Array.isArray(commandProps)) {\n    commandProps = [commandProps];\n  }\n\n  const orderedArgs = [];\n  const foundArgs: Record<string, string> = {};\n\n  // scan for keywords\n  for (let i = 0; i < argsList.length; i++) {\n    if (argsList[i].startsWith('--')) {\n      // keyword argument\n      const argName = argsList[i].slice(2);\n      let argValue = null;\n\n      // dup?\n      if (foundArgs.hasOwnProperty(argName)) {\n        return {\n          status: false,\n          error: `duplicate argument ${argsList[i]}`,\n        };\n      }\n\n      for (let j = 0; j < commandProps.length; j++) {\n        if (!commandProps[j].hasOwnProperty('name')) {\n          continue;\n        }\n        if (commandProps[j].name === argName) {\n          // found!\n          // end of args?\n          if (i + 1 >= argsList.length) {\n            return {\n              status: false,\n              error: `no value for argument ${argsList[i]}`,\n            };\n          }\n\n          argValue = argsList[i + 1];\n        }\n      }\n\n      if (argValue) {\n        // found an argument given as a keyword\n        i += 1;\n        foundArgs[argName] = argValue;\n      } else {\n        return {\n          status: false,\n          error: `no such argument ${argsList[i]}`,\n        };\n      }\n    } else {\n      // positional argument\n      orderedArgs.push(argsList[i]);\n    }\n  }\n\n  // merge foundArgs and orderedArgs back into an ordered argument list\n  // that is conformant to the CLI specification.\n  const mergedArgs = [];\n  let orderedArgIndex = 0;\n\n  for (let i = 0; i < commandProps.length; i++) {\n    if (orderedArgIndex < orderedArgs.length) {\n      if (!commandProps[i].hasOwnProperty('name')) {\n        // unnamed positional argument\n        mergedArgs.push(orderedArgs[orderedArgIndex]);\n        orderedArgIndex += 1;\n      } else if (!foundArgs.hasOwnProperty(commandProps[i].name)) {\n        // named positional argument, NOT given as a keyword\n        mergedArgs.push(orderedArgs[orderedArgIndex]);\n        orderedArgIndex += 1;\n      } else {\n        // keyword argument\n        mergedArgs.push(foundArgs[commandProps[i].name]);\n      }\n    } else {\n      // keyword argument (possibly undefined)\n      mergedArgs.push(foundArgs[commandProps[i].name]);\n    }\n  }\n\n  return {\n    status: true,\n    arguments: mergedArgs,\n  };\n}\n\n/*\n * Check command args\n */\nexport interface CheckArgsSuccessType {\n  success: true;\n  command: string;\n  args: Array<string>;\n}\n\nexport interface CheckArgsFailType {\n  success: false;\n  error: string;\n  command: string;\n  usage: boolean;\n}\n\nexport function checkArgs(argList: Array<string>): CheckArgsSuccessType | CheckArgsFailType {\n  if (argList.length <= 2) {\n    return {\n      success: false,\n      error: 'No command given',\n      usage: true,\n      command: '',\n    };\n  }\n\n  const commandName = argList[2];\n  const allCommandArgs = argList.slice(3);\n\n  if (!CLI_ARGS.properties.hasOwnProperty(commandName)) {\n    return {\n      success: false,\n      error: `Unrecognized command '${commandName}'`,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  const parsedCommandArgs = getCommandArgs(commandName, allCommandArgs);\n  if (!parsedCommandArgs.status) {\n    return {\n      success: false,\n      error: parsedCommandArgs.error!,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  const commandArgs = parsedCommandArgs.arguments;\n\n  // validate all required commands as given.\n  // if there are optional commands, then only validate\n  // them if they're given.\n  const commandSchema = JSON.parse(JSON.stringify(CLI_ARGS.properties[commandName]));\n  for (let i = commandSchema.minItems; i < commandSchema.maxItems; i++) {\n    if (i < commandArgs!.length) {\n      if (commandArgs![i] === null || commandArgs![i] === undefined) {\n        // optional argument not given.  Update the schema we're checking against\n        // to expect this.\n        // @ts-ignore\n        commandArgs[i] = null;\n        commandSchema.items[i] = { type: 'null' };\n      }\n    }\n  }\n\n  const ajv = Ajv();\n  const valid = ajv.validate(commandSchema, commandArgs);\n  if (!valid) {\n    let errorMsg = '';\n    for (let i = 0; i < ajv.errors!.length; i++) {\n      const msg = `Invalid command arguments: Schema \"${\n        ajv.errors![0].schemaPath\n      }\" failed validation (problem: \"${ajv.errors![0].message}\", cause: \"${JSON.stringify(\n        ajv.errors![0].params\n      )}\")\\n`;\n      errorMsg += msg;\n    }\n    return {\n      success: false,\n      error: errorMsg,\n      usage: true,\n      command: commandName,\n    };\n  }\n\n  return {\n    success: true,\n    command: commandName,\n    args: commandArgs!,\n  };\n}\n\n/**\n * Load the config file and return a config dict.\n * If no config file exists, then return the default config.\n *\n * @configPath (string) the path to the config file.\n * @networkType (sring) 'mainnet', 'regtest', or 'testnet'\n */\nexport function loadConfig(configFile: string, networkType: string): CLI_CONFIG_TYPE {\n  if (networkType !== 'mainnet' && networkType !== 'testnet' && networkType != 'regtest') {\n    throw new Error('Unregognized network');\n  }\n\n  let configRet: CLI_CONFIG_TYPE;\n\n  if (networkType === 'mainnet') {\n    configRet = Object.assign({}, CONFIG_DEFAULTS);\n  } else if (networkType === 'regtest') {\n    configRet = Object.assign({}, CONFIG_REGTEST_DEFAULTS);\n  } else {\n    configRet = Object.assign({}, CONFIG_TESTNET_DEFAULTS);\n  }\n\n  try {\n    configRet = JSON.parse(fs.readFileSync(configFile).toString()) as CLI_CONFIG_TYPE;\n  } catch (e) {}\n\n  return configRet;\n}\n","import * as blockstack from 'blockstack';\n\nexport function encryptBackupPhrase(plaintextBuffer: string, password: string): Promise<Buffer> {\n  return blockstack.encryptMnemonic(plaintextBuffer, password);\n}\n\nexport function decryptBackupPhrase(\n  dataBuffer: string | Buffer,\n  password: string\n): Promise<string> {\n  return blockstack.decryptMnemonic(dataBuffer, password);\n}\n","import * as logger from 'winston';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nimport * as URL from 'url';\nimport * as readline from 'readline';\nimport * as stream from 'stream';\nimport * as fs from 'fs';\nimport * as blockstack from 'blockstack';\nimport { TokenSigner } from 'jsontokens';\nimport {\n  getTypeString,\n  ClarityAbiType,\n  isClarityAbiPrimitive,\n  isClarityAbiBuffer,\n  isClarityAbiResponse,\n  isClarityAbiOptional,\n  isClarityAbiTuple,\n  isClarityAbiList,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCVFromString,\n  trueCV,\n  falseCV,\n  standardPrincipalCV,\n  TransactionVersion,\n} from '@stacks/transactions';\n\nimport { StacksNetwork } from '@stacks/network';\n\nconst ZoneFile = require('zone-file');\n\nimport {\n  PRIVATE_KEY_NOSIGN_PATTERN,\n  PRIVATE_KEY_PATTERN,\n  PRIVATE_KEY_MULTISIG_PATTERN,\n  PRIVATE_KEY_SEGWIT_P2SH_PATTERN,\n  ID_ADDRESS_PATTERN,\n} from './argparse';\n\nimport { TransactionSigner } from 'blockstack';\n\nimport { decryptBackupPhrase } from './encrypt';\n\nimport { getOwnerKeyInfo, getApplicationKeyInfo, extractAppKey } from './keys';\n\nimport { NameInfoType, CLINetworkAdapter } from './network';\n\nexport interface UTXO {\n  value?: number;\n  confirmations?: number;\n  tx_hash: string;\n  tx_output_n: number;\n}\n\nclass CLITransactionSigner implements TransactionSigner {\n  address: string;\n  isComplete: boolean;\n\n  constructor(address = '') {\n    this.address = address;\n    this.isComplete = false;\n  }\n\n  getAddress(): Promise<string> {\n    return Promise.resolve().then(() => this.address);\n  }\n\n  signTransaction(_txIn: bitcoinjs.TransactionBuilder, _signingIndex: number): Promise<void> {\n    return Promise.resolve().then(() => {});\n  }\n\n  signerVersion(): number {\n    return 0;\n  }\n}\n\nexport class NullSigner extends CLITransactionSigner {}\n\nexport class MultiSigKeySigner extends CLITransactionSigner {\n  redeemScript: Buffer;\n  privateKeys: string[];\n  m: number;\n\n  constructor(redeemScript: string, privateKeys: string[]) {\n    super();\n    this.redeemScript = Buffer.from(redeemScript, 'hex');\n    this.privateKeys = privateKeys;\n    this.isComplete = true;\n    try {\n      // try to deduce m (as in m-of-n)\n      const chunks = bitcoinjs.script.decompile(this.redeemScript);\n      const firstOp = chunks![0];\n      this.m = parseInt(bitcoinjs.script.toASM([firstOp]).slice(3), 10);\n      this.address = bitcoinjs.address.toBase58Check(\n        bitcoinjs.crypto.hash160(this.redeemScript),\n        blockstack.config.network.layer1.scriptHash\n      );\n    } catch (e) {\n      logger.error(e);\n      throw new Error('Improper redeem script for multi-sig input.');\n    }\n  }\n\n  getAddress(): Promise<string> {\n    return Promise.resolve().then(() => this.address);\n  }\n\n  signTransaction(txIn: bitcoinjs.TransactionBuilder, signingIndex: number): Promise<void> {\n    return Promise.resolve().then(() => {\n      const keysToUse = this.privateKeys.slice(0, this.m);\n      keysToUse.forEach(keyHex => {\n        const ecPair = blockstack.hexStringToECPair(keyHex);\n        txIn.sign(signingIndex, ecPair, this.redeemScript);\n      });\n    });\n  }\n\n  signerVersion(): number {\n    return 0;\n  }\n}\n\nexport class SegwitP2SHKeySigner extends CLITransactionSigner {\n  redeemScript: Buffer;\n  witnessScript: Buffer;\n  privateKeys: string[];\n  m: number;\n\n  constructor(redeemScript: string, witnessScript: string, m: number, privateKeys: string[]) {\n    super();\n    this.redeemScript = Buffer.from(redeemScript, 'hex');\n    this.witnessScript = Buffer.from(witnessScript, 'hex');\n    this.address = bitcoinjs.address.toBase58Check(\n      bitcoinjs.crypto.hash160(this.redeemScript),\n      blockstack.config.network.layer1.scriptHash\n    );\n\n    this.privateKeys = privateKeys;\n    this.m = m;\n    this.isComplete = true;\n  }\n\n  getAddress(): Promise<string> {\n    return Promise.resolve().then(() => this.address);\n  }\n\n  findUTXO(txIn: bitcoinjs.TransactionBuilder, signingIndex: number, utxos: UTXO[]): UTXO {\n    // NOTE: this is O(n*2) complexity for n UTXOs when signing an n-input transaction\n    // NOTE: as of bitcoinjs-lib 4.x, the \"tx\" field is private\n    const private_tx = (txIn as any).__TX;\n    const txidBuf = new Buffer(private_tx.ins[signingIndex].hash.slice());\n    const outpoint = private_tx.ins[signingIndex].index;\n\n    txidBuf.reverse(); // NOTE: bitcoinjs encodes txid as big-endian\n    const txid = txidBuf.toString('hex');\n\n    for (let i = 0; i < utxos.length; i++) {\n      if (utxos[i].tx_hash === txid && utxos[i].tx_output_n === outpoint) {\n        if (!utxos[i].value) {\n          throw new Error(`UTXO for hash=${txid} vout=${outpoint} has no value`);\n        }\n        return utxos[i];\n      }\n    }\n    throw new Error(`No UTXO for input hash=${txid} vout=${outpoint}`);\n  }\n\n  signTransaction(txIn: bitcoinjs.TransactionBuilder, signingIndex: number): Promise<void> {\n    // This is an interface issue more than anything else.  Basically, in order to\n    // form the segwit sighash, we need the UTXOs.  If we knew better, we would have\n    // blockstack.js simply pass the consumed UTXO into this method.  But alas, we do\n    // not.  Therefore, we need to re-query them.  This is probably fine, since we're\n    // not pressured for time when it comes to generating transactions.\n    return Promise.resolve()\n      .then(() => {\n        return this.getAddress();\n      })\n      .then(address => {\n        return blockstack.config.network.getUTXOs(address);\n      })\n      .then(utxos => {\n        const utxo = this.findUTXO(txIn, signingIndex, utxos);\n        if (this.m === 1) {\n          // p2sh-p2wpkh\n          const ecPair = blockstack.hexStringToECPair(this.privateKeys[0]);\n          txIn.sign(signingIndex, ecPair, this.redeemScript, undefined, utxo.value);\n        } else {\n          // p2sh-p2wsh\n          const keysToUse = this.privateKeys.slice(0, this.m);\n          keysToUse.forEach(keyHex => {\n            const ecPair = blockstack.hexStringToECPair(keyHex);\n            txIn.sign(\n              signingIndex,\n              ecPair,\n              this.redeemScript,\n              undefined,\n              utxo.value,\n              this.witnessScript\n            );\n          });\n        }\n      });\n  }\n\n  signerVersion(): number {\n    return 0;\n  }\n}\n\nexport class SafetyError extends Error {\n  safetyErrors: AnyJson;\n  constructor(safetyErrors: AnyJson) {\n    super(JSONStringify(safetyErrors, true));\n    this.safetyErrors = safetyErrors;\n  }\n}\n\nfunction isCLITransactionSigner(\n  signer: string | CLITransactionSigner\n): signer is CLITransactionSigner {\n  return (signer as CLITransactionSigner).signerVersion !== undefined;\n}\n\nexport function hasKeys(signer: string | CLITransactionSigner): boolean {\n  if (isCLITransactionSigner(signer)) {\n    const s = signer as CLITransactionSigner;\n    return s.isComplete;\n  } else {\n    return true;\n  }\n}\n\n/*\n * Parse a string into a NullSigner\n * The string has the format \"nosign:address\"\n * @return a NullSigner instance\n */\nexport function parseNullSigner(addrString: string): NullSigner {\n  if (!addrString.startsWith('nosign:')) {\n    throw new Error('Invalid nosign string');\n  }\n\n  const addr = addrString.slice('nosign:'.length);\n  return new NullSigner(addr);\n}\n\n/*\n * Parse a string into a MultiSigKeySigner.\n * The string has the format \"m,pk1,pk2,...,pkn\"\n * @serializedPrivateKeys (string) the above string\n * @return a MultiSigKeySigner instance\n */\nexport function parseMultiSigKeys(serializedPrivateKeys: string): MultiSigKeySigner {\n  const matches = serializedPrivateKeys.match(PRIVATE_KEY_MULTISIG_PATTERN);\n  if (!matches) {\n    throw new Error('Invalid multisig private key string');\n  }\n\n  const m = parseInt(matches[1]);\n  const parts = serializedPrivateKeys.split(',');\n  const privkeys = [];\n  for (let i = 1; i < 256; i++) {\n    const pk = parts[i];\n    if (!pk) {\n      break;\n    }\n\n    if (!pk.match(PRIVATE_KEY_PATTERN)) {\n      throw new Error('Invalid private key string');\n    }\n\n    privkeys.push(pk);\n  }\n\n  // generate public keys\n  const pubkeys = privkeys.map(pk => {\n    return Buffer.from(getPublicKeyFromPrivateKey(pk), 'hex');\n  });\n\n  // generate redeem script\n  const multisigInfo = bitcoinjs.payments.p2ms({ m, pubkeys });\n  return new MultiSigKeySigner(multisigInfo.output!.toString('hex'), privkeys);\n}\n\n/*\n * Parse a string into a SegwitP2SHKeySigner\n * The string has the format \"segwit:p2sh:m,pk1,pk2,...,pkn\"\n * @serializedPrivateKeys (string) the above string\n * @return a MultiSigKeySigner instance\n */\nexport function parseSegwitP2SHKeys(serializedPrivateKeys: string): SegwitP2SHKeySigner {\n  const matches = serializedPrivateKeys.match(PRIVATE_KEY_SEGWIT_P2SH_PATTERN);\n  if (!matches) {\n    throw new Error('Invalid segwit p2sh private key string');\n  }\n\n  const m = parseInt(matches[1]);\n  const parts = serializedPrivateKeys.split(',');\n  const privkeys = [];\n  for (let i = 1; i < 256; i++) {\n    const pk = parts[i];\n    if (!pk) {\n      break;\n    }\n\n    if (!pk.match(PRIVATE_KEY_PATTERN)) {\n      throw new Error('Invalid private key string');\n    }\n\n    privkeys.push(pk);\n  }\n\n  // generate public keys\n  const pubkeys = privkeys.map(pk => {\n    return Buffer.from(getPublicKeyFromPrivateKey(pk), 'hex');\n  });\n\n  // generate redeem script for p2wpkh or p2sh, depending on how many keys\n  let redeemScript: string;\n  let witnessScript = '';\n  if (m === 1) {\n    // p2wpkh\n    const p2wpkh = bitcoinjs.payments.p2wpkh({ pubkey: pubkeys[0] });\n    const p2sh = bitcoinjs.payments.p2sh({ redeem: p2wpkh });\n\n    redeemScript = p2sh.redeem!.output!.toString('hex');\n  } else {\n    // p2wsh\n    const p2ms = bitcoinjs.payments.p2ms({ m, pubkeys });\n    const p2wsh = bitcoinjs.payments.p2wsh({ redeem: p2ms });\n    const p2sh = bitcoinjs.payments.p2sh({ redeem: p2wsh });\n\n    redeemScript = p2sh.redeem!.output!.toString('hex');\n    witnessScript = p2wsh.redeem!.output!.toString('hex');\n  }\n\n  return new SegwitP2SHKeySigner(redeemScript, witnessScript, m, privkeys);\n}\n\n/*\n * Decode one or more private keys from a string.\n * Can be used to parse single private keys (as strings),\n * or multisig bundles (as CLITransactionSigners)\n * @serializedPrivateKey (string) the private key, encoded\n * @return a CLITransactionSigner or a String\n */\nexport function decodePrivateKey(serializedPrivateKey: string): string | CLITransactionSigner {\n  const nosignMatches = serializedPrivateKey.match(PRIVATE_KEY_NOSIGN_PATTERN);\n  if (!!nosignMatches) {\n    // no private key\n    return parseNullSigner(serializedPrivateKey);\n  }\n\n  const singleKeyMatches = serializedPrivateKey.match(PRIVATE_KEY_PATTERN);\n  if (!!singleKeyMatches) {\n    // one private key\n    return serializedPrivateKey;\n  }\n\n  const multiKeyMatches = serializedPrivateKey.match(PRIVATE_KEY_MULTISIG_PATTERN);\n  if (!!multiKeyMatches) {\n    // multisig bundle\n    return parseMultiSigKeys(serializedPrivateKey);\n  }\n\n  const segwitP2SHMatches = serializedPrivateKey.match(PRIVATE_KEY_SEGWIT_P2SH_PATTERN);\n  if (!!segwitP2SHMatches) {\n    // segwit p2sh bundle\n    return parseSegwitP2SHKeys(serializedPrivateKey);\n  }\n\n  throw new Error('Unparseable private key');\n}\n\ntype AnyJson = string | number | boolean | null | { [property: string]: AnyJson } | AnyJson[];\n\n/*\n * JSON stringify helper\n * -- if stdout is a TTY, then pretty-format the JSON\n * -- otherwise, print it all on one line to make it easy for programs to consume\n */\nexport function JSONStringify(obj: AnyJson, stderr: boolean = false): string {\n  if ((!stderr && process.stdout.isTTY) || (stderr && process.stderr.isTTY)) {\n    return JSON.stringify(obj, null, 2);\n  } else {\n    return JSON.stringify(obj);\n  }\n}\n\n/*\n * Get a private key's public key, while honoring the 01 to compress it.\n * @privateKey (string) the hex-encoded private key\n */\nexport function getPublicKeyFromPrivateKey(privateKey: string): string {\n  const ecKeyPair = blockstack.hexStringToECPair(privateKey);\n  return ecKeyPair.publicKey.toString('hex');\n}\n\n/*\n * Get a private key's address.  Honor the 01 to compress the public key\n * @privateKey (string) the hex-encoded private key\n */\nexport function getPrivateKeyAddress(\n  network: CLINetworkAdapter,\n  privateKey: string | CLITransactionSigner\n): string {\n  if (isCLITransactionSigner(privateKey)) {\n    const pkts = privateKey as CLITransactionSigner;\n    return pkts.address;\n  } else {\n    const pk = privateKey as string;\n    const ecKeyPair = blockstack.hexStringToECPair(pk);\n    return network.coerceAddress(blockstack.ecPairToAddress(ecKeyPair));\n  }\n}\n\n/*\n * Is a name a sponsored name (a subdomain)?\n */\nexport function isSubdomain(name: string): boolean {\n  return !!name.match(/^[^\\.]+\\.[^.]+\\.[^.]+$/);\n}\n\n/*\n * Get the canonical form of a hex-encoded private key\n * (i.e. strip the trailing '01' if present)\n */\nexport function canonicalPrivateKey(privkey: string): string {\n  if (privkey.length == 66 && privkey.slice(-2) === '01') {\n    return privkey.substring(0, 64);\n  }\n  return privkey;\n}\n\n/*\n * Get the sum of a set of UTXOs' values\n * @txIn (object) the transaction\n */\nexport function sumUTXOs(utxos: UTXO[]): number {\n  return utxos.reduce((agg, x) => agg + x.value!, 0);\n}\n\n/*\n * Hash160 function for zone files\n */\nexport function hash160(buff: Buffer): Buffer {\n  return bitcoinjs.crypto.hash160(buff);\n}\n\n/*\n * Normalize a URL--remove duplicate /'s from the root of the path.\n * Throw an exception if it's not well-formed.\n */\nexport function checkUrl(url: string): string {\n  const urlinfo = URL.parse(url);\n  if (!urlinfo.protocol) {\n    throw new Error(`Malformed full URL: missing scheme in ${url}`);\n  }\n\n  if (!urlinfo.path || urlinfo.path.startsWith('//')) {\n    throw new Error(`Malformed full URL: path root has multiple /'s: ${url}`);\n  }\n\n  return url;\n}\n\n/*\n * Sign a profile into a JWT\n */\nexport function makeProfileJWT(profileData: Object, privateKey: string): string {\n  const signedToken = blockstack.signProfileToken(profileData, privateKey);\n  const wrappedToken = blockstack.wrapProfileToken(signedToken);\n  const tokenRecords = [wrappedToken];\n  return JSONStringify((tokenRecords as unknown) as AnyJson);\n}\n\nexport async function makeDIDConfiguration(\n  network: CLINetworkAdapter,\n  blockstackID: string,\n  domain: string,\n  privateKey: string\n): Promise<{ entries: { did: string; jwt: string }[] }> {\n  const tokenSigner = new TokenSigner('ES256K', privateKey);\n  const nameInfo = await network.getNameInfo(blockstackID);\n  const did = nameInfo.did!;\n  const payload = {\n    iss: did,\n    domain,\n    exp: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),\n  };\n\n  const jwt = tokenSigner.sign(payload);\n  return {\n    entries: [\n      {\n        did,\n        jwt,\n      },\n    ],\n  };\n}\n/*\n * Broadcast a transaction and a zone file.\n * Returns an object that encodes the success/failure of doing so.\n * If zonefile is None, then only the transaction will be sent.\n */\nexport async function broadcastTransactionAndZoneFile(\n  network: CLINetworkAdapter,\n  tx: string,\n  zonefile?: string\n) {\n  let txid: string;\n  return Promise.resolve()\n    .then(() => {\n      return network.broadcastTransaction(tx);\n    })\n    .then((_txid: string) => {\n      txid = _txid;\n      if (zonefile) {\n        return network.broadcastZoneFile(zonefile, txid);\n      } else {\n        return { status: true };\n      }\n    })\n    .then(resp => {\n      if (!resp.status) {\n        return {\n          status: false,\n          error: 'Failed to broadcast zone file',\n          txid: txid,\n        };\n      } else {\n        return {\n          status: true,\n          txid: txid,\n        };\n      }\n    })\n    .catch(e => {\n      return {\n        status: false,\n        error: 'Caught exception sending transaction or zone file',\n        message: e.message,\n        stacktrace: e.stack,\n      };\n    });\n}\n\n/*\n * Easier-to-use getNameInfo.  Returns null if the name does not exist.\n */\nexport function getNameInfoEasy(\n  network: CLINetworkAdapter,\n  name: string\n): Promise<NameInfoType | null> {\n  const nameInfoPromise = network\n    .getNameInfo(name)\n    .then((nameInfo: NameInfoType) => nameInfo)\n    .catch((error: Error): null => {\n      if (error.message === 'Name not found') {\n        return null;\n      } else {\n        throw error;\n      }\n    });\n\n  return nameInfoPromise;\n}\n\n/*\n * Look up a name's zone file, profile URL, and profile\n * Returns a Promise to the above, or throws an error.\n */\nexport async function nameLookup(\n  network: CLINetworkAdapter,\n  name: string,\n  includeProfile: boolean = true\n): Promise<{ profile: any; profileUrl?: string; zonefile?: string }> {\n  const nameInfoPromise = getNameInfoEasy(network, name);\n  const profilePromise = includeProfile\n    ? blockstack.lookupProfile(name).catch(() => null)\n    : Promise.resolve().then(() => null);\n\n  const zonefilePromise = nameInfoPromise.then((nameInfo: NameInfoType | null) =>\n    nameInfo ? nameInfo.zonefile : null\n  );\n\n  const [profile, zonefile, nameInfo] = await Promise.all([\n    profilePromise,\n    zonefilePromise,\n    nameInfoPromise,\n  ]);\n  let profileObj = profile;\n\n  if (!nameInfo) {\n    throw new Error('Name not found');\n  }\n  if (nameInfo.hasOwnProperty('grace_period') && nameInfo.grace_period) {\n    throw new Error(\n      `Name is expired at block ${nameInfo.expire_block} ` +\n        `and must be renewed by block ${nameInfo.renewal_deadline}`\n    );\n  }\n\n  let profileUrl = null;\n  try {\n    const zonefileJSON = ZoneFile.parseZoneFile(zonefile);\n    if (zonefileJSON.uri && zonefileJSON.hasOwnProperty('$origin')) {\n      profileUrl = blockstack.getTokenFileUrl(zonefileJSON);\n    }\n  } catch (e) {\n    profileObj = null;\n  }\n\n  const ret = {\n    zonefile: zonefile,\n    profile: profileObj,\n    profileUrl: profileUrl,\n  };\n  // @ts-ignore\n  return ret;\n}\n\n/*\n * Get a password.  Don't echo characters to stdout.\n * Password will be passed to the given callback.\n */\nexport function getpass(promptStr: string, cb: (passwd: string) => void) {\n  const silentOutput = new stream.Writable({\n    write: (_chunk, _encoding, callback) => {\n      callback();\n    },\n  });\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: silentOutput,\n    terminal: true,\n  });\n\n  process.stderr.write(promptStr);\n  rl.question('', passwd => {\n    rl.close();\n    process.stderr.write('\\n');\n    cb(passwd);\n  });\n\n  return;\n}\n\n/*\n * Extract a 12-word backup phrase.  If the raw 12-word phrase is given, it will\n * be returned.  If the ciphertext is given, the user will be prompted for a password\n * (if a password is not given as an argument).\n */\nexport async function getBackupPhrase(\n  backupPhraseOrCiphertext: string,\n  password?: string\n): Promise<string> {\n  if (backupPhraseOrCiphertext.split(/ +/g).length > 1) {\n    // raw backup phrase\n    return backupPhraseOrCiphertext;\n  } else {\n    // ciphertext\n    const pass: string = await new Promise((resolve, reject) => {\n      if (!process.stdin.isTTY && !password) {\n        // password must be given\n        reject(new Error('Password argument required in non-interactive mode'));\n      } else {\n        // prompt password\n        getpass('Enter password: ', p => {\n          resolve(p);\n        });\n      }\n    });\n    return await decryptBackupPhrase(Buffer.from(backupPhraseOrCiphertext, 'base64'), pass);\n  }\n}\n\n/*\n * mkdir -p\n * path must be absolute\n */\nexport function mkdirs(path: string): void {\n  if (path.length === 0 || path[0] !== '/') {\n    throw new Error('Path must be absolute');\n  }\n\n  const pathParts = path.replace(/^\\//, '').split('/');\n  let tmpPath = '/';\n  for (let i = 0; i <= pathParts.length; i++) {\n    try {\n      const statInfo = fs.lstatSync(tmpPath);\n      if ((statInfo.mode & fs.constants.S_IFDIR) === 0) {\n        throw new Error(`Not a directory: ${tmpPath}`);\n      }\n    } catch (e) {\n      if (e.code === 'ENOENT') {\n        // need to create\n        fs.mkdirSync(tmpPath);\n      } else {\n        throw e;\n      }\n    }\n    if (i === pathParts.length) {\n      break;\n    }\n    tmpPath = `${tmpPath}/${pathParts[i]}`;\n  }\n}\n\n/*\n * Given a name or ID address, return a promise to the ID Address\n */\nexport async function getIDAddress(\n  network: CLINetworkAdapter,\n  nameOrIDAddress: string\n): Promise<string> {\n  if (nameOrIDAddress.match(ID_ADDRESS_PATTERN)) {\n    return nameOrIDAddress;\n  } else {\n    // need to look it up\n    const nameInfo = await network.getNameInfo(nameOrIDAddress);\n    return `ID-${nameInfo.address}`;\n  }\n}\n\n/*\n * Find all identity addresses until we have one that matches the given one.\n * Loops forever if not found\n */\nexport async function getOwnerKeyFromIDAddress(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  idAddress: string\n): Promise<string> {\n  let index = 0;\n  while (true) {\n    const keyInfo = await getOwnerKeyInfo(network, mnemonic, index);\n    if (keyInfo.idAddress === idAddress) {\n      return keyInfo.privateKey;\n    }\n    index++;\n  }\n}\n\n/*\n * Given a name or an ID address and a possibly-encrypted mnemonic, get the owner and app\n * private keys.\n * May prompt for a password if mnemonic is encrypted.\n */\nexport interface IDAppKeys {\n  ownerPrivateKey: string;\n  appPrivateKey: string;\n  mnemonic: string;\n}\n\nexport async function getIDAppKeys(\n  network: CLINetworkAdapter,\n  nameOrIDAddress: string,\n  appOrigin: string,\n  mnemonicOrCiphertext: string\n): Promise<IDAppKeys> {\n  const mnemonic = await getBackupPhrase(mnemonicOrCiphertext);\n  const idAddress = await getIDAddress(network, nameOrIDAddress);\n  const appKeyInfo = await getApplicationKeyInfo(network, mnemonic, idAddress, appOrigin);\n  const appPrivateKey = extractAppKey(network, appKeyInfo);\n  const ownerPrivateKey = await getOwnerKeyFromIDAddress(network, mnemonic, idAddress);\n  const ret = {\n    appPrivateKey,\n    ownerPrivateKey,\n    mnemonic,\n  };\n  return ret;\n}\n\ninterface InquirerPrompt {\n  type: string;\n  name: string;\n  message: string;\n  choices?: string[];\n}\n\nexport function makePromptsFromArgList(expectedArgs: ClarityFunctionArg[]): InquirerPrompt[] {\n  const prompts = [];\n  for (let i = 0; i < expectedArgs.length; i++) {\n    prompts.push(argToPrompt(expectedArgs[i]));\n  }\n  return prompts;\n}\n\nexport interface ClarityFunctionArg {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport function argToPrompt(arg: ClarityFunctionArg): InquirerPrompt {\n  const name = arg.name;\n  const type = arg.type;\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return {\n        type: 'input',\n        name,\n        message: `Enter value for function argument \"${name}\" of type ${typeString}`,\n      };\n    } else if (type === 'int128') {\n      return {\n        type: 'input',\n        name,\n        message: `Enter value for function argument \"${name}\" of type ${typeString}`,\n      };\n    } else if (type === 'bool') {\n      return {\n        type: 'list',\n        name,\n        message: `Enter value for function argument \"${name}\" of type ${typeString}`,\n        choices: ['True', 'False'],\n      };\n    } else if (type === 'principal') {\n      return {\n        type: 'input',\n        name,\n        message: `Enter value for function argument \"${name}\" of type ${typeString}`,\n      };\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    return {\n      type: 'input',\n      name,\n      message: `Enter value for function argument \"${name}\" of type ${typeString}`,\n    };\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n\nexport function parseClarityFunctionArgAnswers(\n  answers: any,\n  expectedArgs: ClarityFunctionArg[]\n): ClarityValue[] {\n  const functionArgs: ClarityValue[] = [];\n  for (let i = 0; i < expectedArgs.length; i++) {\n    const expectedArg = expectedArgs[i];\n    const answer = answers[expectedArg.name];\n    functionArgs.push(answerToClarityValue(answer, expectedArg));\n  }\n  return functionArgs;\n}\n\nexport function answerToClarityValue(answer: any, arg: ClarityFunctionArg): ClarityValue {\n  const type = arg.type;\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(answer);\n    } else if (type === 'int128') {\n      return intCV(answer);\n    } else if (type === 'bool') {\n      return answer == 'True' ? trueCV() : falseCV();\n    } else if (type === 'principal') {\n      // TODO handle contract principals\n      return standardPrincipalCV(answer);\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    return bufferCVFromString(answer);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n\nexport function generateExplorerTxPageUrl(txid: string, network: StacksNetwork): string {\n  if (network.version === TransactionVersion.Testnet) {\n    return `https://testnet-explorer.now.sh/txid/0x${txid}`;\n  } else {\n    return `https://explorer.blockstack.org/txid/0x${txid}`;\n  }\n}\n","// TODO: most of this code should be in blockstack.js\n// Will remove most of this code once the wallet functionality is there instead.\n\nimport * as blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nimport * as bip39 from 'bip39';\n\nconst c32check = require('c32check');\n\nimport { getPrivateKeyAddress } from './utils';\n\nimport { getMaxIDSearchIndex } from './cli';\n\nimport { CLINetworkAdapter } from './network';\n\nimport * as bip32 from 'bip32';\nimport { BIP32Interface } from 'bip32';\n\nexport const STRENGTH = 128; // 12 words\nexport const STX_WALLET_COMPATIBLE_SEED_STRENGTH = 256;\nexport const DERIVATION_PATH = \"m/44'/5757'/0'/0/0\";\n\nexport type OwnerKeyInfoType = {\n  privateKey: string;\n  version: string;\n  index: number;\n  idAddress: string;\n};\n\nexport type PaymentKeyInfoType = {\n  privateKey: string;\n  address: {\n    BTC: string;\n    STACKS: string;\n  };\n  index: number;\n};\n\nexport type StacksKeyInfoType = {\n  privateKey: string;\n  address: string;\n  btcAddress: string;\n  index: number;\n};\n\nexport type AppKeyInfoType = {\n  keyInfo: {\n    privateKey: string;\n    address: string;\n  };\n  legacyKeyInfo: {\n    privateKey: string;\n    address: string;\n  };\n  ownerKeyIndex: number;\n};\n\nasync function walletFromMnemonic(mnemonic: string): Promise<blockstack.BlockstackWallet> {\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return new blockstack.BlockstackWallet(bip32.fromSeed(seed));\n}\n\nfunction getNodePrivateKey(node: BIP32Interface): string {\n  return blockstack.ecPairToHexString(bitcoin.ECPair.fromPrivateKey(node.privateKey!));\n}\n\n/*\n * Get the owner key information for a 12-word phrase, at a specific index.\n * @network (object) the blockstack network\n * @mnemonic (string) the 12-word phrase\n * @index (number) the account index\n * @version (string) the derivation version string\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .version (string) the version string of the derivation\n *    .idAddress (string) the ID-address\n */\nexport async function getOwnerKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number,\n  version: string = 'v0.10-current'\n): Promise<OwnerKeyInfoType> {\n  const wallet = await walletFromMnemonic(mnemonic);\n  const identity = wallet.getIdentityAddressNode(index);\n  const addr = network.coerceAddress(blockstack.BlockstackWallet.getAddressFromBIP32Node(identity));\n  const privkey = getNodePrivateKey(identity);\n  return {\n    privateKey: privkey,\n    version: version,\n    index: index,\n    idAddress: `ID-${addr}`,\n  } as OwnerKeyInfoType;\n}\n\n/*\n * Get the payment key information for a 12-word phrase.\n * @network (object) the blockstack network\n * @mnemonic (string) the 12-word phrase\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .address (string) the address of the private key\n */\nexport async function getPaymentKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<PaymentKeyInfoType> {\n  const wallet = await walletFromMnemonic(mnemonic);\n  const privkey = wallet.getBitcoinPrivateKey(0);\n  const addr = getPrivateKeyAddress(network, privkey);\n  const result: PaymentKeyInfoType = {\n    privateKey: privkey,\n    address: {\n      BTC: addr,\n      STACKS: c32check.b58ToC32(addr),\n    },\n    index: 0,\n  };\n  return result;\n}\n\n/*\n * Get the payment key information for a 24-word phrase used by the Stacks wallet.\n * @network (object) the blockstack network\n * @mnemonic (string) the 24-word phrase\n *\n * Returns an object with:\n *    .privateKey (string) the hex private key\n *    .address (string) the address of the private key\n */\nexport async function getStacksWalletKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<StacksKeyInfoType> {\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  const master = bip32.fromSeed(seed);\n  const child = master.derivePath(\"m/44'/5757'/0'/0/0\"); // taken from stacks-wallet. See https://github.com/blockstack/stacks-wallet\n  const ecPair = bitcoin.ECPair.fromPrivateKey(child.privateKey!);\n  const privkey = blockstack.ecPairToHexString(ecPair);\n\n  const addr = getPrivateKeyAddress(network, privkey);\n  let btcAddress: string;\n  if (network.isTestnet()) {\n    // btcAddress = const { address } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey });\n    const { address } = bitcoin.payments.p2pkh({\n      pubkey: ecPair.publicKey,\n      network: bitcoin.networks.regtest,\n    });\n    btcAddress = address!;\n  } else {\n    const { address } = bitcoin.payments.p2pkh({\n      pubkey: ecPair.publicKey,\n      network: bitcoin.networks.bitcoin,\n    });\n    btcAddress = address!;\n  }\n  const result: StacksKeyInfoType = {\n    privateKey: privkey,\n    address: c32check.b58ToC32(addr),\n    btcAddress,\n    index: 0,\n  };\n  return result;\n}\n\n/*\n * Find the index of an ID address, given the mnemonic.\n * Returns the index if found\n * Returns -1 if not found\n */\nexport async function findIdentityIndex(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  idAddress: string,\n  maxIndex?: number\n): Promise<number> {\n  if (!maxIndex) {\n    maxIndex = getMaxIDSearchIndex();\n  }\n\n  if (idAddress.substring(0, 3) !== 'ID-') {\n    throw new Error('Not an identity address');\n  }\n\n  const wallet = await walletFromMnemonic(mnemonic);\n  for (let i = 0; i < maxIndex; i++) {\n    const identity = wallet.getIdentityAddressNode(i);\n    const addr = blockstack.BlockstackWallet.getAddressFromBIP32Node(identity);\n\n    if (network.coerceAddress(addr) === network.coerceAddress(idAddress.slice(3))) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/*\n * Get the Gaia application key from a 12-word phrase\n * @network (object) the blockstack network\n * @mmemonic (string) the 12-word phrase\n * @idAddress (string) the ID-address used to sign in\n * @appDomain (string) the application's Origin\n *\n * Returns an object with\n *    .keyInfo (object) the app key info with the current derivation path\n *      .privateKey (string) the app's hex private key\n *      .address (string) the address of the private key\n *    .legacyKeyInfo (object) the app key info with the legacy derivation path\n *      .privateKey (string) the app's hex private key\n *      .address (string) the address of the private key\n */\nexport async function getApplicationKeyInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  idAddress: string,\n  appDomain: string,\n  idIndex?: number\n): Promise<AppKeyInfoType> {\n  if (!idIndex) {\n    idIndex = -1;\n  }\n\n  if (idIndex < 0) {\n    idIndex = await findIdentityIndex(network, mnemonic, idAddress);\n    if (idIndex < 0) {\n      throw new Error('Identity address does not belong to this keychain');\n    }\n  }\n\n  const wallet = await walletFromMnemonic(mnemonic);\n  const identityOwnerAddressNode = wallet.getIdentityAddressNode(idIndex);\n  const appsNode = blockstack.BlockstackWallet.getAppsNode(identityOwnerAddressNode);\n\n  //const appPrivateKey = blockstack.BlockstackWallet.getAppPrivateKey(\n  //  appsNode.toBase58(), wallet.getIdentitySalt(), appDomain);\n  const legacyAppPrivateKey = blockstack.BlockstackWallet.getLegacyAppPrivateKey(\n    appsNode.toBase58(),\n    wallet.getIdentitySalt(),\n    appDomain\n  );\n\n  // TODO: figure out when we can start using the new derivation path\n  const res: AppKeyInfoType = {\n    keyInfo: {\n      privateKey: 'TODO', // appPrivateKey,\n      address: 'TODO', // getPrivateKeyAddress(network, `${appPrivateKey}01`)\n    },\n    legacyKeyInfo: {\n      privateKey: legacyAppPrivateKey,\n      address: getPrivateKeyAddress(network, `${legacyAppPrivateKey}01`),\n    },\n    ownerKeyIndex: idIndex,\n  };\n  return res;\n}\n\n/*\n * Extract the \"right\" app key\n */\nexport function extractAppKey(\n  network: CLINetworkAdapter,\n  appKeyInfo: {\n    keyInfo: { privateKey: string; address: string };\n    legacyKeyInfo: { privateKey: string; address: string };\n  },\n  appAddress?: string\n): string {\n  if (appAddress) {\n    if (\n      network.coerceMainnetAddress(appKeyInfo.keyInfo.address) ===\n      network.coerceMainnetAddress(appAddress)\n    ) {\n      return appKeyInfo.keyInfo.privateKey;\n    }\n    if (\n      network.coerceMainnetAddress(appKeyInfo.legacyKeyInfo.address) ===\n      network.coerceMainnetAddress(appAddress)\n    ) {\n      return appKeyInfo.legacyKeyInfo.privateKey;\n    }\n  }\n\n  const appPrivateKey =\n    appKeyInfo.keyInfo.privateKey === 'TODO' || !appKeyInfo.keyInfo.privateKey\n      ? appKeyInfo.legacyKeyInfo.privateKey\n      : appKeyInfo.keyInfo.privateKey;\n  return appPrivateKey;\n}\n","import blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nconst BN = require('bn.js');\nimport fetch from 'node-fetch';\n\nimport { CLI_CONFIG_TYPE } from './argparse';\n\nimport { BlockstackNetwork } from 'blockstack/lib/network';\n\nconst SATOSHIS_PER_BTC = 1e8;\n\nexport interface CLI_NETWORK_OPTS {\n  consensusHash: string | null;\n  feeRate: number | null;\n  namespaceBurnAddress: string | null;\n  priceToPay: string | null;\n  priceUnits: string | null;\n  receiveFeesPeriod: number | null;\n  gracePeriod: number | null;\n  altAPIUrl: string | null;\n  altTransactionBroadcasterUrl: string | null;\n  nodeAPIUrl: string | null;\n}\n\nexport interface PriceType {\n  units: 'BTC' | 'STACKS';\n  amount: import('bn.js');\n}\n\nexport type NameInfoType = {\n  address: string;\n  blockchain?: string;\n  did?: string;\n  expire_block?: number;\n  grace_period?: number;\n  last_txid?: string;\n  renewal_deadline?: number;\n  resolver?: string | null;\n  status?: string;\n  zonefile?: string | null;\n  zonefile_hash?: string | null;\n};\n\n/*\n * Adapter class that allows us to use data obtained\n * from the CLI.\n */\nexport class CLINetworkAdapter {\n  consensusHash: string | null;\n  feeRate: number | null;\n  namespaceBurnAddress: string | null;\n  priceToPay: string | null;\n  priceUnits: string | null;\n  gracePeriod: number | null;\n  receiveFeesPeriod: number | null;\n  nodeAPIUrl: string;\n  optAlwaysCoerceAddress: boolean;\n  legacyNetwork: BlockstackNetwork;\n\n  constructor(network: BlockstackNetwork, opts: CLI_NETWORK_OPTS) {\n    const optsDefault: CLI_NETWORK_OPTS = {\n      consensusHash: null,\n      feeRate: null,\n      namespaceBurnAddress: null,\n      priceToPay: null,\n      priceUnits: null,\n      receiveFeesPeriod: null,\n      gracePeriod: null,\n      altAPIUrl: opts.nodeAPIUrl,\n      altTransactionBroadcasterUrl: network.broadcastServiceUrl,\n      nodeAPIUrl: opts.nodeAPIUrl,\n    };\n\n    opts = Object.assign({}, optsDefault, opts);\n\n    this.legacyNetwork = new BlockstackNetwork(\n      opts.nodeAPIUrl!,\n      opts.altTransactionBroadcasterUrl!,\n      network.btc,\n      network.layer1\n    );\n    this.consensusHash = opts.consensusHash;\n    this.feeRate = opts.feeRate;\n    this.namespaceBurnAddress = opts.namespaceBurnAddress;\n    this.priceToPay = opts.priceToPay;\n    this.priceUnits = opts.priceUnits;\n    this.receiveFeesPeriod = opts.receiveFeesPeriod;\n    this.gracePeriod = opts.gracePeriod;\n    this.nodeAPIUrl = opts.nodeAPIUrl!;\n\n    this.optAlwaysCoerceAddress = false;\n  }\n\n  isMainnet(): boolean {\n    return this.legacyNetwork.layer1.pubKeyHash === bitcoin.networks.bitcoin.pubKeyHash;\n  }\n\n  isTestnet(): boolean {\n    return this.legacyNetwork.layer1.pubKeyHash === bitcoin.networks.testnet.pubKeyHash;\n  }\n\n  setCoerceMainnetAddress(value: boolean) {\n    this.optAlwaysCoerceAddress = value;\n  }\n\n  coerceMainnetAddress(address: string): string {\n    const addressInfo = bitcoin.address.fromBase58Check(address);\n    const addressHash = addressInfo.hash;\n    const addressVersion = addressInfo.version;\n    let newVersion = 0;\n\n    if (addressVersion === this.legacyNetwork.layer1.pubKeyHash) {\n      newVersion = 0;\n    } else if (addressVersion === this.legacyNetwork.layer1.scriptHash) {\n      newVersion = 5;\n    }\n    return bitcoin.address.toBase58Check(addressHash, newVersion);\n  }\n\n  getFeeRate(): Promise<number> {\n    if (this.feeRate) {\n      // override with CLI option\n      return Promise.resolve(this.feeRate);\n    }\n    if (this.isTestnet()) {\n      // in regtest mode\n      return Promise.resolve(Math.floor(0.00001 * SATOSHIS_PER_BTC));\n    }\n    return this.legacyNetwork.getFeeRate();\n  }\n\n  getConsensusHash(): Promise<string> {\n    // override with CLI option\n    if (this.consensusHash) {\n      return new Promise((resolve: any) => resolve(this.consensusHash));\n    }\n    return this.legacyNetwork.getConsensusHash().then((c: string) => c);\n  }\n\n  getGracePeriod(): Promise<number> {\n    if (this.gracePeriod) {\n      return new Promise((resolve: any) => resolve(this.gracePeriod));\n    }\n    return this.legacyNetwork.getGracePeriod().then((g: number) => g);\n  }\n\n  getNamePrice(name: string): Promise<PriceType> {\n    // override with CLI option\n    if (this.priceUnits && this.priceToPay) {\n      return new Promise((resolve: any) =>\n        resolve({\n          units: String(this.priceUnits),\n          amount: new BN(this.priceToPay),\n        } as PriceType)\n      );\n    }\n    // @ts-ignore\n    return this.legacyNetwork.getNamePrice(name).then((priceInfo: PriceType) => {\n      // use v2 scheme\n      if (!priceInfo.units) {\n        priceInfo = {\n          units: 'BTC',\n          amount: new BN(String(priceInfo)),\n        };\n      }\n      return priceInfo;\n    });\n  }\n\n  getNamespacePrice(namespaceID: string): Promise<PriceType> {\n    // override with CLI option\n    if (this.priceUnits && this.priceToPay) {\n      return new Promise((resolve: any) =>\n        resolve({\n          units: String(this.priceUnits),\n          amount: new BN(String(this.priceToPay)),\n        } as PriceType)\n      );\n    }\n    // @ts-ignore\n    return super.getNamespacePrice(namespaceID).then((priceInfo: PriceType) => {\n      // use v2 scheme\n      if (!priceInfo.units) {\n        priceInfo = {\n          units: 'BTC',\n          amount: new BN(String(priceInfo)),\n        } as PriceType;\n      }\n      return priceInfo;\n    });\n  }\n\n  getNamespaceBurnAddress(\n    namespace: string,\n    useCLI: boolean = true,\n    receiveFeesPeriod: number = -1\n  ): Promise<string> {\n    // override with CLI option\n    if (this.namespaceBurnAddress && useCLI) {\n      return new Promise((resolve: any) => resolve(this.namespaceBurnAddress));\n    }\n\n    return Promise.all([\n      fetch(`${this.legacyNetwork.blockstackAPIUrl}/v1/namespaces/${namespace}`),\n      this.legacyNetwork.getBlockHeight(),\n    ])\n      .then(([resp, blockHeight]: [any, number]) => {\n        if (resp.status === 404) {\n          throw new Error(`No such namespace '${namespace}'`);\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return Promise.all([resp.json(), blockHeight]);\n        }\n      })\n      .then(([namespaceInfo, blockHeight]: [any, number]) => {\n        let address = '1111111111111111111114oLvT2'; // default burn address\n        if (namespaceInfo.version === 2) {\n          // pay-to-namespace-creator if this namespace is less than $receiveFeesPeriod blocks old\n          if (receiveFeesPeriod < 0) {\n            receiveFeesPeriod = this.receiveFeesPeriod!;\n          }\n\n          if (namespaceInfo.reveal_block + receiveFeesPeriod > blockHeight) {\n            address = namespaceInfo.address;\n          }\n        }\n        return address;\n      })\n      .then((address: string) => this.legacyNetwork.coerceAddress(address));\n  }\n\n  getNameInfo(name: string): Promise<NameInfoType> {\n    // optionally coerce addresses\n    return this.legacyNetwork.getNameInfo(name).then((ni: any) => {\n      const nameInfo: NameInfoType = {\n        address: this.optAlwaysCoerceAddress ? this.coerceMainnetAddress(ni.address) : ni.address,\n        blockchain: ni.blockchain,\n        did: ni.did,\n        expire_block: ni.expire_block,\n        grace_period: ni.grace_period,\n        last_txid: ni.last_txid,\n        renewal_deadline: ni.renewal_deadline,\n        resolver: ni.resolver,\n        status: ni.status,\n        zonefile: ni.zonefile,\n        zonefile_hash: ni.zonefile_hash,\n      };\n      return nameInfo;\n    });\n  }\n\n  getBlockchainNameRecord(name: string): Promise<any> {\n    // TODO: send to blockstack.js\n    const url = `${this.legacyNetwork.blockstackAPIUrl}/v1/blockchains/bitcoin/names/${name}`;\n    return fetch(url)\n      .then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // coerce all addresses\n        const fixedAddresses: Record<string, any> = {};\n        for (const addrAttr of ['address', 'importer_address', 'recipient_address']) {\n          if (nameInfo.hasOwnProperty(addrAttr) && nameInfo[addrAttr]) {\n            fixedAddresses[addrAttr] = this.legacyNetwork.coerceAddress(nameInfo[addrAttr]);\n          }\n        }\n        return Object.assign(nameInfo, fixedAddresses);\n      });\n  }\n\n  getNameHistory(name: string, page: number): Promise<Record<string, any[]>> {\n    // TODO: send to blockstack.js\n    const url = `${this.legacyNetwork.blockstackAPIUrl}/v1/names/${name}/history?page=${page}`;\n    return fetch(url)\n      .then(resp => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        }\n        return resp.json();\n      })\n      .then(historyInfo => {\n        // coerce all addresses\n        const fixedHistory: Record<string, any[]> = {};\n        for (const historyBlock of Object.keys(historyInfo)) {\n          const fixedHistoryList: any[] = [];\n          for (const historyEntry of historyInfo[historyBlock]) {\n            const fixedAddresses: Record<string, string> = {};\n            let fixedHistoryEntry: any = {};\n            for (const addrAttr of ['address', 'importer_address', 'recipient_address']) {\n              if (historyEntry.hasOwnProperty(addrAttr) && historyEntry[addrAttr]) {\n                fixedAddresses[addrAttr] = this.legacyNetwork.coerceAddress(historyEntry[addrAttr]);\n              }\n            }\n            fixedHistoryEntry = Object.assign(historyEntry, fixedAddresses);\n            fixedHistoryList.push(fixedHistoryEntry);\n          }\n          fixedHistory[historyBlock] = fixedHistoryList;\n        }\n        return fixedHistory;\n      });\n  }\n\n  coerceAddress(address: string) {\n    return this.legacyNetwork.coerceAddress(address);\n  }\n\n  getAccountHistoryPage(address: string, page: number) {\n    return this.legacyNetwork.getAccountHistoryPage(address, page);\n  }\n\n  broadcastTransaction(tx: string) {\n    return this.legacyNetwork.broadcastTransaction(tx);\n  }\n\n  broadcastZoneFile(zonefile: string, txid: string) {\n    return this.legacyNetwork.broadcastZoneFile(zonefile, txid);\n  }\n\n  getNamesOwned(address: string) {\n    return this.legacyNetwork.getNamesOwned(address);\n  }\n}\n\n/*\n * Instantiate a network using settings from the config file.\n */\nexport function getNetwork(configData: CLI_CONFIG_TYPE, regTest: boolean): BlockstackNetwork {\n  if (regTest) {\n    const network = new blockstack.network.LocalRegtest(\n      configData.blockstackAPIUrl,\n      configData.broadcastServiceUrl,\n      new blockstack.network.BitcoindAPI(configData.utxoServiceUrl, {\n        username: configData.bitcoindUsername || 'blockstack',\n        password: configData.bitcoindPassword || 'blockstacksystem',\n      })\n    );\n\n    return network;\n  } else {\n    const network = new BlockstackNetwork(\n      configData.blockstackAPIUrl,\n      configData.broadcastServiceUrl,\n      new blockstack.network.BlockchainInfoApi(configData.utxoServiceUrl)\n    );\n\n    return network;\n  }\n}\n","import * as blockstack from 'blockstack';\nimport * as URL from 'url';\nimport * as crypto from 'crypto';\nimport * as jsontokens from 'jsontokens';\n\nconst ZoneFile = require('zone-file');\n\nimport {\n  canonicalPrivateKey,\n  getPrivateKeyAddress,\n  checkUrl,\n  SafetyError,\n  getPublicKeyFromPrivateKey,\n} from './utils';\n\nimport { CLINetworkAdapter, NameInfoType } from './network';\n\nimport { UserData } from '@stacks/auth';\n\nimport { GaiaHubConfig, connectToGaiaHub } from '@stacks/storage';\n\n/*\n * Set up a session for Gaia.\n * Generate an authentication response like what the browser would do,\n * and store the relevant data to our emulated localStorage.\n */\nfunction makeFakeAuthResponseToken(\n  appPrivateKey: string | null,\n  hubURL: string | null,\n  associationToken?: string\n) {\n  const ownerPrivateKey = '24004db06ef6d26cdd2b0fa30b332a1b10fa0ba2b07e63505ffc2a9ed7df22b4';\n  const transitPrivateKey = 'f33fb466154023aba2003c17158985aa6603db68db0f1afc0fcf1d641ea6c2cb';\n  const transitPublicKey =\n    '0496345da77fb5e06757b9c4fd656bf830a3b293f245a6cc2f11f8334ebb690f1' +\n    '9582124f4b07172eb61187afba4514828f866a8a223e0d5c539b2e38a59ab8bb3';\n\n  // eslint-disable-next-line\n  window.localStorage.setItem('blockstack-transit-private-key', transitPrivateKey);\n\n  const authResponse = blockstack.makeAuthResponse(\n    ownerPrivateKey,\n    { type: '@Person', accounts: [] },\n    // @ts-ignore\n    null,\n    {},\n    null,\n    appPrivateKey,\n    undefined,\n    transitPublicKey,\n    hubURL,\n    blockstack.config.network.blockstackAPIUrl,\n    associationToken\n  );\n\n  return authResponse;\n}\n\n/*\n * Make an association token for the given address.\n * TODO belongs in a \"gaia.js\" library\n */\nexport function makeAssociationToken(appPrivateKey: string, identityKey: string): string {\n  const appPublicKey = getPublicKeyFromPrivateKey(`${canonicalPrivateKey(appPrivateKey)}01`);\n  const FOUR_MONTH_SECONDS = 60 * 60 * 24 * 31 * 4;\n  const salt = crypto.randomBytes(16).toString('hex');\n  const identityPublicKey = getPublicKeyFromPrivateKey(identityKey);\n  const associationTokenClaim = {\n    childToAssociate: appPublicKey,\n    iss: identityPublicKey,\n    exp: FOUR_MONTH_SECONDS + new Date().getTime() / 1000,\n    salt,\n  };\n  const associationToken = new jsontokens.TokenSigner('ES256K', identityKey).sign(\n    associationTokenClaim\n  );\n  return associationToken;\n}\n\n/*\n * Authenticate to Gaia.  Used for reading, writing, and listing files.\n * Process a (fake) session token and set up a Gaia hub connection.\n * Returns a Promise that resolves to the (fake) userData\n */\nexport function gaiaAuth(\n  network: CLINetworkAdapter,\n  appPrivateKey: string | null,\n  hubUrl: string | null,\n  ownerPrivateKey?: string\n): Promise<UserData> {\n  // Gaia speaks mainnet only!\n  if (!network.isMainnet()) {\n    throw new Error('Gaia only works with mainnet networks.');\n  }\n\n  let associationToken;\n  if (ownerPrivateKey && appPrivateKey) {\n    associationToken = makeAssociationToken(appPrivateKey, ownerPrivateKey);\n  }\n\n  const authSessionToken = makeFakeAuthResponseToken(appPrivateKey, hubUrl, associationToken);\n  const nameLookupUrl = `${network.legacyNetwork.blockstackAPIUrl}/v1/names/`;\n  const transitPrivateKey = 'f33fb466154023aba2003c17158985aa6603db68db0f1afc0fcf1d641ea6c2cb'; // same as above\n  //@ts-ignore\n  return blockstack.handlePendingSignIn(nameLookupUrl, authSessionToken, transitPrivateKey);\n}\n\n/*\n * Connect to Gaia hub and generate a hub config.\n * Used for reading and writing profiles.\n * Make sure we use a mainnet address always, even in test mode.\n * Returns a Promise that resolves to a GaiaHubConfig\n */\nexport function gaiaConnect(\n  network: CLINetworkAdapter,\n  gaiaHubUrl: string,\n  privateKey: string,\n  ownerPrivateKey?: string\n) {\n  const addressMainnet = network.coerceMainnetAddress(\n    getPrivateKeyAddress(network, `${canonicalPrivateKey(privateKey)}01`)\n  );\n  const addressMainnetCanonical = network.coerceMainnetAddress(\n    getPrivateKeyAddress(network, canonicalPrivateKey(privateKey))\n  );\n\n  let associationToken;\n  if (ownerPrivateKey) {\n    associationToken = makeAssociationToken(privateKey, ownerPrivateKey);\n  }\n\n  return connectToGaiaHub(gaiaHubUrl, canonicalPrivateKey(privateKey), associationToken).then(\n    hubConfig => {\n      // ensure that hubConfig always has a mainnet address, even if we're in testnet\n      if (network.coerceMainnetAddress(hubConfig.address) === addressMainnet) {\n        hubConfig.address = addressMainnet;\n      } else if (network.coerceMainnetAddress(hubConfig.address) === addressMainnetCanonical) {\n        hubConfig.address = addressMainnetCanonical;\n      } else {\n        throw new Error(\n          'Invalid private key: ' +\n            `${network.coerceMainnetAddress(hubConfig.address)} is neither ` +\n            `${addressMainnet} or ${addressMainnetCanonical}`\n        );\n      }\n      return hubConfig;\n    }\n  );\n}\n\n/*\n * Find the profile.json path for a name\n * @network (object) the network to use\n * @blockstackID (string) the blockstack ID to query\n *\n * Returns a Promise that resolves to the filename to use for the profile\n * Throws an exception if the profile URL could not be determined\n */\nfunction gaiaFindProfileName(\n  network: CLINetworkAdapter,\n  hubConfig: GaiaHubConfig,\n  blockstackID?: string\n): Promise<string> {\n  if (!blockstackID || blockstackID === null || blockstackID === undefined) {\n    return Promise.resolve().then(() => 'profile.json');\n  } else {\n    return network.getNameInfo(blockstackID).then((nameInfo: NameInfoType) => {\n      let profileUrl;\n      try {\n        const zonefileJSON = ZoneFile.parseZoneFile(nameInfo.zonefile);\n        if (zonefileJSON.uri && zonefileJSON.hasOwnProperty('$origin')) {\n          profileUrl = blockstack.getTokenFileUrl(zonefileJSON);\n        }\n      } catch (e) {\n        throw new Error(\n          `Could not determine profile URL for ${String(blockstackID)}: could not parse zone file`\n        );\n      }\n\n      if (profileUrl === null || profileUrl === undefined) {\n        throw new Error(\n          `Could not determine profile URL for ${String(blockstackID)}: no URL in zone file`\n        );\n      }\n\n      // profile URL path must match Gaia hub's URL prefix and address\n      // (the host can be different)\n      const gaiaReadPrefix = `${hubConfig.url_prefix}${hubConfig.address}`;\n      const gaiaReadUrlPath = String(URL.parse(gaiaReadPrefix).path);\n      const profileUrlPath = String(URL.parse(profileUrl).path);\n\n      if (!profileUrlPath.startsWith(gaiaReadUrlPath)) {\n        throw new Error(\n          `Could not determine profile URL for ${String(blockstackID)}: wrong Gaia hub` +\n            ` (${gaiaReadPrefix} does not correspond to ${profileUrl})`\n        );\n      }\n\n      const profilePath = profileUrlPath.substring(gaiaReadUrlPath.length + 1);\n      return profilePath;\n    });\n  }\n}\n\n/*\n * Upload profile data to a Gaia hub.\n *\n * Legacy compat:\n * If a blockstack ID is given, then the zone file will be queried and the profile URL\n * inspected to make sure that we handle the special (legacy) case where a profile.json\n * file got stored to $GAIA_URL/$ADDRESS/$INDEX/profile.json (where $INDEX is a number).\n * In such cases, the profile will be stored to $INDEX/profile.json, instead of just\n * profile.json.\n *\n * @network (object) the network to use\n * @gaiaHubUrl (string) the base scheme://host:port URL to the Gaia hub\n * @gaiaData (string) the data to upload\n * @privateKey (string) the private key to use to sign the challenge\n * @blockstackID (string) optional; the blockstack ID for which this profile will be stored.\n */\nexport function gaiaUploadProfile(\n  network: CLINetworkAdapter,\n  gaiaHubURL: string,\n  gaiaData: string,\n  privateKey: string,\n  blockstackID?: string\n) {\n  let hubConfig: GaiaHubConfig;\n  return gaiaConnect(network, gaiaHubURL, privateKey)\n    .then((hubconf: GaiaHubConfig) => {\n      // make sure we use the *right* gaia path.\n      // if the blockstackID is given, then we should inspect the zone file to\n      // determine if the Gaia profile URL contains an index.  If it does, then\n      // we need to preserve it!\n      hubConfig = hubconf;\n      return gaiaFindProfileName(network, hubConfig, blockstackID);\n    })\n    .then((profilePath: string) => {\n      return blockstack.uploadToGaiaHub(profilePath, gaiaData, hubConfig);\n    });\n}\n\n/*\n * Upload profile data to all Gaia hubs, given a zone file.\n * @network (object) the network to use\n * @gaiaUrls (array) list of Gaia URLs\n * @gaiaData (string) the data to store\n * @privateKey (string) the hex-encoded private key\n * @return a promise with {'dataUrls': [urls to the data]}, or {'error': ...}\n */\nexport function gaiaUploadProfileAll(\n  network: CLINetworkAdapter,\n  gaiaUrls: string[],\n  gaiaData: string,\n  privateKey: string,\n  blockstackID?: string\n): Promise<{ dataUrls?: string[] | null; error?: string | null }> {\n  const sanitizedGaiaUrls = gaiaUrls\n    .map(gaiaUrl => {\n      const urlInfo = URL.parse(gaiaUrl);\n      if (!urlInfo.protocol) {\n        return '';\n      }\n      if (!urlInfo.host) {\n        return '';\n      }\n      // keep flow happy\n      return `${String(urlInfo.protocol)}//${String(urlInfo.host)}`;\n    })\n    .filter(gaiaUrl => gaiaUrl.length > 0);\n\n  const uploadPromises = sanitizedGaiaUrls.map(gaiaUrl =>\n    gaiaUploadProfile(network, gaiaUrl, gaiaData, privateKey, blockstackID)\n  );\n\n  return Promise.all(uploadPromises)\n    .then(publicUrls => {\n      return { error: null, dataUrls: publicUrls! };\n    })\n    .catch(e => {\n      return { error: `Failed to upload: ${e.message}`, dataUrls: null };\n    });\n}\n\n/*\n * Make a zone file from a Gaia hub---reach out to the Gaia hub, get its read URL prefix,\n * and generate a zone file with the profile mapped to the Gaia hub.\n *\n * @network (object) the network connection\n * @name (string) the name that owns the zone file\n * @gaiaHubUrl (string) the URL to the gaia hub write endpoint\n * @ownerKey (string) the owner private key\n *\n * Returns a promise that resolves to the zone file with the profile URL\n */\nexport function makeZoneFileFromGaiaUrl(\n  network: CLINetworkAdapter,\n  name: string,\n  gaiaHubUrl: string,\n  ownerKey: string\n) {\n  const address = getPrivateKeyAddress(network, ownerKey);\n  const mainnetAddress = network.coerceMainnetAddress(address);\n\n  return gaiaConnect(network, gaiaHubUrl, ownerKey).then(hubConfig => {\n    if (!hubConfig.url_prefix) {\n      throw new Error('Invalid hub config: no read_url_prefix defined');\n    }\n    const gaiaReadUrl = hubConfig.url_prefix.replace(/\\/+$/, '');\n    const profileUrl = `${gaiaReadUrl}/${mainnetAddress}/profile.json`;\n    try {\n      checkUrl(profileUrl);\n    } catch (e) {\n      throw new SafetyError({\n        status: false,\n        error: e.message,\n        hints: [\n          'Make sure the Gaia hub read URL scheme is present and well-formed.',\n          `Check the \"read_url_prefix\" field of ${gaiaHubUrl}/hub_info`,\n        ],\n      });\n    }\n    return blockstack.makeProfileZoneFile(name, profileUrl);\n  });\n}\n\n/*\n * Given a Gaia bucket URL, extract its address\n */\nexport function getGaiaAddressFromURL(appUrl: string): string {\n  const matches = appUrl.match(/([13][a-km-zA-HJ-NP-Z0-9]{26,35})/);\n  if (!matches) {\n    throw new Error('Failed to parse gaia address');\n  }\n  return matches[matches.length - 1];\n}\n\n/*\n * Given a profile and an app origin, find its app address\n * Returns the address on success\n * Throws on error or not found\n */\nexport function getGaiaAddressFromProfile(\n  network: CLINetworkAdapter,\n  profile: any,\n  appOrigin: string\n): string {\n  if (!profile) {\n    throw new Error('No profile');\n  }\n  if (!profile.apps) {\n    throw new Error('No profile apps');\n  }\n  if (!profile.apps[appOrigin]) {\n    throw new Error(`No app entry for ${appOrigin}`);\n  }\n\n  // do we already have an address set for this app?\n  const appUrl = profile.apps[appOrigin];\n  let existingAppAddress;\n  // what's the address?\n  try {\n    existingAppAddress = network.coerceMainnetAddress(getGaiaAddressFromURL(appUrl));\n  } catch (e) {\n    throw new Error(`Failed to parse app URL ${appUrl}`);\n  }\n\n  return existingAppAddress;\n}\n","import * as blockstack from 'blockstack';\nimport * as express from 'express';\nimport * as crypto from 'crypto';\nimport * as jsontokens from 'jsontokens';\nimport * as logger from 'winston';\n\nimport {\n  gaiaConnect,\n  gaiaUploadProfileAll,\n  makeAssociationToken,\n  getGaiaAddressFromProfile,\n} from './data';\n\nimport { getApplicationKeyInfo, getOwnerKeyInfo, extractAppKey } from './keys';\n\nimport { nameLookup, makeProfileJWT } from './utils';\n\nimport { CLINetworkAdapter } from './network';\n\nimport { GaiaHubConfig } from '@stacks/storage';\n\nexport const SIGNIN_CSS = `\nh1 { \n  font-family: monospace; \n  font-size: 24px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 700; \n  line-height: 26.4px; \n} \nh3 { \n  font-family: monospace; \n  font-size: 14px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 700; \n  line-height: 15.4px; \n}\np { \n  font-family: monospace; \n  font-size: 14px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 400; \n  line-height: 20px; \n}\nb {\n  background-color: #e8e8e8;\n}\npre { \n  font-family: monospace; \n  font-size: 13px; \n  font-style: normal; \n  font-variant: normal; \n  font-weight: 400; \n  line-height: 18.5714px;\n}`;\n\nexport const SIGNIN_HEADER = `<html><head><style>${SIGNIN_CSS}</style></head></body><h3>Blockstack CLI Sign-in</h3><br>`;\nexport const SIGNIN_DESC = '<p>Sign-in request for <b>\"{appName}\"</b></p>';\nexport const SIGNIN_SCOPES = '<p>Requested scopes: <b>\"{appScopes}\"</b></p>';\nexport const SIGNIN_FMT_NAME = '<p><a href=\"{authRedirect}\">{blockstackID}</a> ({idAddress})</p>';\nexport const SIGNIN_FMT_ID = '<p><a href=\"{authRedirect}\">{idAddress}</a> (anonymous)</p>';\nexport const SIGNIN_FOOTER = '</body></html>';\n\nexport interface NamedIdentityType {\n  name: string;\n  idAddress: string;\n  privateKey: string;\n  index: number;\n  profile: Object;\n  profileUrl: string;\n}\n\ninterface AuthRequestType {\n  jti: string;\n  iat: number;\n  exp: number;\n  iss: null | string;\n  public_keys: string[];\n  domain_name: string;\n  manifest_uri: string;\n  redirect_uri: string;\n  version: string;\n  do_not_include_profile: boolean;\n  supports_hub_url: boolean;\n  scopes: string[];\n}\n\n// new ecdsa private key each time\nconst authTransitNonce = crypto.randomBytes(32).toString('hex');\n\n/*\n * Get the app private key\n */\nasync function getAppPrivateKey(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  id: NamedIdentityType,\n  appOrigin: string\n): Promise<string> {\n  const appKeyInfo = await getApplicationKeyInfo(\n    network,\n    mnemonic,\n    id.idAddress,\n    appOrigin,\n    id.index\n  );\n  let appPrivateKey;\n  try {\n    const existingAppAddress = getGaiaAddressFromProfile(network, id.profile, appOrigin);\n    appPrivateKey = extractAppKey(network, appKeyInfo, existingAppAddress);\n  } catch (e) {\n    appPrivateKey = extractAppKey(network, appKeyInfo);\n  }\n\n  return appPrivateKey;\n}\n\n/*\n * Make a sign-in link\n */\nasync function makeSignInLink(\n  network: CLINetworkAdapter,\n  authPort: number,\n  mnemonic: string,\n  authRequest: AuthRequestType,\n  hubUrl: string,\n  id: NamedIdentityType\n): Promise<string> {\n  const appOrigin = authRequest.domain_name;\n  const appPrivateKey = await getAppPrivateKey(network, mnemonic, id, appOrigin);\n\n  const associationToken = makeAssociationToken(appPrivateKey, id.privateKey);\n  const authResponseTmp = blockstack.makeAuthResponse(\n    id.privateKey,\n    {},\n    id.name,\n    { email: undefined, profileUrl: id.profileUrl },\n    undefined,\n    appPrivateKey,\n    undefined,\n    authRequest.public_keys[0],\n    hubUrl,\n    blockstack.config.network.blockstackAPIUrl,\n    associationToken\n  );\n\n  // pass along some helpful data from the authRequest\n  const authResponsePayload = jsontokens.decodeToken(authResponseTmp).payload;\n  const id_public = Object.assign({}, id);\n  id_public.profile = {};\n  // @ts-ignore\n  id_public.privateKey = undefined;\n\n  (authResponsePayload as any).metadata = {\n    id: id_public,\n    profileUrl: id.profileUrl,\n    appOrigin: appOrigin,\n    redirect_uri: authRequest.redirect_uri,\n    scopes: authRequest.scopes,\n    salt: crypto.randomBytes(16).toString('hex'),\n    nonce: authTransitNonce,\n    // fill in more CLI-specific fields here\n  };\n\n  const tokenSigner = new jsontokens.TokenSigner('ES256k', id.privateKey);\n  const authResponse = tokenSigner.sign(authResponsePayload);\n\n  return blockstack.updateQueryStringParameter(\n    `http://localhost:${authPort}/signin`,\n    'authResponse',\n    authResponse\n  );\n}\n\n/*\n * Make the sign-in page\n */\nasync function makeAuthPage(\n  network: CLINetworkAdapter,\n  authPort: number,\n  mnemonic: string,\n  hubUrl: string,\n  manifest: any,\n  authRequest: AuthRequestType,\n  ids: Array<NamedIdentityType>\n): Promise<string> {\n  let signinBody = SIGNIN_HEADER;\n  const signinDescription = SIGNIN_DESC.replace(/{appName}/, manifest.name || '(Unknown app)');\n\n  const signinScopes = SIGNIN_SCOPES.replace(\n    /{appScopes}/,\n    authRequest.scopes.length > 0 ? authRequest.scopes.join(', ') : '(none)'\n  );\n\n  signinBody = `${signinBody}${signinDescription}${signinScopes}`;\n\n  for (let i = 0; i < ids.length; i++) {\n    let signinEntry;\n    if (ids[i].name) {\n      signinEntry = SIGNIN_FMT_NAME.replace(\n        /{authRedirect}/,\n        await makeSignInLink(network, authPort, mnemonic, authRequest, hubUrl, ids[i])\n      )\n        .replace(/{blockstackID}/, ids[i].name)\n        .replace(/{idAddress}/, ids[i].idAddress);\n    } else {\n      signinEntry = SIGNIN_FMT_ID.replace(\n        /{authRedirect}/,\n        await makeSignInLink(network, authPort, mnemonic, authRequest, hubUrl, ids[i])\n      ).replace(/{idAddress}/, ids[i].idAddress);\n    }\n\n    signinBody = `${signinBody}${signinEntry}`;\n  }\n\n  signinBody = `${signinBody}${SIGNIN_FOOTER}`;\n  return signinBody;\n}\n\n/*\n * Find all identity addresses that have names attached to them.\n * Fills in identities.\n */\nasync function loadNamedIdentitiesLoop(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number,\n  identities: NamedIdentityType[]\n): Promise<NamedIdentityType[]> {\n  // 65536 is a ridiculously huge number\n  if (index > 65536) {\n    throw new Error('Too many names');\n  }\n\n  const keyInfo = await getOwnerKeyInfo(network, mnemonic, index);\n  const nameList = await network.getNamesOwned(keyInfo.idAddress.slice(3));\n  if (nameList.length === 0) {\n    // out of names\n    return identities;\n  }\n  for (let i = 0; i < nameList.length; i++) {\n    const identity: NamedIdentityType = {\n      name: nameList[i],\n      idAddress: keyInfo.idAddress,\n      privateKey: keyInfo.privateKey,\n      index: index,\n      profile: {},\n      profileUrl: '',\n    };\n    identities.push(identity);\n  }\n  return await loadNamedIdentitiesLoop(network, mnemonic, index + 1, identities);\n}\n\n/*\n * Load all named identities for a mnemonic.\n * Keep loading until we find an ID-address that does not have a name.\n */\nexport function loadNamedIdentities(\n  network: CLINetworkAdapter,\n  mnemonic: string\n): Promise<Array<NamedIdentityType>> {\n  return loadNamedIdentitiesLoop(network, mnemonic, 0, []);\n}\n\n/*\n * Generate identity info for an unnamed ID\n */\nasync function loadUnnamedIdentity(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  index: number\n): Promise<NamedIdentityType> {\n  const keyInfo = await getOwnerKeyInfo(network, mnemonic, index);\n  const idInfo = {\n    name: '',\n    idAddress: keyInfo.idAddress,\n    privateKey: keyInfo.privateKey,\n    index: index,\n    profile: {},\n    profileUrl: '',\n  };\n  return idInfo;\n}\n\n/*\n * Send a JSON HTTP response\n */\nfunction sendJSON(res: express.Response, data: Object, statusCode: number) {\n  logger.info(`Respond ${statusCode}: ${JSON.stringify(data)}`);\n  res.writeHead(statusCode, { 'Content-Type': 'application/json' });\n  res.write(JSON.stringify(data));\n  res.end();\n}\n\n/*\n * Get all of a 12-word phrase's identities, profiles, and Gaia connections.\n * Returns a Promise to an Array of NamedIdentityType instances.\n *\n * NOTE: should be the *only* promise chain running!\n */\nasync function getIdentityInfo(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  _appGaiaHub: string,\n  _profileGaiaHub: string\n): Promise<NamedIdentityType[]> {\n  network.setCoerceMainnetAddress(true); // for lookups in regtest\n  let identities: NamedIdentityType[];\n\n  try {\n    // load up all of our identity addresses and profile URLs\n    identities = await loadNamedIdentities(network, mnemonic);\n    const nameInfoPromises = identities.map(id => {\n      const lookup: Promise<{\n        profile: any;\n        profileUrl?: string;\n        zonefile?: string;\n      } | null> = nameLookup(network, id.name, true).catch(() => null);\n      return lookup;\n    });\n\n    let nameDatas = await Promise.all(nameInfoPromises);\n\n    network.setCoerceMainnetAddress(false);\n    nameDatas = nameDatas.filter(p => p !== null && p !== undefined);\n\n    for (let i = 0; i < nameDatas.length; i++) {\n      if (nameDatas[i]!.hasOwnProperty('error') && (nameDatas[i] as any).error) {\n        // no data for this name\n        identities[i].profileUrl = '';\n      } else {\n        identities[i].profileUrl = nameDatas[i]!.profileUrl!;\n        identities[i].profile = nameDatas[i]!.profile;\n      }\n    }\n\n    const nextIndex = identities.length + 1;\n\n    // ignore identities with no data\n    identities = identities.filter(id => !!id.profileUrl);\n\n    // add in the next non-named identity\n    identities.push(await loadUnnamedIdentity(network, mnemonic, nextIndex));\n  } catch (e) {\n    network.setCoerceMainnetAddress(false);\n    throw e;\n  }\n\n  return identities;\n}\n\n/*\n * Handle GET /auth?authRequest=...\n * If the authRequest is verifiable and well-formed, and if we can fetch the application\n * manifest, then we can render an auth page to the user.\n * Serves back the sign-in page on success.\n * Serves back an error page on error.\n * Returns a Promise that resolves to nothing.\n *\n * NOTE: should be the *only* promise chain running!\n */\nexport async function handleAuth(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  gaiaHubUrl: string,\n  profileGaiaHub: string,\n  port: number,\n  req: express.Request,\n  res: express.Response\n): Promise<any> {\n  const authToken = req.query.authRequest as string;\n  if (!authToken) {\n    return Promise.resolve().then(() => {\n      sendJSON(res, { error: 'No authRequest given' }, 400);\n    });\n  }\n\n  let errorMsg = '';\n  let identities: NamedIdentityType[] = [];\n\n  try {\n    identities = await getIdentityInfo(network, mnemonic, gaiaHubUrl, profileGaiaHub);\n\n    errorMsg = 'Unable to verify authentication token';\n    const valid = await blockstack.verifyAuthRequest(authToken);\n\n    if (!valid) {\n      errorMsg = 'Invalid authentication token: could not verify';\n      throw new Error(errorMsg);\n    }\n    errorMsg = 'Unable to fetch app manifest';\n    const appManifest = await blockstack.fetchAppManifest(authToken);\n\n    errorMsg = 'Unable to decode token';\n    const decodedAuthToken = jsontokens.decodeToken(authToken);\n    const decodedAuthPayload = decodedAuthToken.payload;\n    if (!decodedAuthPayload) {\n      errorMsg = 'Invalid authentication token: no payload';\n      throw new Error(errorMsg);\n    }\n\n    errorMsg = 'Unable to make auth page';\n\n    // make sign-in page\n    const authPage = await makeAuthPage(\n      network,\n      port,\n      mnemonic,\n      gaiaHubUrl,\n      appManifest,\n      decodedAuthPayload as AuthRequestType,\n      identities\n    );\n\n    res.writeHead(200, { 'Content-Type': 'text/html', 'Content-Length': authPage.length });\n    res.write(authPage);\n    res.end();\n  } catch (e) {\n    if (!errorMsg) {\n      errorMsg = e.message;\n    }\n\n    console.log(e.stack);\n    logger.error(errorMsg);\n    sendJSON(res, { error: `Unable to authenticate app request: ${errorMsg}` }, 400);\n  }\n}\n\n/*\n * Update a named identity's profile with new app data, if necessary.\n * Indicates whether or not the profile was changed.\n */\nfunction updateProfileApps(\n  network: CLINetworkAdapter,\n  id: NamedIdentityType,\n  appOrigin: string,\n  appGaiaConfig: GaiaHubConfig,\n  profile?: any\n): Promise<{ profile: any; changed: boolean }> {\n  let needProfileUpdate = false;\n\n  // go get the profile from the profile URL in the id\n  const profilePromise = Promise.resolve().then(() => {\n    if (profile === null || profile === undefined) {\n      return nameLookup(network, id.name).catch(_e => null);\n    } else {\n      return { profile: profile };\n    }\n  });\n\n  return profilePromise.then(profileData => {\n    if (profileData) {\n      profile = profileData.profile;\n    }\n\n    if (!profile) {\n      // instantiate\n      logger.debug(`Profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Instantiating profile for ${id.name}`);\n      needProfileUpdate = true;\n      profile = {\n        type: '@Person',\n        account: [],\n        apps: {},\n      };\n    }\n\n    // do we need to update the Gaia hub read URL in the profile?\n    if (profile.apps === null || profile.apps === undefined) {\n      needProfileUpdate = true;\n\n      logger.debug(`Adding multi-reader Gaia links to profile for ${id.name}`);\n      profile.apps = {};\n    }\n\n    const gaiaPrefix = `${appGaiaConfig.url_prefix}${appGaiaConfig.address}/`;\n\n    if (!profile.apps.hasOwnProperty(appOrigin) || !profile.apps[appOrigin]) {\n      needProfileUpdate = true;\n      logger.debug(\n        `Setting Gaia read URL ${gaiaPrefix} for ${appOrigin} ` + `in profile for ${id.name}`\n      );\n\n      profile.apps[appOrigin] = gaiaPrefix;\n    } else if (!profile.apps[appOrigin].startsWith(gaiaPrefix)) {\n      needProfileUpdate = true;\n      logger.debug(\n        `Overriding Gaia read URL for ${appOrigin} from ${profile.apps[appOrigin]} ` +\n          `to ${gaiaPrefix} in profile for ${id.name}`\n      );\n\n      profile.apps[appOrigin] = gaiaPrefix;\n    }\n\n    return { profile, changed: needProfileUpdate };\n  });\n}\n\n/*\n * Updates a named identitie's profile's API settings, if necessary.\n * Indicates whether or not the profile data changed.\n */\nfunction updateProfileAPISettings(\n  network: CLINetworkAdapter,\n  id: NamedIdentityType,\n  appGaiaConfig: GaiaHubConfig,\n  profile?: any\n): Promise<{ profile: any; changed: boolean }> {\n  let needProfileUpdate = false;\n\n  // go get the profile from the profile URL in the id\n  const profilePromise = Promise.resolve().then(() => {\n    if (profile === null || profile === undefined) {\n      return nameLookup(network, id.name).catch(_e => null);\n    } else {\n      return { profile: profile };\n    }\n  });\n\n  return profilePromise.then(profileData => {\n    if (profileData) {\n      profile = profileData.profile;\n    }\n\n    if (!profile) {\n      // instantiate\n      logger.debug(`Profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Instantiating profile for ${id.name}`);\n      needProfileUpdate = true;\n      profile = {\n        type: '@Person',\n        account: [],\n        api: {},\n      };\n    }\n\n    // do we need to update the API settings in the profile?\n    if (profile.api === null || profile.api === undefined) {\n      needProfileUpdate = true;\n\n      logger.debug(`Adding API settings to profile for ${id.name}`);\n      profile.api = {\n        gaiaHubConfig: {\n          url_prefix: appGaiaConfig.url_prefix,\n        },\n        gaiaHubUrl: appGaiaConfig.server,\n      };\n    }\n\n    if (\n      !profile.hasOwnProperty('api') ||\n      !profile.api.hasOwnProperty('gaiaHubConfig') ||\n      !profile.api.gaiaHubConfig.hasOwnProperty('url_prefix') ||\n      !profile.api.gaiaHubConfig.url_prefix ||\n      !profile.api.hasOwnProperty('gaiaHubUrl') ||\n      !profile.api.gaiaHubUrl\n    ) {\n      logger.debug(`Existing profile for ${id.name} is ${JSON.stringify(profile)}`);\n      logger.debug(`Updating API settings to profile for ${id.name}`);\n      profile.api = {\n        gaiaHubConfig: {\n          url_prefix: appGaiaConfig.url_prefix,\n        },\n        gaiaHubUrl: appGaiaConfig.server,\n      };\n    }\n\n    return { profile, changed: needProfileUpdate };\n  });\n}\n\n/*\n * Handle GET /signin?encAuthResponse=...\n * Takes an encrypted authResponse from the page generated on GET /auth?authRequest=....,\n * verifies it, updates the name's profile's app's entry with the latest Gaia\n * hub information (if necessary), and redirects the user back to the application.\n *\n * If adminKey is given, then the new app private key will be automatically added\n * as an authorized writer to the Gaia hub.\n *\n * Redirects the user on success.\n * Sends the user an error page on failure.\n * Returns a Promise that resolves to nothing.\n */\nexport async function handleSignIn(\n  network: CLINetworkAdapter,\n  mnemonic: string,\n  appGaiaHub: string,\n  profileGaiaHub: string,\n  req: express.Request,\n  res: express.Response\n): Promise<any> {\n  const authResponseQP = req.query.authResponse as string;\n  if (!authResponseQP) {\n    return Promise.resolve().then(() => {\n      sendJSON(res, { error: 'No authResponse given' }, 400);\n    });\n  }\n  const nameLookupUrl = `${network.legacyNetwork.blockstackAPIUrl}/v1/names/`;\n\n  let errorMsg = '';\n  let errorStatusCode = 400;\n  let authResponsePayload: any;\n\n  let id: NamedIdentityType;\n  let profileUrl: string;\n  let appOrigin: string;\n  let redirectUri: string;\n  let scopes: string[];\n  let authResponse: string;\n  let hubConfig: GaiaHubConfig;\n  let needProfileAPIUpdate = false;\n  let profileAPIUpdate: boolean;\n\n  try {\n    const valid = await blockstack.verifyAuthResponse(authResponseQP, nameLookupUrl);\n    if (!valid) {\n      errorMsg = `Unable to verify authResponse token ${authResponseQP}`;\n      throw new Error(errorMsg);\n    }\n\n    const authResponseToken = jsontokens.decodeToken(authResponseQP);\n    authResponsePayload = authResponseToken.payload;\n\n    id = authResponsePayload.metadata.id;\n    profileUrl = authResponsePayload.metadata.profileUrl;\n    appOrigin = authResponsePayload.metadata.appOrigin;\n    redirectUri = authResponsePayload.metadata.redirect_uri;\n    scopes = authResponsePayload.metadata.scopes;\n    const nonce = authResponsePayload.metadata.nonce;\n\n    if (nonce != authTransitNonce) {\n      throw new Error('Invalid auth response: not generated by this authenticator');\n    }\n\n    // restore\n    id.privateKey = (await getOwnerKeyInfo(network, mnemonic, id.index)).privateKey;\n\n    const appPrivateKey = await getAppPrivateKey(network, mnemonic, id, appOrigin);\n\n    // remove sensitive (CLI-specific) information\n    authResponsePayload.metadata = {\n      profileUrl: profileUrl,\n    };\n\n    authResponse = new jsontokens.TokenSigner('ES256K', id.privateKey).sign(authResponsePayload);\n\n    logger.debug(`App ${appOrigin} requests scopes ${JSON.stringify(scopes)}`);\n\n    // connect to the app gaia hub\n    const appHubConfig = await gaiaConnect(network, appGaiaHub, appPrivateKey);\n\n    hubConfig = appHubConfig;\n    let newProfileData = await updateProfileAPISettings(network, id, hubConfig);\n\n    needProfileAPIUpdate = newProfileData.changed;\n    profileAPIUpdate = newProfileData.profile;\n    newProfileData = await updateProfileApps(network, id, appOrigin, hubConfig, profileAPIUpdate);\n\n    const profile = newProfileData.profile;\n    const needProfileSigninUpdate = newProfileData.changed && scopes.includes('store_write');\n\n    logger.debug(`Resulting profile for ${id.name} is ${JSON.stringify(profile)}`);\n\n    let gaiaUrls: any;\n\n    // sign and replicate new profile if we need to.\n    // otherwise do nothing\n    if (needProfileSigninUpdate) {\n      logger.debug(`Upload new profile with new sign-in data to ${profileGaiaHub}`);\n      const profileJWT = makeProfileJWT(profile, id.privateKey);\n      gaiaUrls = await gaiaUploadProfileAll(\n        network,\n        [profileGaiaHub],\n        profileJWT,\n        id.privateKey,\n        id.name\n      );\n    } else if (needProfileAPIUpdate) {\n      // API settings changed, but we won't be adding an app entry\n      logger.debug(`Upload new profile with new API settings to ${profileGaiaHub}`);\n      const profileJWT = makeProfileJWT(profileAPIUpdate, id.privateKey);\n      gaiaUrls = await gaiaUploadProfileAll(\n        network,\n        [profileGaiaHub],\n        profileJWT,\n        id.privateKey,\n        id.name\n      );\n    } else {\n      logger.debug(`Gaia read URL for ${appOrigin} is ${profile.apps[appOrigin]}`);\n      gaiaUrls = { dataUrls: [], error: null };\n    }\n\n    if (gaiaUrls.hasOwnProperty('error') && gaiaUrls.error) {\n      errorMsg = `Failed to upload new profile: ${gaiaUrls.error}`;\n      errorStatusCode = 502;\n      throw new Error(errorMsg);\n    }\n\n    // success!\n    // redirect to application\n    logger.debug(`Handled sign-in to ${appOrigin} using ${id.name}`);\n    const appUri = blockstack.updateQueryStringParameter(redirectUri, 'authResponse', authResponse);\n\n    logger.info(`Redirect to ${appUri}`);\n    res.writeHead(302, { Location: appUri });\n    res.end();\n  } catch (e) {\n    logger.error(e);\n    logger.error(errorMsg);\n    sendJSON(res, { error: `Unable to process signin request: ${errorMsg}` }, errorStatusCode);\n  }\n}\n","import * as blockstack from 'blockstack';\nimport * as bitcoin from 'bitcoinjs-lib';\nimport * as process from 'process';\nimport * as fs from 'fs';\nimport * as winston from 'winston';\nimport cors from 'cors';\n\nimport BN from 'bn.js';\nimport * as crypto from 'crypto';\nimport * as bip39 from 'bip39';\nimport express from 'express';\nimport * as path from 'path';\nimport { prompt } from 'inquirer';\nimport fetch from 'node-fetch';\nimport {\n  makeSTXTokenTransfer,\n  makeContractDeploy,\n  makeContractCall,\n  callReadOnlyFunction,\n  broadcastTransaction,\n  estimateTransfer,\n  estimateContractDeploy,\n  estimateContractFunctionCall,\n  SignedTokenTransferOptions,\n  ContractDeployOptions,\n  SignedContractCallOptions,\n  ReadOnlyFunctionOptions,\n  ContractCallPayload,\n  ClarityValue,\n  ClarityAbi,\n  getAbi,\n  validateContractCall,\n  PostConditionMode,\n  cvToString,\n  StacksTransaction,\n  TxBroadcastResult,\n  getAddressFromPrivateKey,\n  TransactionVersion,\n} from '@stacks/transactions';\n\nimport { StacksMainnet, StacksTestnet } from '@stacks/network';\n\nconst c32check = require('c32check');\n\nimport { UserData } from '@stacks/auth';\nimport crossfetch from 'cross-fetch';\n\nimport { StackingClient, StackerInfo } from '@stacks/stacking';\n\nimport { FaucetsApi, AccountsApi, Configuration } from '@stacks/blockchain-api-client';\n\nimport { GaiaHubConfig } from '@stacks/storage';\n\nimport {\n  getOwnerKeyInfo,\n  getPaymentKeyInfo,\n  getStacksWalletKeyInfo,\n  getApplicationKeyInfo,\n  extractAppKey,\n  STX_WALLET_COMPATIBLE_SEED_STRENGTH,\n  PaymentKeyInfoType,\n  OwnerKeyInfoType,\n  StacksKeyInfoType,\n} from './keys';\n\nimport {\n  CLI_ARGS,\n  getCLIOpts,\n  CLIOptAsString,\n  CLIOptAsStringArray,\n  CLIOptAsBool,\n  checkArgs,\n  loadConfig,\n  makeCommandUsageString,\n  makeAllCommandsList,\n  USAGE,\n  DEFAULT_CONFIG_PATH,\n  DEFAULT_CONFIG_REGTEST_PATH,\n  DEFAULT_CONFIG_TESTNET_PATH,\n  ID_ADDRESS_PATTERN,\n  STACKS_ADDRESS_PATTERN,\n  DEFAULT_MAX_ID_SEARCH_INDEX,\n} from './argparse';\n\nimport { encryptBackupPhrase, decryptBackupPhrase } from './encrypt';\n\nimport { CLINetworkAdapter, CLI_NETWORK_OPTS, getNetwork, NameInfoType } from './network';\n\nimport { gaiaAuth, gaiaConnect, gaiaUploadProfileAll, getGaiaAddressFromProfile } from './data';\n\nimport {\n  JSONStringify,\n  getPrivateKeyAddress,\n  canonicalPrivateKey,\n  decodePrivateKey,\n  makeProfileJWT,\n  getNameInfoEasy,\n  getpass,\n  getBackupPhrase,\n  mkdirs,\n  getIDAddress,\n  IDAppKeys,\n  getIDAppKeys,\n  makePromptsFromArgList,\n  parseClarityFunctionArgAnswers,\n  ClarityFunctionArg,\n  generateExplorerTxPageUrl,\n} from './utils';\n\nimport { handleAuth, handleSignIn } from './auth';\n\n// global CLI options\nlet txOnly = false;\nlet estimateOnly = false;\nlet safetyChecks = true;\nlet receiveFeesPeriod = 52595;\nlet gracePeriod = 5000;\nlet noExit = false;\nlet maxIDSearchIndex = DEFAULT_MAX_ID_SEARCH_INDEX;\n\nlet BLOCKSTACK_TEST = !!process.env.BLOCKSTACK_TEST;\n\nexport function getMaxIDSearchIndex() {\n  return maxIDSearchIndex;\n}\n\nexport interface WhoisInfoType {\n  address: string;\n  blockchain: string;\n  block_renewed_at: number;\n  did: string;\n  expire_block: number;\n  grace_period: number;\n  last_transaction_height: number;\n  last_txid: string;\n  owner_address: string;\n  owner_script: string;\n  renewal_deadline: number;\n  resolver: string | null;\n  status: string;\n  zonefile: string | null;\n  zonefile_hash: string | null;\n}\n\n/*\n * Sign a profile.\n * @path (string) path to the profile\n * @privateKey (string) the owner key (must be single-sig)\n */\n// TODO: fix, network is never used\n// @ts-ignore\nfunction profileSign(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const profilePath = args[0];\n  const profileData = JSON.parse(fs.readFileSync(profilePath).toString());\n  return Promise.resolve().then(() => makeProfileJWT(profileData, args[1]));\n}\n\n/*\n * Verify a profile with an address or public key\n * @path (string) path to the profile\n * @publicKeyOrAddress (string) public key or address\n */\nfunction profileVerify(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const profilePath = args[0];\n  let publicKeyOrAddress = args[1];\n\n  // need to coerce mainnet\n  if (publicKeyOrAddress.match(ID_ADDRESS_PATTERN)) {\n    publicKeyOrAddress = network.coerceMainnetAddress(publicKeyOrAddress.slice(3));\n  }\n\n  const profileString = fs.readFileSync(profilePath).toString();\n\n  return Promise.resolve().then(() => {\n    let profileToken = null;\n\n    try {\n      const profileTokens = JSON.parse(profileString);\n      profileToken = profileTokens[0].token;\n    } catch (e) {\n      // might be a raw token\n      profileToken = profileString;\n    }\n\n    if (!profileToken) {\n      throw new Error(`Data at ${profilePath} does not appear to be a signed profile`);\n    }\n\n    const profile = blockstack.extractProfile(profileToken, publicKeyOrAddress);\n    return JSONStringify(profile);\n  });\n}\n\n/*\n * Store a signed profile for a name or an address.\n * * verify that the profile was signed by the name's owner address\n * * verify that the private key matches the name's owner address\n *\n * Assumes that the URI records are all Gaia hubs\n *\n * @nameOrAddress (string) name or address that owns the profile\n * @path (string) path to the signed profile token\n * @privateKey (string) owner private key for the name\n * @gaiaUrl (string) this is the write endpoint of the Gaia hub to use\n */\nfunction profileStore(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrAddress = args[0];\n  const signedProfilePath = args[1];\n  const privateKey = decodePrivateKey(args[2]);\n  const gaiaHubUrl = args[3];\n\n  const signedProfileData = fs.readFileSync(signedProfilePath).toString();\n\n  const ownerAddress = getPrivateKeyAddress(network, privateKey);\n  const ownerAddressMainnet = network.coerceMainnetAddress(ownerAddress);\n\n  let nameInfoPromise: Promise<NameInfoType | null>;\n  let name = '';\n\n  if (nameOrAddress.startsWith('ID-')) {\n    // ID-address\n    nameInfoPromise = Promise.resolve().then(() => {\n      return {\n        address: nameOrAddress.slice(3),\n      };\n    });\n  } else {\n    // name; find the address\n    nameInfoPromise = getNameInfoEasy(network, nameOrAddress);\n    name = nameOrAddress;\n  }\n\n  const verifyProfilePromise = profileVerify(network, [\n    signedProfilePath,\n    `ID-${ownerAddressMainnet}`,\n  ]);\n\n  return Promise.all([nameInfoPromise, verifyProfilePromise])\n    .then(([nameInfo, _verifiedProfile]: [NameInfoType | null, any]) => {\n      if (\n        safetyChecks &&\n        (!nameInfo ||\n          network.coerceAddress(nameInfo.address) !== network.coerceAddress(ownerAddress))\n      ) {\n        throw new Error(\n          'Name owner address either could not be found, or does not match ' +\n            `private key address ${ownerAddress}`\n        );\n      }\n      return gaiaUploadProfileAll(network, [gaiaHubUrl], signedProfileData, args[2], name);\n    })\n    .then((gaiaUrls: { dataUrls?: string[] | null; error?: string | null }) => {\n      if (gaiaUrls.hasOwnProperty('error')) {\n        return JSONStringify({ dataUrls: gaiaUrls.dataUrls!, error: gaiaUrls.error! }, true);\n      } else {\n        return JSONStringify({ profileUrls: gaiaUrls.dataUrls! });\n      }\n    });\n}\n\n/*\n * Get the app private key(s) from a backup phrase and an ID-address\n * args:\n * @mnemonic (string) the 12-word phrase\n * @nameOrIDAddress (string) the name or ID-address\n * @appOrigin (string) the application's origin URL\n */\nasync function getAppKeys(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  const nameOrIDAddress = args[1];\n  const origin = args[2];\n  const idAddress = await getIDAddress(network, nameOrIDAddress);\n  const networkInfo = await getApplicationKeyInfo(network, mnemonic, idAddress, origin);\n  return JSONStringify(networkInfo);\n}\n\n/*\n * Get the owner private key(s) from a backup phrase\n * args:\n * @mnemonic (string) the 12-word phrase\n * @max_index (integer) (optional) the profile index maximum\n */\nasync function getOwnerKeys(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  let maxIndex = 1;\n  if (args.length > 1 && !!args[1]) {\n    maxIndex = parseInt(args[1]);\n  }\n\n  const keyInfo: OwnerKeyInfoType[] = [];\n  for (let i = 0; i < maxIndex; i++) {\n    keyInfo.push(await getOwnerKeyInfo(network, mnemonic, i));\n  }\n\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Get the payment private key from a backup phrase\n * args:\n * @mnemonic (string) the 12-word phrase\n */\nasync function getPaymentKey(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  // keep the return value consistent with getOwnerKeys\n  const keyObj = await getPaymentKeyInfo(network, mnemonic);\n  const keyInfo: PaymentKeyInfoType[] = [];\n  keyInfo.push(keyObj);\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Get the payment private key from a backup phrase used by the Stacks wallet\n * args:\n * @mnemonic (string) the 24-word phrase\n */\nasync function getStacksWalletKey(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = await getBackupPhrase(args[0]);\n  // keep the return value consistent with getOwnerKeys\n  const keyObj = await getStacksWalletKeyInfo(network, mnemonic);\n  const keyInfo: StacksKeyInfoType[] = [];\n  keyInfo.push(keyObj);\n  return JSONStringify(keyInfo);\n}\n\n/*\n * Make a private key and output it\n * args:\n * @mnemonic (string) OPTIONAL; the 12-word phrase\n */\nasync function makeKeychain(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let mnemonic: string;\n  if (args[0]) {\n    mnemonic = await getBackupPhrase(args[0]);\n  } else {\n    mnemonic = await bip39.generateMnemonic(\n      STX_WALLET_COMPATIBLE_SEED_STRENGTH,\n      crypto.randomBytes\n    );\n  }\n\n  const stacksKeyInfo = await getStacksWalletKeyInfo(network, mnemonic);\n  return JSONStringify({\n    mnemonic: mnemonic,\n    keyInfo: stacksKeyInfo,\n  });\n}\n\n/*\n * Get an address's tokens and their balances.\n * Takes either a Bitcoin or Stacks address\n * args:\n * @address (string) the address\n */\nfunction balance(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let address = args[0];\n\n  if (BLOCKSTACK_TEST) {\n    // force testnet address if we're in regtest or testnet mode\n    address = network.coerceAddress(address);\n  }\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  return fetch(txNetwork.getAccountApiUrl(address))\n    .then(response => response.json())\n    .then(response => {\n      let balanceHex = response.balance;\n      if (response.balance.startsWith('0x')) {\n        balanceHex = response.balance.substr(2);\n      }\n      let lockedHex = response.locked;\n      if (response.locked.startsWith('0x')) {\n        lockedHex = response.locked.substr(2);\n      }\n      let unlockHeight = response.unlock_height;\n      const balance = new BN(balanceHex, 16);\n      const locked = new BN(lockedHex, 16);\n      const res = {\n        balance: balance.toString(10),\n        locked: locked.toString(10),\n        unlock_height: unlockHeight,\n        nonce: response.nonce,\n      };\n      return Promise.resolve(JSONStringify(res));\n    });\n}\n\n/*\n * Get a page of the account's history\n * args:\n * @address (string) the account address\n * @page (int) the page of the history to fetch (optional)\n */\nfunction getAccountHistory(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const address = c32check.c32ToB58(args[0]);\n\n  if (args.length >= 2 && !!args[1]) {\n    const page = parseInt(args[1]);\n    return Promise.resolve()\n      .then(() => {\n        return network.getAccountHistoryPage(address, page);\n      })\n      .then(accountStates =>\n        JSONStringify(\n          accountStates.map((s: any) => {\n            const new_s = {\n              address: c32check.b58ToC32(s.address),\n              credit_value: s.credit_value.toString(),\n              debit_value: s.debit_value.toString(),\n            };\n            return new_s;\n          })\n        )\n      );\n  } else {\n    // all pages\n    let history: any[] = [];\n\n    function getAllAccountHistoryPages(page: number): Promise<any[]> {\n      return network.getAccountHistoryPage(address, page).then((results: any[]) => {\n        if (results.length == 0) {\n          return history;\n        } else {\n          history = history.concat(results);\n          return getAllAccountHistoryPages(page + 1);\n        }\n      });\n    }\n\n    return getAllAccountHistoryPages(0).then((accountStates: any[]) =>\n      JSONStringify(\n        accountStates.map((s: any) => {\n          const new_s = {\n            address: c32check.b58ToC32(s.address),\n            credit_value: s.credit_value.toString(),\n            debit_value: s.debit_value.toString(),\n          };\n          return new_s;\n        })\n      )\n    );\n  }\n}\n\n// /*\n//  * Get the account's state(s) at a particular block height\n//  * args:\n//  * @address (string) the account address\n//  * @blockHeight (int) the height at which to query\n//  */\n// function getAccountAt(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const address = c32check.c32ToB58(args[0]);\n//   const blockHeight = parseInt(args[1]);\n\n//   return Promise.resolve().then(() => {\n//     return network.getAccountAt(address, blockHeight);\n//   })\n//     .then(accountStates => accountStates.map((s : any) => {\n//       const new_s = {\n//         address: c32check.b58ToC32(s.address),\n//         credit_value: s.credit_value.toString(),\n//         debit_value: s.debit_value.toString()\n//       };\n//       return new_s;\n//     }))\n//     .then(history => JSONStringify(history));\n// }\n\n// /*\n//  * Sends BTC from one private key to another address\n//  * args:\n//  * @recipientAddress (string) the recipient's address\n//  * @amount (string) the amount of BTC to send\n//  * @privateKey (string) the private key that owns the BTC\n//  */\n// function sendBTC(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const destinationAddress = args[0];\n//   const amount = parseInt(args[1]);\n//   const paymentKeyHex = decodePrivateKey(args[2]);\n\n//   if (amount <= 5500) {\n//     throw new Error('Invalid amount (must be greater than 5500)');\n//   }\n\n//   let paymentKey;\n//   if (typeof paymentKeyHex === 'string') {\n//     // single-sig\n//     paymentKey = blockstack.PubkeyHashSigner.fromHexString(paymentKeyHex);\n//   }\n//   else {\n//     // multi-sig or segwit\n//     paymentKey = paymentKeyHex;\n//   }\n\n//   const txPromise = blockstack.transactions.makeBitcoinSpend(destinationAddress, paymentKey, amount, !hasKeys(paymentKeyHex))\n//     .catch((e : Error) => {\n//       if (e.name === 'InvalidAmountError') {\n//         return JSONStringify({\n//           'status': false,\n//           'error': e.message\n//         }, true);\n//       }\n//       else {\n//         throw e;\n//       }\n//     });\n\n//   if (txOnly) {\n//     return txPromise;\n//   }\n//   else {\n//     return txPromise.then((tx : string) => {\n//       return network.broadcastTransaction(tx);\n//     })\n//       .then((txid : string) => {\n//         return txid;\n//       });\n//   }\n// }\n\n/*\n * Send tokens from one account private key to another account's address.\n * args:\n * @recipientAddress (string) the recipient's account address\n * @tokenAmount (int) the number of tokens to send\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n * @memo (string) OPTIONAL: a 34-byte memo to include\n */\nasync function sendTokens(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const recipientAddress = args[0];\n  const tokenAmount = new BN(args[1]);\n  const fee = new BN(args[2]);\n  const nonce = new BN(args[3]);\n  const privateKey = args[4];\n\n  let memo = '';\n\n  if (args.length > 4 && !!args[5]) {\n    memo = args[5];\n  }\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  const options: SignedTokenTransferOptions = {\n    recipient: recipientAddress,\n    amount: tokenAmount,\n    senderKey: privateKey,\n    fee,\n    nonce,\n    memo,\n    network: txNetwork,\n  };\n\n  const tx: StacksTransaction = await makeSTXTokenTransfer(options);\n\n  if (estimateOnly) {\n    return estimateTransfer(tx, txNetwork).then(cost => {\n      return cost.toString(10);\n    });\n  }\n\n  if (txOnly) {\n    return Promise.resolve(tx.serialize().toString('hex'));\n  }\n\n  return broadcastTransaction(tx, txNetwork)\n    .then((response: TxBroadcastResult) => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${tx.txid()}`,\n        transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n      };\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n/*\n * Depoly a Clarity smart contract.\n * args:\n * @source (string) path to the contract source file\n * @contractName (string) the name of the contract\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n */\nasync function contractDeploy(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const sourceFile = args[0];\n  const contractName = args[1];\n  const fee = new BN(args[2]);\n  const nonce = new BN(args[3]);\n  const privateKey = args[4];\n\n  const source = fs.readFileSync(sourceFile).toString();\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  const options: ContractDeployOptions = {\n    contractName,\n    codeBody: source,\n    senderKey: privateKey,\n    fee,\n    nonce,\n    network: txNetwork,\n    postConditionMode: PostConditionMode.Allow,\n  };\n\n  const tx = await makeContractDeploy(options);\n\n  if (estimateOnly) {\n    return estimateContractDeploy(tx, txNetwork).then(cost => {\n      return cost.toString(10);\n    });\n  }\n\n  if (txOnly) {\n    return Promise.resolve(tx.serialize().toString('hex'));\n  }\n\n  return broadcastTransaction(tx, txNetwork)\n    .then(response => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${tx.txid()}`,\n        transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n      };\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n/*\n * Call a Clarity smart contract function.\n * args:\n * @contractAddress (string) the address of the contract\n * @contractName (string) the name of the contract\n * @functionName (string) the name of the function to call\n * @fee (int) the transaction fee to be paid\n * @nonce (int) integer nonce needs to be incremented after each transaction from an account\n * @privateKey (string) the hex-encoded private key to use to send the tokens\n */\nasync function contractFunctionCall(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const contractAddress = args[0];\n  const contractName = args[1];\n  const functionName = args[2];\n  const fee = new BN(args[3]);\n  const nonce = new BN(args[4]);\n  const privateKey = args[5];\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  let abi: ClarityAbi;\n  let abiArgs: ClarityFunctionArg[];\n  let functionArgs: ClarityValue[] = [];\n\n  return getAbi(contractAddress, contractName, txNetwork)\n    .then(responseAbi => {\n      abi = responseAbi;\n      const filtered = abi.functions.filter(fn => fn.name === functionName);\n      if (filtered.length === 1) {\n        abiArgs = filtered[0].args;\n        return makePromptsFromArgList(abiArgs);\n      } else {\n        return null;\n      }\n    })\n    .then(prompts => prompt(prompts!))\n    .then(answers => {\n      functionArgs = parseClarityFunctionArgAnswers(answers, abiArgs);\n\n      const options: SignedContractCallOptions = {\n        contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n        senderKey: privateKey,\n        fee,\n        nonce,\n        network: txNetwork,\n        postConditionMode: PostConditionMode.Allow,\n      };\n\n      return makeContractCall(options);\n    })\n    .then(tx => {\n      if (!validateContractCall(tx.payload as ContractCallPayload, abi)) {\n        throw new Error('Failed to validate function arguments against ABI');\n      }\n\n      if (estimateOnly) {\n        return estimateContractFunctionCall(tx, txNetwork).then(cost => {\n          return cost.toString(10);\n        });\n      }\n\n      if (txOnly) {\n        return Promise.resolve(tx.serialize().toString('hex'));\n      }\n\n      return broadcastTransaction(tx, txNetwork)\n        .then(response => {\n          if (response.hasOwnProperty('error')) {\n            return response;\n          }\n          return {\n            txid: `0x${tx.txid()}`,\n            transaction: generateExplorerTxPageUrl(tx.txid(), txNetwork),\n          };\n        })\n        .catch(error => {\n          return error.toString();\n        });\n    });\n}\n\n/*\n * Call a read-only Clarity smart contract function.\n * args:\n * @contractAddress (string) the address of the contract\n * @contractName (string) the name of the contract\n * @functionName (string) the name of the function to call\n * @senderAddress (string) the sender address\n */\nasync function readOnlyContractFunctionCall(\n  network: CLINetworkAdapter,\n  args: string[]\n): Promise<string> {\n  const contractAddress = args[0];\n  const contractName = args[1];\n  const functionName = args[2];\n  const senderAddress = args[3];\n\n  // temporary hack to use network config from stacks-transactions lib\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  txNetwork.coreApiUrl = network.legacyNetwork.blockstackAPIUrl;\n\n  let abi: ClarityAbi;\n  let abiArgs: ClarityFunctionArg[];\n  let functionArgs: ClarityValue[] = [];\n\n  return getAbi(contractAddress, contractName, txNetwork)\n    .then(responseAbi => {\n      abi = responseAbi;\n      const filtered = abi.functions.filter(fn => fn.name === functionName);\n      if (filtered.length === 1) {\n        abiArgs = filtered[0].args;\n        return makePromptsFromArgList(abiArgs);\n      } else {\n        return null;\n      }\n    })\n    .then(prompts => prompt(prompts!))\n    .then(answers => {\n      functionArgs = parseClarityFunctionArgAnswers(answers, abiArgs);\n\n      const options: ReadOnlyFunctionOptions = {\n        contractAddress,\n        contractName,\n        functionName,\n        functionArgs,\n        senderAddress,\n        network: txNetwork,\n      };\n\n      return callReadOnlyFunction(options);\n    })\n    .then(returnValue => {\n      return cvToString(returnValue);\n    })\n    .catch(error => {\n      return error.toString();\n    });\n}\n\n// /*\n//  * Get the number of confirmations of a txid.\n//  * args:\n//  * @txid (string) the transaction ID as a hex string\n//  */\n// function getConfirmations(network: CLINetworkAdapter, args: string[]) : Promise<string> {\n//   const txid = args[0];\n//   return Promise.all([network.getBlockHeight(), network.getTransactionInfo(txid)])\n//     .then(([blockHeight, txInfo]) => {\n//       return JSONStringify({\n//         'blockHeight': txInfo.block_height,\n//         'confirmations': blockHeight - txInfo.block_height + 1\n//       });\n//     })\n//     .catch((e) => {\n//       if (e.message.toLowerCase() === 'unconfirmed transaction') {\n//         return JSONStringify({\n//           'blockHeight': 'unconfirmed',\n//           'confirmations': 0\n//         });\n//       }\n//       else {\n//         throw e;\n//       }\n//     });\n// }\n\n/*\n * Get the address of a private key\n * args:\n * @private_key (string) the hex-encoded private key or key bundle\n */\nfunction getKeyAddress(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const privateKey = decodePrivateKey(args[0]);\n  return Promise.resolve().then(() => {\n    const addr = getPrivateKeyAddress(network, privateKey);\n    return JSONStringify({\n      BTC: addr,\n      STACKS: c32check.b58ToC32(addr),\n    });\n  });\n}\n\n/*\n * Get a file from Gaia.\n * args:\n * @username (string) the blockstack ID of the user who owns the data\n * @origin (string) the application origin\n * @path (string) the file to read\n * @appPrivateKey (string) OPTIONAL: the app private key to decrypt/verify with\n * @decrypt (string) OPTINOAL: if '1' or 'true', then decrypt\n * @verify (string) OPTIONAL: if '1' or 'true', then search for and verify a signature file\n *  along with the data\n */\nfunction gaiaGetFile(network: CLINetworkAdapter, args: string[]): Promise<string | Buffer> {\n  const username = args[0];\n  const origin = args[1];\n  const path = args[2];\n  let appPrivateKey = args[3];\n  let decrypt = false;\n  let verify = false;\n\n  if (!!appPrivateKey && args.length > 4 && !!args[4]) {\n    decrypt = args[4].toLowerCase() === 'true' || args[4].toLowerCase() === '1';\n  }\n\n  if (!!appPrivateKey && args.length > 5 && !!args[5]) {\n    verify = args[5].toLowerCase() === 'true' || args[5].toLowerCase() === '1';\n  }\n\n  if (!appPrivateKey) {\n    // make a fake private key (it won't be used)\n    appPrivateKey = 'fda1afa3ff9ef25579edb5833b825ac29fae82d03db3f607db048aae018fe882';\n  }\n\n  // force mainnet addresses\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, null)\n    .then((_userData: UserData) =>\n      blockstack.getFile(path, {\n        decrypt: decrypt,\n        verify: verify,\n        app: origin,\n        username: username,\n      })\n    )\n    .then((data: ArrayBuffer | Buffer | string) => {\n      if (data instanceof ArrayBuffer) {\n        return Buffer.from(data);\n      } else {\n        return data;\n      }\n    });\n}\n\n/*\n * Put a file into a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n * @dataPath (string) the path (on disk) to the data to store\n * @gaiaPath (string) the path (in Gaia) where the data will be stored\n * @encrypt (string) OPTIONAL: if '1' or 'true', then encrypt the file\n * @sign (string) OPTIONAL: if '1' or 'true', then sign the file and store the signature too.\n */\nfunction gaiaPutFile(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n  const dataPath = args[2];\n  const gaiaPath = path.normalize(args[3].replace(/^\\/+/, ''));\n\n  let encrypt = false;\n  let sign = false;\n\n  if (args.length > 4 && !!args[4]) {\n    encrypt = args[4].toLowerCase() === 'true' || args[4].toLowerCase() === '1';\n  }\n  if (args.length > 5 && !!args[5]) {\n    sign = args[5].toLowerCase() === 'true' || args[5].toLowerCase() === '1';\n  }\n\n  const data = fs.readFileSync(dataPath);\n\n  // force mainnet addresses\n  // TODO\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.putFile(gaiaPath, data, { encrypt: encrypt, sign: sign });\n    })\n    .then((url: string) => {\n      return JSONStringify({ urls: [url] });\n    });\n}\n\n/*\n * Delete a file in a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n * @gaiaPath (string) the path (in Gaia) to delete\n * @wasSigned (string) OPTIONAL: if '1' or 'true'.  Delete the signature file as well.\n */\nfunction gaiaDeleteFile(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n  const gaiaPath = path.normalize(args[2].replace(/^\\/+/, ''));\n\n  let wasSigned = false;\n\n  if (args.length > 3 && !!args[3]) {\n    wasSigned = args[3].toLowerCase() === 'true' || args[3].toLowerCase() === '1';\n  }\n\n  // force mainnet addresses\n  // TODO\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, appPrivateKey, hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.deleteFile(gaiaPath, { wasSigned: wasSigned });\n    })\n    .then(() => {\n      return JSONStringify('ok');\n    });\n}\n\n/*\n * List files in a Gaia hub\n * args:\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @appPrivateKey (string) the private key used to authenticate to the gaia hub\n */\nfunction gaiaListFiles(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const hubUrl = args[0];\n  const appPrivateKey = args[1];\n\n  // force mainnet addresses\n  // TODO\n  let count = 0;\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n  return gaiaAuth(network, canonicalPrivateKey(appPrivateKey), hubUrl)\n    .then((_userData: UserData) => {\n      return blockstack.listFiles((name: string) => {\n        // print out incrementally\n        console.log(name);\n        count += 1;\n        return true;\n      });\n    })\n    .then(() => JSONStringify(count));\n}\n\n/*\n * Group array items into batches\n */\nfunction batchify<T>(input: T[], batchSize: number = 50): T[][] {\n  const output = [];\n  let currentBatch = [];\n  for (let i = 0; i < input.length; i++) {\n    currentBatch.push(input[i]);\n    if (currentBatch.length >= batchSize) {\n      output.push(currentBatch);\n      currentBatch = [];\n    }\n  }\n  if (currentBatch.length > 0) {\n    output.push(currentBatch);\n  }\n  return output;\n}\n\n/*\n * Dump all files from a Gaia hub bucket to a directory on disk.\n * args:\n * @nameOrIDAddress (string) the name or ID address that owns the bucket to dump\n * @appOrigin (string) the application for which to dump data\n * @hubUrl (string) the URL to the write endpoint of the gaia hub\n * @mnemonic (string) the 12-word phrase or ciphertext\n * @dumpDir (string) the directory to hold the dumped files\n */\nfunction gaiaDumpBucket(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrIDAddress = args[0];\n  const appOrigin = args[1];\n  const hubUrl = args[2];\n  const mnemonicOrCiphertext = args[3];\n  let dumpDir = args[4];\n\n  if (dumpDir.length === 0) {\n    throw new Error('Invalid directory (not given)');\n  }\n  if (dumpDir[0] !== '/') {\n    // relative path.  make absolute\n    const cwd = fs.realpathSync('.');\n    dumpDir = path.normalize(`${cwd}/${dumpDir}`);\n  }\n\n  mkdirs(dumpDir);\n\n  function downloadFile(hubConfig: GaiaHubConfig, fileName: string): Promise<any> {\n    const gaiaReadUrl = `${hubConfig.url_prefix.replace(/\\/+$/, '')}/${hubConfig.address}`;\n    const fileUrl = `${gaiaReadUrl}/${fileName}`;\n    const destPath = `${dumpDir}/${fileName.replace(/\\//g, '\\\\x2f')}`;\n\n    console.log(`Download ${fileUrl} to ${destPath}`);\n    return fetch(fileUrl)\n      .then((resp: any) => {\n        if (resp.status !== 200) {\n          throw new Error(`Bad status code for ${fileUrl}: ${resp.status}`);\n        }\n\n        // javascript can be incredibly stupid at fetching data despite being a Web language...\n        const contentType = resp.headers.get('Content-Type');\n        if (\n          contentType === null ||\n          contentType.startsWith('text') ||\n          contentType === 'application/json'\n        ) {\n          return resp.text();\n        } else {\n          return resp.arrayBuffer();\n        }\n      })\n      .then((filebytes: Buffer | ArrayBuffer) => {\n        return new Promise((resolve, reject) => {\n          try {\n            fs.writeFileSync(destPath, Buffer.from(filebytes), { encoding: null, mode: 0o660 });\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n  }\n\n  // force mainnet addresses\n  // TODO: better way of doing this\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n\n  const fileNames: string[] = [];\n  let gaiaHubConfig: GaiaHubConfig;\n  let appPrivateKey: string;\n  let ownerPrivateKey: string;\n\n  return getIDAppKeys(network, nameOrIDAddress, appOrigin, mnemonicOrCiphertext)\n    .then((keyInfo: IDAppKeys) => {\n      appPrivateKey = keyInfo.appPrivateKey;\n      ownerPrivateKey = keyInfo.ownerPrivateKey;\n      return gaiaAuth(network, appPrivateKey, hubUrl, ownerPrivateKey);\n    })\n    .then((_userData: UserData) => {\n      return gaiaConnect(network, hubUrl, appPrivateKey);\n    })\n    .then((hubConfig: GaiaHubConfig) => {\n      gaiaHubConfig = hubConfig;\n      return blockstack.listFiles(name => {\n        fileNames.push(name);\n        return true;\n      });\n    })\n    .then((fileCount: number) => {\n      console.log(`Download ${fileCount} files...`);\n      const fileBatches: string[][] = batchify(fileNames);\n      let filePromiseChain: Promise<any> = Promise.resolve();\n      for (let i = 0; i < fileBatches.length; i++) {\n        const filePromises = fileBatches[i].map(fileName => downloadFile(gaiaHubConfig, fileName));\n        const batchPromise = Promise.all(filePromises);\n        filePromiseChain = filePromiseChain.then(() => batchPromise);\n      }\n\n      return filePromiseChain.then(() => JSONStringify(fileCount));\n    });\n}\n\n/*\n * Restore all of the files in a Gaia bucket dump to a new Gaia hub\n * args:\n * @nameOrIDAddress (string) the name or ID address that owns the bucket to dump\n * @appOrigin (string) the origin of the app for which to restore data\n * @hubUrl (string) the URL to the write endpoint of the new gaia hub\n * @mnemonic (string) the 12-word phrase or ciphertext\n * @dumpDir (string) the directory to hold the dumped files\n */\nfunction gaiaRestoreBucket(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const nameOrIDAddress = args[0];\n  const appOrigin = args[1];\n  const hubUrl = args[2];\n  const mnemonicOrCiphertext = args[3];\n  let dumpDir = args[4];\n\n  if (dumpDir.length === 0) {\n    throw new Error('Invalid directory (not given)');\n  }\n  if (dumpDir[0] !== '/') {\n    // relative path.  make absolute\n    const cwd = fs.realpathSync('.');\n    dumpDir = path.normalize(`${cwd}/${dumpDir}`);\n  }\n\n  const fileList = fs.readdirSync(dumpDir);\n  const fileBatches = batchify(fileList, 10);\n\n  let appPrivateKey: string;\n  let ownerPrivateKey: string;\n\n  // force mainnet addresses\n  // TODO better way of doing this\n  blockstack.config.network.layer1 = bitcoin.networks.bitcoin;\n\n  return getIDAppKeys(network, nameOrIDAddress, appOrigin, mnemonicOrCiphertext)\n    .then((keyInfo: IDAppKeys) => {\n      appPrivateKey = keyInfo.appPrivateKey;\n      ownerPrivateKey = keyInfo.ownerPrivateKey;\n      return gaiaAuth(network, appPrivateKey, hubUrl, ownerPrivateKey);\n    })\n    .then((_userData: UserData) => {\n      let uploadPromise: Promise<any> = Promise.resolve();\n      for (let i = 0; i < fileBatches.length; i++) {\n        const uploadBatchPromises = fileBatches[i].map((fileName: string) => {\n          const filePath = path.join(dumpDir, fileName);\n          const dataBuf = fs.readFileSync(filePath);\n          const gaiaPath = fileName.replace(/\\\\x2f/g, '/');\n          return blockstack\n            .putFile(gaiaPath, dataBuf, { encrypt: false, sign: false })\n            .then((url: string) => {\n              console.log(`Uploaded ${fileName} to ${url}`);\n            });\n        });\n        uploadPromise = uploadPromise.then(() => Promise.all(uploadBatchPromises));\n      }\n      return uploadPromise;\n    })\n    .then(() => JSONStringify(fileList.length));\n}\n\n/*\n * Set the Gaia hub for an application for a blockstack ID.\n * args:\n * @blockstackID (string) the blockstack ID of the user\n * @profileHubUrl (string) the URL to the write endpoint of the user's profile gaia hub\n * @appOrigin (string) the application's Origin\n * @hubUrl (string) the URL to the write endpoint of the app's gaia hub\n * @mnemonic (string) the 12-word backup phrase, or the ciphertext of it\n */\nasync function gaiaSetHub(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  network.setCoerceMainnetAddress(true);\n\n  const blockstackID = args[0];\n  const ownerHubUrl = args[1];\n  const appOrigin = args[2];\n  const hubUrl = args[3];\n  const mnemonicPromise = getBackupPhrase(args[4]);\n\n  const nameInfoPromise = getNameInfoEasy(network, blockstackID).then(\n    (nameInfo: NameInfoType | null) => {\n      if (!nameInfo) {\n        throw new Error('Name not found');\n      }\n      return nameInfo;\n    }\n  );\n\n  const profilePromise = blockstack.lookupProfile(blockstackID);\n\n  const [nameInfo, nameProfile, mnemonic]: [NameInfoType, any, string] = await Promise.all([\n    nameInfoPromise,\n    profilePromise,\n    mnemonicPromise,\n  ]);\n\n  if (!nameProfile) {\n    throw new Error('No profile found');\n  }\n  if (!nameInfo) {\n    throw new Error('Name not found');\n  }\n  if (!nameInfo.zonefile) {\n    throw new Error('No zone file found');\n  }\n\n  if (!nameProfile.apps) {\n    nameProfile.apps = {};\n  }\n\n  // get owner ID-address\n  const ownerAddress = network.coerceMainnetAddress(nameInfo.address);\n  const idAddress = `ID-${ownerAddress}`;\n\n  // get owner and app key info\n  const appKeyInfo = await getApplicationKeyInfo(network, mnemonic, idAddress, appOrigin);\n  const ownerKeyInfo = await getOwnerKeyInfo(network, mnemonic, appKeyInfo.ownerKeyIndex);\n\n  // do we already have an address set for this app?\n  let existingAppAddress: string | null = null;\n  let appPrivateKey: string;\n  try {\n    existingAppAddress = getGaiaAddressFromProfile(network, nameProfile, appOrigin);\n    appPrivateKey = extractAppKey(network, appKeyInfo, existingAppAddress);\n  } catch (e) {\n    console.log(`No profile application entry for ${appOrigin}`);\n    appPrivateKey = extractAppKey(network, appKeyInfo);\n  }\n\n  appPrivateKey = `${canonicalPrivateKey(appPrivateKey)}01`;\n  const appAddress = network.coerceMainnetAddress(getPrivateKeyAddress(network, appPrivateKey));\n\n  if (existingAppAddress && appAddress !== existingAppAddress) {\n    throw new Error(`BUG: ${existingAppAddress} !== ${appAddress}`);\n  }\n\n  const profile = nameProfile;\n  const ownerPrivateKey = ownerKeyInfo.privateKey;\n\n  const ownerGaiaHubPromise = gaiaConnect(network, ownerHubUrl, ownerPrivateKey);\n  const appGaiaHubPromise = gaiaConnect(network, hubUrl, appPrivateKey);\n\n  const [ownerHubConfig, appHubConfig]: [GaiaHubConfig, GaiaHubConfig] = await Promise.all([\n    ownerGaiaHubPromise,\n    appGaiaHubPromise,\n  ]);\n\n  if (!ownerHubConfig.url_prefix) {\n    throw new Error('Invalid owner hub config: no url_prefix defined');\n  }\n\n  if (!appHubConfig.url_prefix) {\n    throw new Error('Invalid app hub config: no url_prefix defined');\n  }\n\n  const gaiaReadUrl = appHubConfig.url_prefix.replace(/\\/+$/, '');\n\n  const newAppEntry: Record<string, string> = {};\n  newAppEntry[appOrigin] = `${gaiaReadUrl}/${appAddress}/`;\n\n  const apps = Object.assign({}, profile.apps ? profile.apps : {}, newAppEntry);\n  profile.apps = apps;\n\n  // sign the new profile\n  const signedProfile = makeProfileJWT(profile, ownerPrivateKey);\n  const profileUrls: {\n    dataUrls?: string[] | null;\n    error?: string | null;\n  } = await gaiaUploadProfileAll(\n    network,\n    [ownerHubUrl],\n    signedProfile,\n    ownerPrivateKey,\n    blockstackID\n  );\n\n  if (profileUrls.error) {\n    return JSONStringify({\n      error: profileUrls.error,\n    });\n  } else {\n    return JSONStringify({\n      profileUrls: profileUrls.dataUrls!,\n    });\n  }\n}\n\n/*\n * Convert an address between mainnet and testnet, and between\n * base58check and c32check.\n * args:\n * @address (string) the input address.  can be in any format\n */\nfunction addressConvert(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const addr = args[0];\n  let b58addr: string;\n  let c32addr: string;\n  let testnetb58addr: string;\n  let testnetc32addr: string;\n\n  if (addr.match(STACKS_ADDRESS_PATTERN)) {\n    c32addr = addr;\n    b58addr = c32check.c32ToB58(c32addr);\n  } else if (addr.match(/[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+/)) {\n    c32addr = c32check.b58ToC32(addr);\n    b58addr = addr;\n  } else {\n    throw new Error(`Unrecognized address ${addr}`);\n  }\n\n  if (network.isTestnet()) {\n    testnetb58addr = network.coerceAddress(b58addr);\n    testnetc32addr = c32check.b58ToC32(testnetb58addr);\n  }\n\n  return Promise.resolve().then(() => {\n    const result: any = {\n      mainnet: {\n        STACKS: c32addr,\n        BTC: b58addr,\n      },\n      testnet: undefined,\n    };\n\n    if (network.isTestnet()) {\n      result.testnet = {\n        STACKS: testnetc32addr,\n        BTC: testnetb58addr,\n      };\n    }\n\n    return JSONStringify(result);\n  });\n}\n\n/*\n * Run an authentication daemon on a given port.\n * args:\n * @gaiaHubUrl (string) the write endpoint of your app Gaia hub, where app data will be stored\n * @mnemonic (string) your 12-word phrase, optionally encrypted.  If encrypted, then\n * a password will be prompted.\n * @profileGaiaHubUrl (string) the write endpoint of your profile Gaia hub, where your profile\n *   will be stored (optional)\n * @port (number) the port to listen on (optional)\n */\nfunction authDaemon(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const gaiaHubUrl = args[0];\n  const mnemonicOrCiphertext = args[1];\n  let port = 3000; // default port\n  let profileGaiaHub = gaiaHubUrl;\n\n  if (args.length > 2 && !!args[2]) {\n    profileGaiaHub = args[2];\n  }\n\n  if (args.length > 3 && !!args[3]) {\n    port = parseInt(args[3]);\n  }\n\n  if (port < 0 || port > 65535) {\n    return Promise.resolve().then(() => JSONStringify({ error: 'Invalid port' }));\n  }\n\n  const mnemonicPromise = getBackupPhrase(mnemonicOrCiphertext);\n\n  return mnemonicPromise\n    .then((mnemonic: string) => {\n      noExit = true;\n\n      // load up all of our identity addresses, profiles, profile URLs, and Gaia connections\n      const authServer = express();\n      authServer.use(cors());\n\n      authServer.get(/^\\/auth\\/*$/, (req: express.Request, res: express.Response) => {\n        return handleAuth(network, mnemonic, gaiaHubUrl, profileGaiaHub, port, req, res);\n      });\n\n      authServer.get(/^\\/signin\\/*$/, (req: express.Request, res: express.Response) => {\n        return handleSignIn(network, mnemonic, gaiaHubUrl, profileGaiaHub, req, res);\n      });\n\n      authServer.listen(port, () => console.log(`Authentication server started on ${port}`));\n      return 'Press Ctrl+C to exit';\n    })\n    .catch((e: Error) => {\n      return JSONStringify({ error: e.message });\n    });\n}\n\n/*\n * Encrypt a backup phrase\n * args:\n * @backup_phrase (string) the 12-word phrase to encrypt\n * @password (string) the password (will be interactively prompted if not given)\n */\n// TODO: fix: network is never used\n// @ts-ignore\nfunction encryptMnemonic(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const mnemonic = args[0];\n  if (mnemonic.split(/ +/g).length !== 12) {\n    throw new Error('Invalid backup phrase: must be 12 words');\n  }\n\n  const passwordPromise: Promise<string> = new Promise((resolve, reject) => {\n    let pass = '';\n    if (args.length === 2 && !!args[1]) {\n      pass = args[1];\n      resolve(pass);\n    } else {\n      if (!process.stdin.isTTY) {\n        // password must be given as an argument\n        const errMsg = 'Password argument required on non-interactive mode';\n        reject(new Error(errMsg));\n      } else {\n        // prompt password\n        getpass('Enter password: ', (pass1: string) => {\n          getpass('Enter password again: ', (pass2: string) => {\n            if (pass1 !== pass2) {\n              const errMsg = 'Passwords do not match';\n              reject(new Error(errMsg));\n            } else {\n              resolve(pass1);\n            }\n          });\n        });\n      }\n    }\n  });\n\n  return passwordPromise\n    .then((pass: string) => encryptBackupPhrase(mnemonic, pass))\n    .then((cipherTextBuffer: Buffer) => cipherTextBuffer.toString('base64'))\n    .catch((e: Error) => {\n      return JSONStringify({ error: e.message });\n    });\n}\n\n/* Decrypt a backup phrase\n * args:\n * @encrypted_backup_phrase (string) the encrypted base64-encoded backup phrase\n * @password 9string) the password (will be interactively prompted if not given)\n */\n// TODO: fix: network is never used\n// @ts-ignore\nfunction decryptMnemonic(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  const ciphertext = args[0];\n\n  const passwordPromise: Promise<string> = new Promise((resolve, reject) => {\n    if (args.length === 2 && !!args[1]) {\n      const pass = args[1];\n      resolve(pass);\n    } else {\n      if (!process.stdin.isTTY) {\n        // password must be given\n        reject(new Error('Password argument required in non-interactive mode'));\n      } else {\n        // prompt password\n        getpass('Enter password: ', p => {\n          resolve(p);\n        });\n      }\n    }\n  });\n\n  return passwordPromise\n    .then((pass: string) => decryptBackupPhrase(Buffer.from(ciphertext, 'base64'), pass))\n    .catch((e: Error) => {\n      return JSONStringify({\n        error:\n          'Failed to decrypt (wrong password or corrupt ciphertext), ' + `details: ${e.message}`,\n      });\n    });\n}\n\nasync function stackingStatus(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let stxAddress = args[0];\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  return stacker\n    .getStatus()\n    .then((status: StackerInfo) => {\n      if (status.stacked) {\n        return {\n          amount_microstx: status.details!.amount_microstx,\n          first_reward_cycle: status.details!.first_reward_cycle,\n          lock_period: status.details!.lock_period,\n          unlock_height: status.details!.unlock_height,\n          pox_address: {\n            version: status.details!.pox_address.version.toString('hex'),\n            hashbytes: status.details!.pox_address.hashbytes.toString('hex'),\n          },\n        };\n      } else {\n        return 'Account not actively participating in Stacking';\n      }\n    })\n    .catch((error: any) => {\n      return error.toString();\n    });\n}\n\nasync function canStack(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let amount = new BN(args[0]);\n  let cycles = Number(args[1]);\n  let poxAddress = args[2];\n  let stxAddress = args[3];\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: txNetwork.coreApiUrl,\n  });\n  const accounts = new AccountsApi(apiConfig);\n\n  const balancePromise = accounts.getAccountBalance({\n    principal: stxAddress,\n  });\n\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  const poxInfoPromise = stacker.getPoxInfo();\n\n  const stackingEligiblePromise = stacker.canStack({ poxAddress, cycles });\n\n  return Promise.all([balancePromise, poxInfoPromise, stackingEligiblePromise])\n    .then(([balance, poxInfo, stackingEligible]) => {\n      const minAmount = new BN(poxInfo.min_amount_ustx);\n      const balanceBN = new BN(balance.stx.balance);\n\n      if (minAmount.gt(amount)) {\n        throw new Error(\n          `Stacking amount less than required minimum of ${minAmount.toString()} microstacks`\n        );\n      }\n\n      if (amount.gt(balanceBN)) {\n        throw new Error(\n          `Stacking amount greater than account balance of ${balanceBN.toString()} microstacks`\n        );\n      }\n\n      if (!stackingEligible.eligible) {\n        throw new Error(`Account cannot participate in stacking. ${stackingEligible.reason}`);\n      }\n\n      return stackingEligible;\n    })\n    .catch(error => {\n      return error;\n    });\n}\n\nasync function stack(network: CLINetworkAdapter, args: string[]): Promise<string> {\n  let amount = new BN(args[0]);\n  let cycles = Number(args[1]);\n  let poxAddress = args[2];\n  let privateKey = args[3];\n\n  // let fee = new BN(0);\n  // let nonce = new BN(0);\n\n  // if (args.length > 3 && !!args[4]) {\n  //   fee = new BN(args[4]);\n  // }\n\n  // if (args.length > 4 && !!args[5]) {\n  //   nonce = new BN(args[5]);\n  // }\n\n  const txNetwork = network.isMainnet() ? new StacksMainnet() : new StacksTestnet();\n  const txVersion = txNetwork.isMainnet() ? TransactionVersion.Mainnet : TransactionVersion.Testnet;\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: txNetwork.coreApiUrl,\n  });\n  const accounts = new AccountsApi(apiConfig);\n\n  const stxAddress = getAddressFromPrivateKey(privateKey, txVersion);\n\n  const balancePromise = accounts.getAccountBalance({\n    principal: stxAddress,\n  });\n\n  const stacker = new StackingClient(stxAddress, txNetwork);\n\n  const poxInfoPromise = stacker.getPoxInfo();\n\n  const coreInfoPromise = stacker.getCoreInfo();\n\n  const stackingEligiblePromise = stacker.canStack({ poxAddress, cycles });\n\n  return Promise.all([balancePromise, poxInfoPromise, coreInfoPromise, stackingEligiblePromise])\n    .then(([balance, poxInfo, coreInfo, stackingEligible]) => {\n      const minAmount = new BN(poxInfo.min_amount_ustx);\n      const balanceBN = new BN(balance.stx.balance);\n      const burnChainBlockHeight = coreInfo.burn_block_height;\n      const startBurnBlock = burnChainBlockHeight + 3;\n\n      if (minAmount.gt(amount)) {\n        throw new Error(\n          `Stacking amount less than required minimum of ${minAmount.toString()} microstacks`\n        );\n      }\n\n      if (amount.gt(balanceBN)) {\n        throw new Error(\n          `Stacking amount greater than account balance of ${balanceBN.toString()} microstacks`\n        );\n      }\n\n      if (!stackingEligible.eligible) {\n        throw new Error(`Account cannot participate in stacking. ${stackingEligible.reason}`);\n      }\n\n      return stacker.stack({\n        amountMicroStx: amount,\n        poxAddress,\n        cycles,\n        privateKey,\n        burnBlockHeight: startBurnBlock,\n      });\n    })\n    .then((response: TxBroadcastResult) => {\n      if (response.hasOwnProperty('error')) {\n        return response;\n      }\n      return {\n        txid: `0x${response}`,\n        transaction: generateExplorerTxPageUrl(response as string, txNetwork),\n      };\n    })\n    .catch(error => {\n      return error;\n    });\n}\n\nfunction faucetCall(_: CLINetworkAdapter, args: string[]): Promise<string> {\n  let address = args[0];\n  // console.log(address);\n\n  const apiConfig = new Configuration({\n    fetchApi: crossfetch,\n    basePath: 'https://stacks-node-api.blockstack.org',\n  });\n\n  const faucets = new FaucetsApi(apiConfig);\n\n  return faucets\n    .runFaucetStx({ address })\n    .then((faucetTx: any) => {\n      return JSONStringify({\n        txid: faucetTx.txId!,\n        transaction: generateExplorerTxPageUrl(faucetTx.txId!, new StacksTestnet()),\n      });\n    })\n    .catch((error: any) => error.toString());\n}\n\n/* Print out all documentation on usage in JSON\n */\ntype DocsArgsType = {\n  name: string;\n  type: string;\n  value: string;\n  format: string;\n};\n\ntype FormattedDocsType = {\n  command: string;\n  args: DocsArgsType[];\n  usage: string;\n  group: string;\n};\n\nfunction printDocs(_network: CLINetworkAdapter, _args: string[]): Promise<string> {\n  return Promise.resolve().then(() => {\n    const formattedDocs: FormattedDocsType[] = [];\n    const commandNames: string[] = Object.keys(CLI_ARGS.properties);\n    for (let i = 0; i < commandNames.length; i++) {\n      const commandName = commandNames[i];\n      const args: DocsArgsType[] = [];\n      const usage = CLI_ARGS.properties[commandName].help;\n      const group = CLI_ARGS.properties[commandName].group;\n\n      for (let j = 0; j < CLI_ARGS.properties[commandName].items.length; j++) {\n        const argItem = CLI_ARGS.properties[commandName].items[j];\n        args.push({\n          name: argItem.name,\n          type: argItem.type,\n          value: argItem.realtype,\n          format: argItem.pattern ? argItem.pattern : '.+',\n        } as DocsArgsType);\n      }\n\n      formattedDocs.push({\n        command: commandName,\n        args: args,\n        usage: usage,\n        group: group,\n      } as FormattedDocsType);\n    }\n    return JSONStringify(formattedDocs);\n  });\n}\n\ntype CommandFunction = (network: CLINetworkAdapter, args: string[]) => Promise<string | Buffer>;\n\n/*\n * Decrypt a backup phrase\n * args:\n * @p\n/*\n * Global set of commands\n */\nconst COMMANDS: Record<string, CommandFunction> = {\n  authenticator: authDaemon,\n  // 'announce': announce,\n  balance: balance,\n  can_stack: canStack,\n  call_contract_func: contractFunctionCall,\n  call_read_only_contract_func: readOnlyContractFunctionCall,\n  convert_address: addressConvert,\n  decrypt_keychain: decryptMnemonic,\n  deploy_contract: contractDeploy,\n  docs: printDocs,\n  encrypt_keychain: encryptMnemonic,\n  gaia_deletefile: gaiaDeleteFile,\n  gaia_dump_bucket: gaiaDumpBucket,\n  gaia_getfile: gaiaGetFile,\n  gaia_listfiles: gaiaListFiles,\n  gaia_putfile: gaiaPutFile,\n  gaia_restore_bucket: gaiaRestoreBucket,\n  gaia_sethub: gaiaSetHub,\n  get_address: getKeyAddress,\n  get_account_history: getAccountHistory,\n  get_app_keys: getAppKeys,\n  get_owner_keys: getOwnerKeys,\n  get_payment_key: getPaymentKey,\n  get_stacks_wallet_key: getStacksWalletKey,\n  make_keychain: makeKeychain,\n  profile_sign: profileSign,\n  profile_store: profileStore,\n  profile_verify: profileVerify,\n  // 'send_btc': sendBTC,\n  send_tokens: sendTokens,\n  stack: stack,\n  stacking_status: stackingStatus,\n  faucet: faucetCall,\n};\n\n/*\n * CLI main entry point\n */\nexport function CLIMain() {\n  const argv = process.argv;\n  const opts = getCLIOpts(argv);\n\n  const cmdArgs: any = checkArgs(\n    CLIOptAsStringArray(opts, '_') ? CLIOptAsStringArray(opts, '_')! : []\n  );\n  if (!cmdArgs.success) {\n    if (cmdArgs.error) {\n      console.log(cmdArgs.error);\n    }\n    if (cmdArgs.usage) {\n      if (cmdArgs.command) {\n        console.log(makeCommandUsageString(cmdArgs.command));\n        console.log('Use \"help\" to list all commands.');\n      } else {\n        console.log(USAGE);\n        console.log(makeAllCommandsList());\n      }\n    }\n    process.exit(1);\n  } else {\n    txOnly = CLIOptAsBool(opts, 'x');\n    estimateOnly = CLIOptAsBool(opts, 'e');\n    safetyChecks = !CLIOptAsBool(opts, 'U');\n    receiveFeesPeriod = opts['N'] ? parseInt(CLIOptAsString(opts, 'N')!) : receiveFeesPeriod;\n    gracePeriod = opts['G'] ? parseInt(CLIOptAsString(opts, 'N')!) : gracePeriod;\n    maxIDSearchIndex = opts['M'] ? parseInt(CLIOptAsString(opts, 'M')!) : maxIDSearchIndex;\n\n    const debug = CLIOptAsBool(opts, 'd');\n    const consensusHash = CLIOptAsString(opts, 'C');\n    const integration_test = CLIOptAsBool(opts, 'i');\n    const testnet = CLIOptAsBool(opts, 't');\n    const magicBytes = CLIOptAsString(opts, 'm');\n    const apiUrl = CLIOptAsString(opts, 'H');\n    const transactionBroadcasterUrl = CLIOptAsString(opts, 'T');\n    const nodeAPIUrl = CLIOptAsString(opts, 'I');\n    const utxoUrl = CLIOptAsString(opts, 'X');\n    const bitcoindUsername = CLIOptAsString(opts, 'u');\n    const bitcoindPassword = CLIOptAsString(opts, 'p');\n\n    if (integration_test) {\n      BLOCKSTACK_TEST = integration_test;\n    }\n\n    const configPath = CLIOptAsString(opts, 'c')\n      ? CLIOptAsString(opts, 'c')\n      : integration_test\n      ? DEFAULT_CONFIG_REGTEST_PATH\n      : testnet\n      ? DEFAULT_CONFIG_TESTNET_PATH\n      : DEFAULT_CONFIG_PATH;\n\n    const namespaceBurnAddr = CLIOptAsString(opts, 'B');\n    const feeRate = CLIOptAsString(opts, 'F') ? parseInt(CLIOptAsString(opts, 'F')!) : 0;\n    const priceToPay = CLIOptAsString(opts, 'P') ? CLIOptAsString(opts, 'P') : '0';\n    const priceUnits = CLIOptAsString(opts, 'D');\n\n    const networkType = testnet ? 'testnet' : integration_test ? 'regtest' : 'mainnet';\n\n    const configData = loadConfig(configPath!, networkType);\n\n    if (debug) {\n      configData.logConfig.level = 'debug';\n    } else {\n      configData.logConfig.level = 'info';\n    }\n    if (bitcoindUsername) {\n      configData.bitcoindUsername = bitcoindUsername;\n    }\n    if (bitcoindPassword) {\n      configData.bitcoindPassword = bitcoindPassword;\n    }\n\n    if (utxoUrl) {\n      configData.utxoServiceUrl = utxoUrl;\n    }\n\n    winston.configure({\n      level: configData.logConfig.level,\n      transports: [new winston.transports.Console(configData.logConfig)],\n    });\n\n    const cliOpts: CLI_NETWORK_OPTS = {\n      consensusHash: consensusHash ? consensusHash : null,\n      feeRate: feeRate ? feeRate : null,\n      namespaceBurnAddress: namespaceBurnAddr ? namespaceBurnAddr : null,\n      priceToPay: priceToPay ? priceToPay : null,\n      priceUnits: priceUnits ? priceUnits : null,\n      receiveFeesPeriod: receiveFeesPeriod ? receiveFeesPeriod : null,\n      gracePeriod: gracePeriod ? gracePeriod : null,\n      altAPIUrl: apiUrl ? apiUrl : configData.blockstackAPIUrl,\n      altTransactionBroadcasterUrl: transactionBroadcasterUrl\n        ? transactionBroadcasterUrl\n        : configData.broadcastServiceUrl,\n      nodeAPIUrl: nodeAPIUrl ? nodeAPIUrl : configData.blockstackNodeUrl,\n    };\n\n    // wrap command-line options\n    const wrappedNetwork = getNetwork(\n      configData,\n      !!BLOCKSTACK_TEST || !!integration_test || !!testnet\n    );\n    const blockstackNetwork = new CLINetworkAdapter(wrappedNetwork, cliOpts);\n    if (magicBytes) {\n      // blockstackNetwork.MAGIC_BYTES = magicBytes;\n    }\n\n    // blockstack.config.network = blockstackNetwork;\n    blockstack.config.logLevel = 'error';\n\n    if (cmdArgs.command === 'help') {\n      console.log(makeCommandUsageString(cmdArgs.args[0]));\n      process.exit(0);\n    }\n\n    const method = COMMANDS[cmdArgs.command];\n    let exitcode = 0;\n\n    method(blockstackNetwork, cmdArgs.args)\n      .then((result: string | Buffer) => {\n        try {\n          // if this is a JSON object with 'status', set the exit code\n          if (result instanceof Buffer) {\n            return result;\n          } else {\n            const resJson: any = JSON.parse(result);\n            if (resJson.hasOwnProperty('status') && !resJson.status) {\n              exitcode = 1;\n            }\n            return result;\n          }\n        } catch (e) {\n          return result;\n        }\n      })\n      .then((result: string | Buffer) => {\n        if (result instanceof Buffer) {\n          process.stdout.write(result);\n        } else {\n          console.log(result);\n        }\n      })\n      .then(() => {\n        if (!noExit) {\n          process.exit(exitcode);\n        }\n      })\n      .catch((e: Error) => {\n        console.error(e.stack);\n        console.error(e.message);\n        if (!noExit) {\n          process.exit(1);\n        }\n      });\n  }\n}\n","#!/usr/bin/env node\n\nimport { CLIMain } from './cli';\n\nexport { CLIMain };\n// implement just enough of window to be useful to blockstack.js.\n// do this here, so we can be *sure* it's in RAM.\nconst localStorageRAM: Record<string, any> = {};\n\n// @ts-ignore\ndeclare let global: any;\n\nglobal['window'] = {\n  location: {\n    origin: 'localhost',\n  },\n  localStorage: {\n    getItem: function(itemName: string) {\n      return localStorageRAM[itemName];\n    },\n    setItem: function(itemName: string, itemValue: any) {\n      localStorageRAM[itemName] = itemValue;\n    },\n    removeItem: function(itemName: string) {\n      delete localStorageRAM[itemName];\n    },\n  },\n};\n\nglobal['localStorage'] = global['window'].localStorage;\n\nCLIMain();\n"],"names":["runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","type","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","async","Promise","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","info","resultName","nextLoc","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","NAME_PATTERN","NAMESPACE_PATTERN","ADDRESS_CHARS","C32_ADDRESS_CHARS","ADDRESS_PATTERN","ID_ADDRESS_PATTERN","STACKS_ADDRESS_PATTERN","PRIVATE_KEY_PATTERN","PRIVATE_KEY_UNCOMPRESSED_PATTERN","PRIVATE_KEY_NOSIGN_PATTERN","PRIVATE_KEY_MULTISIG_PATTERN","PRIVATE_KEY_SEGWIT_P2SH_PATTERN","PRIVATE_KEY_PATTERN_ANY","PUBLIC_KEY_PATTERN","INT_PATTERN","ZONEFILE_HASH_PATTERN","URL_PATTERN","SUBDOMAIN_PATTERN","TXID_PATTERN","BOOLEAN_PATTERN","LOG_CONFIG_DEFAULTS","level","handleExceptions","timestamp","stringify","colorize","json","CONFIG_DEFAULTS","blockstackAPIUrl","blockstackNodeUrl","broadcastServiceUrl","utxoServiceUrl","logConfig","CONFIG_REGTEST_DEFAULTS","bitcoindPassword","bitcoindUsername","PUBLIC_TESTNET_HOST","CONFIG_TESTNET_DEFAULTS","assign","DEFAULT_CONFIG_PATH","DEFAULT_CONFIG_REGTEST_PATH","DEFAULT_CONFIG_TESTNET_PATH","DEFAULT_MAX_ID_SEARCH_INDEX","CLI_ARGS","properties","announce","items","realtype","pattern","minItems","maxItems","help","group","authenticator","balance","can_stack","call_contract_func","call_read_only_contract_func","convert_address","decrypt_keychain","deploy_contract","docs","encrypt_keychain","faucet","gaia_dump_bucket","gaia_getfile","gaia_putfile","gaia_deletefile","gaia_listfiles","gaia_restore_bucket","gaia_sethub","get_account_history","get_account_at","get_address","get_blockchain_record","get_blockchain_history","get_confirmations","get_namespace_blockchain_record","get_app_keys","get_owner_keys","get_payment_key","get_stacks_wallet_key","get_zonefile","lookup","names","make_keychain","make_zonefile","name_import","namespace_preorder","namespace_reveal","namespace_ready","price","price_namespace","profile_sign","profile_store","profile_verify","renew","register","register_addr","register_subdomain","revoke","send_btc","send_tokens","stack","stacking_status","transfer","tx_preorder","tx_register","update","whois","zonefile_push","get_did_configuration","additionalProperties","strict","USAGE","process","formatHelpString","indent","limit","helpString","lines","split","buf","pad","linebuf","words","filter","word","substring","j","formatCommandHelpLines","commandName","commandArgs","rawUsage","kwUsage","kwPad","commandInfo","console","log","toUpperCase","raw","kw","getCommandGroups","groups","commands","command","makeAllCommandsList","groupNames","sort","res","cmds","helpLineSpaces","join","helpLineCSV","map","line","trim","replace","makeAllCommandsHelp","helps","makeCommandUsageString","cmdFormat","formattedHelp","getCLIOpts","argv","opts","optsTable","remainingArgv","argvBuff","opt","argvOpt","CLIOptAsString","CLIOptAsBool","isStringArray","Array","s","reduce","x","y","CLIOptAsStringArray","getCommandArgs","argsList","commandProps","isArray","orderedArgs","foundArgs","startsWith","argName","argValue","status","mergedArgs","orderedArgIndex","arguments","checkArgs","argList","success","usage","allCommandArgs","parsedCommandArgs","commandSchema","JSON","parse","ajv","Ajv","valid","validate","errorMsg","errors","msg","schemaPath","message","params","args","loadConfig","configFile","networkType","configRet","fs","e","encryptBackupPhrase","plaintextBuffer","password","blockstack","decryptBackupPhrase","dataBuffer","ZoneFile","require","CLITransactionSigner","address","isComplete","getAddress","signTransaction","_txIn","_signingIndex","signerVersion","NullSigner","MultiSigKeySigner","redeemScript","privateKeys","Buffer","from","chunks","bitcoinjs","decompile","firstOp","m","parseInt","toASM","toBase58Check","hash160","network","layer1","scriptHash","logger","txIn","signingIndex","keysToUse","keyHex","ecPair","sign","SegwitP2SHKeySigner","witnessScript","findUTXO","utxos","private_tx","__TX","txidBuf","ins","hash","outpoint","index","txid","tx_hash","tx_output_n","getUTXOs","utxo","isCLITransactionSigner","signer","parseNullSigner","addrString","addr","parseMultiSigKeys","serializedPrivateKeys","matches","match","parts","privkeys","pk","pubkeys","getPublicKeyFromPrivateKey","multisigInfo","p2ms","output","parseSegwitP2SHKeys","p2wpkh","pubkey","p2sh","redeem","p2wsh","decodePrivateKey","serializedPrivateKey","nosignMatches","singleKeyMatches","multiKeyMatches","segwitP2SHMatches","JSONStringify","stderr","stdout","isTTY","privateKey","ecKeyPair","publicKey","getPrivateKeyAddress","pkts","coerceAddress","canonicalPrivateKey","privkey","makeProfileJWT","profileData","signedToken","wrappedToken","tokenRecords","getNameInfoEasy","nameInfoPromise","getNameInfo","nameInfo","nameLookup","includeProfile","profilePromise","zonefilePromise","zonefile","all","profile","profileObj","grace_period","expire_block","renewal_deadline","profileUrl","zonefileJSON","parseZoneFile","uri","ret","getpass","promptStr","cb","silentOutput","stream","write","_chunk","_encoding","callback","rl","readline","input","stdin","terminal","question","passwd","close","getBackupPhrase","backupPhraseOrCiphertext","p","pass","mkdirs","path","pathParts","tmpPath","statInfo","mode","S_IFDIR","code","getIDAddress","nameOrIDAddress","getOwnerKeyFromIDAddress","mnemonic","idAddress","getOwnerKeyInfo","keyInfo","getIDAppKeys","appOrigin","mnemonicOrCiphertext","getApplicationKeyInfo","appKeyInfo","appPrivateKey","extractAppKey","ownerPrivateKey","makePromptsFromArgList","expectedArgs","prompts","argToPrompt","typeString","getTypeString","isClarityAbiPrimitive","choices","isClarityAbiBuffer","isClarityAbiResponse","isClarityAbiOptional","isClarityAbiTuple","isClarityAbiList","parseClarityFunctionArgAnswers","answers","functionArgs","expectedArg","answer","answerToClarityValue","uintCV","intCV","trueCV","falseCV","standardPrincipalCV","bufferCVFromString","generateExplorerTxPageUrl","version","TransactionVersion","Testnet","c32check","STX_WALLET_COMPATIBLE_SEED_STRENGTH","walletFromMnemonic","bip39","seed","bip32","getNodePrivateKey","node","bitcoin","fromPrivateKey","wallet","identity","getIdentityAddressNode","getAddressFromBIP32Node","getPaymentKeyInfo","getBitcoinPrivateKey","BTC","STACKS","b58ToC32","getStacksWalletKeyInfo","master","child","derivePath","isTestnet","p2pkh","regtest","btcAddress","findIdentityIndex","maxIndex","getMaxIDSearchIndex","appDomain","idIndex","identityOwnerAddressNode","appsNode","getAppsNode","legacyAppPrivateKey","getLegacyAppPrivateKey","toBase58","getIdentitySalt","legacyKeyInfo","ownerKeyIndex","appAddress","coerceMainnetAddress","BN","SATOSHIS_PER_BTC","CLINetworkAdapter","optsDefault","consensusHash","feeRate","namespaceBurnAddress","priceToPay","priceUnits","receiveFeesPeriod","gracePeriod","altAPIUrl","nodeAPIUrl","altTransactionBroadcasterUrl","legacyNetwork","BlockstackNetwork","btc","optAlwaysCoerceAddress","isMainnet","pubKeyHash","testnet","setCoerceMainnetAddress","addressInfo","fromBase58Check","addressHash","addressVersion","newVersion","getFeeRate","Math","floor","getConsensusHash","c","getGracePeriod","g","getNamePrice","units","String","amount","priceInfo","getNamespacePrice","namespaceID","getNamespaceBurnAddress","namespace","useCLI","fetch","getBlockHeight","resp","blockHeight","namespaceInfo","reveal_block","ni","blockchain","did","last_txid","resolver","zonefile_hash","getBlockchainNameRecord","url","fixedAddresses","addrAttr","getNameHistory","page","historyInfo","fixedHistory","historyBlock","fixedHistoryList","historyEntry","fixedHistoryEntry","getAccountHistoryPage","broadcastTransaction","tx","broadcastZoneFile","getNamesOwned","getNetwork","configData","regTest","LocalRegtest","BitcoindAPI","username","BlockchainInfoApi","makeFakeAuthResponseToken","hubURL","associationToken","transitPrivateKey","transitPublicKey","window","localStorage","setItem","authResponse","accounts","makeAssociationToken","identityKey","appPublicKey","FOUR_MONTH_SECONDS","salt","crypto","identityPublicKey","associationTokenClaim","childToAssociate","iss","exp","Date","getTime","jsontokens","gaiaAuth","hubUrl","authSessionToken","nameLookupUrl","gaiaConnect","gaiaHubUrl","addressMainnet","addressMainnetCanonical","connectToGaiaHub","hubConfig","gaiaFindProfileName","blockstackID","gaiaReadPrefix","url_prefix","gaiaReadUrlPath","URL","profileUrlPath","profilePath","gaiaUploadProfile","gaiaHubURL","gaiaData","hubconf","gaiaUploadProfileAll","gaiaUrls","sanitizedGaiaUrls","gaiaUrl","urlInfo","protocol","host","uploadPromises","publicUrls","dataUrls","getGaiaAddressFromURL","appUrl","getGaiaAddressFromProfile","apps","existingAppAddress","SIGNIN_CSS","SIGNIN_HEADER","SIGNIN_DESC","SIGNIN_SCOPES","SIGNIN_FMT_NAME","SIGNIN_FMT_ID","SIGNIN_FOOTER","authTransitNonce","getAppPrivateKey","id","makeSignInLink","authPort","authRequest","domain_name","authResponseTmp","email","public_keys","authResponsePayload","payload","id_public","metadata","redirect_uri","scopes","nonce","tokenSigner","makeAuthPage","manifest","ids","signinBody","signinDescription","signinScopes","signinEntry","loadNamedIdentitiesLoop","identities","nameList","loadNamedIdentities","loadUnnamedIdentity","idInfo","sendJSON","data","statusCode","writeHead","end","getIdentityInfo","_appGaiaHub","_profileGaiaHub","nameInfoPromises","nameDatas","nextIndex","handleAuth","profileGaiaHub","port","req","authToken","query","appManifest","decodedAuthToken","decodedAuthPayload","authPage","updateProfileApps","appGaiaConfig","needProfileUpdate","_e","account","gaiaPrefix","changed","updateProfileAPISettings","api","gaiaHubConfig","server","handleSignIn","appGaiaHub","authResponseQP","errorStatusCode","needProfileAPIUpdate","authResponseToken","redirectUri","appHubConfig","newProfileData","profileAPIUpdate","needProfileSigninUpdate","includes","profileJWT","appUri","Location","txOnly","estimateOnly","safetyChecks","noExit","maxIDSearchIndex","BLOCKSTACK_TEST","profileSign","profileVerify","publicKeyOrAddress","profileString","profileToken","profileTokens","token","profileStore","nameOrAddress","signedProfilePath","signedProfileData","ownerAddress","ownerAddressMainnet","verifyProfilePromise","profileUrls","getAppKeys","origin","networkInfo","getOwnerKeys","getPaymentKey","keyObj","getStacksWalletKey","makeKeychain","stacksKeyInfo","txNetwork","StacksMainnet","StacksTestnet","coreApiUrl","getAccountApiUrl","response","balanceHex","substr","lockedHex","locked","unlockHeight","unlock_height","getAccountHistory","c32ToB58","accountStates","new_s","credit_value","debit_value","getAllAccountHistoryPages","results","history","concat","sendTokens","recipientAddress","tokenAmount","fee","memo","options","recipient","senderKey","makeSTXTokenTransfer","estimateTransfer","cost","serialize","transaction","contractDeploy","sourceFile","contractName","source","codeBody","postConditionMode","PostConditionMode","Allow","makeContractDeploy","estimateContractDeploy","contractFunctionCall","contractAddress","functionName","getAbi","responseAbi","abi","filtered","functions","abiArgs","prompt","makeContractCall","validateContractCall","estimateContractFunctionCall","readOnlyContractFunctionCall","senderAddress","callReadOnlyFunction","returnValue","cvToString","getKeyAddress","gaiaGetFile","decrypt","verify","toLowerCase","_userData","app","ArrayBuffer","gaiaPutFile","dataPath","gaiaPath","encrypt","urls","gaiaDeleteFile","wasSigned","gaiaListFiles","count","batchify","batchSize","currentBatch","gaiaDumpBucket","dumpDir","cwd","downloadFile","fileName","gaiaReadUrl","fileUrl","destPath","contentType","headers","get","text","arrayBuffer","filebytes","encoding","fileNames","fileCount","fileBatches","filePromiseChain","filePromises","batchPromise","gaiaRestoreBucket","fileList","uploadPromise","uploadBatchPromises","filePath","dataBuf","gaiaSetHub","ownerHubUrl","mnemonicPromise","nameProfile","ownerKeyInfo","ownerGaiaHubPromise","appGaiaHubPromise","ownerHubConfig","newAppEntry","signedProfile","addressConvert","b58addr","c32addr","testnetb58addr","testnetc32addr","mainnet","authDaemon","authServer","express","use","cors","listen","encryptMnemonic","passwordPromise","errMsg","pass1","pass2","cipherTextBuffer","decryptMnemonic","ciphertext","stackingStatus","stxAddress","stacker","StackingClient","getStatus","stacked","amount_microstx","details","first_reward_cycle","lock_period","pox_address","hashbytes","canStack","cycles","Number","poxAddress","apiConfig","Configuration","fetchApi","crossfetch","basePath","AccountsApi","balancePromise","getAccountBalance","principal","poxInfoPromise","getPoxInfo","stackingEligiblePromise","poxInfo","stackingEligible","minAmount","min_amount_ustx","balanceBN","stx","gt","eligible","reason","txVersion","Mainnet","getAddressFromPrivateKey","coreInfoPromise","getCoreInfo","coreInfo","burnChainBlockHeight","burn_block_height","startBurnBlock","amountMicroStx","burnBlockHeight","faucetCall","_","faucets","FaucetsApi","runFaucetStx","faucetTx","txId","printDocs","_network","_args","formattedDocs","commandNames","argItem","format","COMMANDS","CLIMain","cmdArgs","debug","integration_test","magicBytes","apiUrl","transactionBroadcasterUrl","utxoUrl","configPath","namespaceBurnAddr","winston","transports","Console","cliOpts","wrappedNetwork","blockstackNetwork","logLevel","exitcode","resJson","localStorageRAM","global","location","getItem","itemName","itemValue","removeItem"],"mappings":"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"}