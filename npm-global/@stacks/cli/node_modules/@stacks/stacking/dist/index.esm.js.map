{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["// import axios from 'axios';\n// import { BigNumber } from 'bignumber.js';\nimport {\n  makeContractCall,\n  bufferCV,\n  uintCV,\n  tupleCV,\n  ClarityType,\n  broadcastTransaction,\n  standardPrincipalCV,\n  ContractCallOptions,\n  UIntCV,\n  BufferCV,\n  ContractCallPayload,\n  StacksTransaction,\n  callReadOnlyFunction,\n  cvToString,\n  ClarityValue,\n  ResponseErrorCV,\n  SomeCV,\n  TupleCV,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\nimport BN from 'bn.js';\nimport { StackingErrors } from './constants';\nimport { fetchPrivate } from '@stacks/common';\nimport { decodeBtcAddress } from './utils';\n\nexport interface PoxInfo {\n  contract_id: string;\n  first_burnchain_block_height: number;\n  min_amount_ustx: string;\n  registration_window_length: 250;\n  rejection_fraction: number;\n  reward_cycle_id: number;\n  reward_cycle_length: number;\n  rejection_votes_left_required: number;\n}\n\nexport interface StackerInfo {\n  stacked: boolean;\n  details?: {\n    amount_microstx: string;\n    first_reward_cycle: number;\n    lock_period: number;\n    unlock_height: number;\n    pox_address: {\n      version: Buffer;\n      hashbytes: Buffer;\n    };\n  };\n}\n\nexport interface BlockTimeInfo {\n  mainnet: {\n    target_block_time: number;\n  };\n  testnet: {\n    target_block_time: number;\n  };\n}\n\nexport interface CoreInfo {\n  burn_block_height: number;\n  stable_pox_consensus: string;\n}\n\nexport interface BalanceInfo {\n  balance: string;\n  nonce: number;\n}\n\nexport interface StackingEligibility {\n  eligible: boolean;\n  reason?: string;\n}\n\n/**\n * Lock stx check options\n *\n * @param  {String} poxAddress - the reward Bitcoin address\n * @param  {number} cycles - number of cycles to lock\n */\nexport interface CanLockStxOptions {\n  poxAddress: string;\n  cycles: number;\n}\n\n/**\n * Lock stx options\n *\n * @param  {String} key - private key to sign transaction\n * @param  {String} poxAddress - the reward Bitcoin address\n * @param  {number} cycles - number of cycles to lock\n * @param  {BigNum} amountMicroStx - number of microstacks to lock\n * @param  {number} burnBlockHeight - the burnchain block height to begin lock\n */\nexport interface LockStxOptions {\n  privateKey: string;\n  cycles: number;\n  poxAddress: string;\n  amountMicroStx: BN;\n  burnBlockHeight: number;\n}\n\nexport class StackingClient {\n  constructor(public address: string, public network: StacksNetwork) {}\n\n  /**\n   * Get stacks node info\n   *\n   * @returns {Promise<CoreInfo>} that resolves to a CoreInfo response if the operation succeeds\n   */\n  async getCoreInfo(): Promise<CoreInfo> {\n    const url = this.network.getInfoUrl();\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node pox info\n   *\n   * @returns {Promise<PoxInfo>} that resolves to a PoxInfo response if the operation succeeds\n   */\n  async getPoxInfo(): Promise<PoxInfo> {\n    const url = this.network.getPoxInfoUrl();\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get stacks node target block time\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getTargetBlockTime(): Promise<number> {\n    const url = this.network.getBlockTimeInfoUrl();\n    const res = await fetchPrivate(url).then(res => res.json());\n\n    if (this.network.isMainnet()) {\n      return res.mainnet.target_block_time;\n    } else {\n      return res.testnet.target_block_time;\n    }\n  }\n\n  async getAccountStatus(): Promise<any> {\n    const url = this.network.getAccountApiUrl(this.address);\n    return fetchPrivate(url).then(res => res.json());\n  }\n\n  /**\n   * Get account balance\n   *\n   * @returns {Promise<BN>} that resolves to a BigNum if the operation succeeds\n   */\n  async getAccountBalance(): Promise<BN> {\n    return this.getAccountStatus().then(res => {\n      let balanceHex = res.balance;\n      if (res.balance.startsWith('0x')) {\n        balanceHex = res.balance.substr(2);\n      }\n      return new BN(balanceHex, 'hex');\n    });\n  }\n\n  /**\n   * Get reward cycle duration in seconds\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getCycleDuration(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise]).then(\n      ([poxInfo, targetBlockTime]) => {\n        return poxInfo.reward_cycle_length * targetBlockTime;\n      }\n    );\n  }\n\n  /**\n   * Get number of seconds until next reward cycle\n   *\n   * @returns {Promise<number>} that resolves to a number if the operation succeeds\n   */\n  async getSecondsUntilNextCycle(): Promise<number> {\n    const poxInfoPromise = this.getPoxInfo();\n    const targetBlockTimePromise = await this.getTargetBlockTime();\n    const coreInfoPromise = this.getCoreInfo();\n\n    return Promise.all([poxInfoPromise, targetBlockTimePromise, coreInfoPromise]).then(\n      ([poxInfo, targetBlockTime, coreInfo]) => {\n        const blocksToNextCycle =\n          poxInfo.reward_cycle_length -\n          ((coreInfo.burn_block_height - poxInfo.first_burnchain_block_height) %\n            poxInfo.reward_cycle_length);\n        const cycleDuration = poxInfo.reward_cycle_length * targetBlockTime;\n        return blocksToNextCycle * cycleDuration;\n      }\n    );\n  }\n\n  /**\n   * Check if stacking is enabled for next reward cycle\n   *\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async isStackingEnabledNextCycle(): Promise<boolean> {\n    return (await this.getPoxInfo()).rejection_votes_left_required > 0;\n  }\n\n  /**\n   * Check if account has minimum require amount of Stacks for stacking\n   *\n   * @returns {Promise<boolean>} that resolves to a bool if the operation succeeds\n   */\n  async hasMinimumStx(): Promise<boolean> {\n    const balance: BN = await this.getAccountBalance();\n    const min: BN = new BN((await this.getPoxInfo()).min_amount_ustx.toString());\n    return balance.gte(min);\n  }\n\n  /**\n   * Check if account can lock stx\n   *\n   * @param {CanLockStxOptions} options - a required lock STX options object\n   *\n   * @returns {Promise<StackingEligibility>} that resolves to a StackingEligibility object if the operation succeeds\n   */\n  async canStack({ poxAddress, cycles }: CanLockStxOptions): Promise<StackingEligibility> {\n    const balancePromise: Promise<BN> = this.getAccountBalance();\n    const poxInfoPromise = this.getPoxInfo();\n\n    return Promise.all([balancePromise, poxInfoPromise])\n      .then(([balance, poxInfo]) => {\n        const { hashMode, data } = decodeBtcAddress(poxAddress);\n        const hashModeBuffer = bufferCV(new BN(hashMode, 10).toBuffer());\n        const hashbytes = bufferCV(data);\n        const poxAddressCV = tupleCV({\n          hashbytes,\n          version: hashModeBuffer,\n        });\n\n        const [contractAddress, contractName] = poxInfo.contract_id.split('.');\n\n        return callReadOnlyFunction({\n          network: this.network,\n          contractName,\n          contractAddress,\n          functionName: 'can-stack-stx',\n          senderAddress: this.address,\n          functionArgs: [\n            poxAddressCV,\n            uintCV(balance.toString()),\n            uintCV(poxInfo.reward_cycle_id),\n            uintCV(cycles.toString()),\n          ],\n        });\n      })\n      .then((responseCV: ClarityValue) => {\n        if (responseCV.type === ClarityType.ResponseOk) {\n          return {\n            eligible: true,\n          };\n        } else {\n          const errorCV = responseCV as ResponseErrorCV;\n          return {\n            eligible: false,\n            reason: StackingErrors[+cvToString(errorCV.value)],\n          };\n        }\n      });\n  }\n\n  /**\n   * Generate and broadcast a stacking transaction to lock STX\n   *\n   * @param {LockStxOptions} options - a required lock STX options object\n   *\n   * @returns {Promise<string>} that resolves to a broadcasted txid if the operation succeeds\n   */\n  async stack({ amountMicroStx, poxAddress, cycles, privateKey, burnBlockHeight }: LockStxOptions) {\n    const poxInfo = await this.getPoxInfo();\n    const contract = poxInfo.contract_id;\n\n    const txOptions = this.getStackOptions({\n      amountMicroStx,\n      cycles,\n      poxAddress,\n      contract,\n      burnBlockHeight,\n    });\n    const tx = await makeContractCall({\n      ...txOptions,\n      senderKey: privateKey,\n    });\n\n    const res = await broadcastTransaction(tx, txOptions.network as StacksNetwork);\n    if (typeof res === 'string') {\n      return res;\n    }\n    throw new Error(`${res.error} - ${res.reason}`);\n  }\n\n  getStackOptions({\n    amountMicroStx,\n    poxAddress,\n    cycles,\n    contract,\n    burnBlockHeight,\n  }: {\n    cycles: number;\n    poxAddress: string;\n    amountMicroStx: BN;\n    contract: string;\n    burnBlockHeight: number;\n  }) {\n    const { hashMode, data } = decodeBtcAddress(poxAddress);\n    const hashModeBuffer = bufferCV(new BN(hashMode, 10).toBuffer());\n    const hashbytes = bufferCV(data);\n    const address = tupleCV({\n      hashbytes,\n      version: hashModeBuffer,\n    });\n    const [contractAddress, contractName] = contract.split('.');\n    const network = this.network;\n    const txOptions: ContractCallOptions = {\n      contractAddress,\n      contractName,\n      functionName: 'stack-stx',\n      // sum of uStx, address, burn_block_height, num_cycles\n      functionArgs: [\n        uintCV(amountMicroStx.toString(10)),\n        address,\n        uintCV(burnBlockHeight),\n        uintCV(cycles),\n      ],\n      validateWithAbi: true,\n      network,\n    };\n    return txOptions;\n  }\n\n  /**\n   * Check stacking status\n   *\n   * @returns {Promise<StackerInfo>} that resolves to a StackerInfo object if the operation succeeds\n   */\n  async getStatus(): Promise<StackerInfo> {\n    const [contractAddress, contractName] = (await this.getPoxInfo()).contract_id.split('.');\n    const account = await this.getAccountStatus();\n    const functionName = 'get-stacker-info';\n\n    return callReadOnlyFunction({\n      contractAddress,\n      contractName,\n      functionName,\n      senderAddress: this.address,\n      functionArgs: [standardPrincipalCV(this.address)],\n      network: this.network,\n    }).then((responseCV: ClarityValue) => {\n      if (responseCV.type === ClarityType.OptionalSome) {\n        const someCV = responseCV as SomeCV;\n        const tupleCV: TupleCV = someCV.value as TupleCV;\n        const poxAddress: TupleCV = tupleCV.data['pox-addr'] as TupleCV;\n        const amountMicroStx: UIntCV = tupleCV.data['amount-ustx'] as UIntCV;\n        const firstRewardCycle: UIntCV = tupleCV.data['first-reward-cycle'] as UIntCV;\n        const lockPeriod: UIntCV = tupleCV.data['lock-period'] as UIntCV;\n        const version: BufferCV = poxAddress.data['version'] as BufferCV;\n        const hashbytes: BufferCV = poxAddress.data['hashbytes'] as BufferCV;\n\n        return {\n          stacked: true,\n          details: {\n            amount_microstx: amountMicroStx.value.toString(),\n            first_reward_cycle: firstRewardCycle.value.toNumber(),\n            lock_period: lockPeriod.value.toNumber(),\n            unlock_height: account.unlock_height,\n            pox_address: {\n              version: version.buffer,\n              hashbytes: hashbytes.buffer,\n            },\n          },\n        };\n      } else if (responseCV.type === ClarityType.OptionalNone) {\n        return {\n          stacked: false,\n        };\n      } else {\n        throw new Error(`Error fetching stacker info`);\n      }\n    });\n  }\n\n  /**\n   * Adjust microstacks amount for locking after taking into account transaction fees\n   *\n   * @returns {StacksTransaction} that resolves to a transaction object if the operation succeeds\n   */\n  modifyLockTxFee({ tx, amountMicroStx }: { tx: StacksTransaction; amountMicroStx: BN }) {\n    const fee = tx.auth.getFee() as BN;\n    (tx.payload as ContractCallPayload).functionArgs[0] = uintCV(\n      new BN(amountMicroStx.toString(10), 10).sub(fee).toBuffer()\n    );\n    return tx;\n  }\n}\n"],"names":["StackingClient","address","network","getCoreInfo","url","getInfoUrl","fetchPrivate","then","res","json","getPoxInfo","getPoxInfoUrl","getTargetBlockTime","getBlockTimeInfoUrl","isMainnet","mainnet","target_block_time","testnet","getAccountStatus","getAccountApiUrl","getAccountBalance","balanceHex","balance","startsWith","substr","BN","getCycleDuration","poxInfoPromise","targetBlockTimePromise","Promise","all","poxInfo","targetBlockTime","reward_cycle_length","getSecondsUntilNextCycle","coreInfoPromise","coreInfo","blocksToNextCycle","burn_block_height","first_burnchain_block_height","cycleDuration","isStackingEnabledNextCycle","rejection_votes_left_required","hasMinimumStx","min_amount_ustx","toString","min","gte","canStack","poxAddress","cycles","balancePromise","decodeBtcAddress","hashMode","data","hashModeBuffer","bufferCV","toBuffer","hashbytes","poxAddressCV","tupleCV","version","contract_id","split","contractAddress","contractName","callReadOnlyFunction","functionName","senderAddress","functionArgs","uintCV","reward_cycle_id","responseCV","type","ClarityType","ResponseOk","eligible","errorCV","reason","StackingErrors","cvToString","value","stack","amountMicroStx","privateKey","burnBlockHeight","contract","txOptions","getStackOptions","makeContractCall","senderKey","tx","broadcastTransaction","Error","error","validateWithAbi","getStatus","account","standardPrincipalCV","OptionalSome","someCV","firstRewardCycle","lockPeriod","stacked","details","amount_microstx","first_reward_cycle","toNumber","lock_period","unlock_height","pox_address","buffer","OptionalNone","modifyLockTxFee","fee","auth","getFee","payload","sub"],"mappings":"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"}