{"version":3,"file":"utils.esm.js","sources":["../src/utils.ts"],"sourcesContent":["import { AddressHashMode } from '@stacks/transactions';\nimport { address } from 'bitcoinjs-lib';\nimport BN from 'bn.js';\nimport { StackingErrors } from './constants';\n\nexport function getAddressHashMode(btcAddress: string) {\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    if (data.length === 32) {\n      return AddressHashMode.SerializeP2WSH;\n    } else {\n      return AddressHashMode.SerializeP2WPKH;\n    }\n  } else {\n    const { version } = address.fromBase58Check(btcAddress);\n    switch (version) {\n      case 0:\n        return AddressHashMode.SerializeP2PKH;\n      case 111:\n        return AddressHashMode.SerializeP2PKH;\n      case 5:\n        return AddressHashMode.SerializeP2SH;\n      case 196:\n        return AddressHashMode.SerializeP2SH;\n      default:\n        throw new Error('Invalid pox address version');\n    }\n  }\n}\n\nexport function decodeBtcAddress(btcAddress: string) {\n  const hashMode = getAddressHashMode(btcAddress);\n  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {\n    const { data } = address.fromBech32(btcAddress);\n    return {\n      hashMode,\n      data,\n    };\n  } else {\n    const { hash } = address.fromBase58Check(btcAddress);\n    return {\n      hashMode,\n      data: hash,\n    };\n  }\n}\n\nexport function getBTCAddress(version: Buffer, checksum: Buffer) {\n  const btcAddress = address.toBase58Check(checksum, new BN(version).toNumber());\n  return btcAddress;\n}\n\nexport function getErrorString(error: StackingErrors): string {\n  switch (error) {\n    case StackingErrors.ERR_STACKING_UNREACHABLE:\n      return 'Stacking unreachable';\n    case StackingErrors.ERR_STACKING_INSUFFICIENT_FUNDS:\n      return 'Insufficient funds';\n    case StackingErrors.ERR_STACKING_INVALID_LOCK_PERIOD:\n      return 'Invalid lock period';\n    case StackingErrors.ERR_STACKING_ALREADY_STACKED:\n      return 'Account already stacked. Concurrent stacking not allowed.';\n    case StackingErrors.ERR_STACKING_NO_SUCH_PRINCIPAL:\n      return 'Principal does not exist';\n    case StackingErrors.ERR_STACKING_EXPIRED:\n      return 'Stacking expired';\n    case StackingErrors.ERR_STACKING_STX_LOCKED:\n      return 'STX balance is locked';\n    case StackingErrors.ERR_STACKING_PERMISSION_DENIED:\n      return 'Permission denied';\n    case StackingErrors.ERR_STACKING_THRESHOLD_NOT_MET:\n      return 'Stacking threshold not met';\n    case StackingErrors.ERR_STACKING_POX_ADDRESS_IN_USE:\n      return 'PoX address already in use';\n    case StackingErrors.ERR_STACKING_INVALID_POX_ADDRESS:\n      return 'Invalid PoX address';\n    case StackingErrors.ERR_STACKING_ALREADY_REJECTED:\n      return 'Stacking already rejected';\n    case StackingErrors.ERR_STACKING_INVALID_AMOUNT:\n      return 'Invalid amount';\n    case StackingErrors.ERR_NOT_ALLOWED:\n      return 'Stacking not allowed';\n    case StackingErrors.ERR_STACKING_ALREADY_DELEGATED:\n      return 'Already delegated';\n    case StackingErrors.ERR_DELEGATION_EXPIRES_DURING_LOCK:\n      return 'Delegation expires during lock period';\n    case StackingErrors.ERR_DELEGATION_TOO_MUCH_LOCKED:\n      return 'Delegation too much locked';\n    case StackingErrors.ERR_DELEGATION_POX_ADDR_REQUIRED:\n      return 'PoX address required for delegation';\n    case StackingErrors.ERR_INVALID_START_BURN_HEIGHT:\n      return 'Invalid start burn height';\n  }\n}\n"],"names":["getAddressHashMode","btcAddress","startsWith","address","fromBech32","data","length","AddressHashMode","SerializeP2WSH","SerializeP2WPKH","fromBase58Check","version","SerializeP2PKH","SerializeP2SH","Error","decodeBtcAddress","hashMode","hash"],"mappings":";;;;;SAKgBA,mBAAmBC;AACjC,MAAIA,UAAU,CAACC,UAAX,CAAsB,KAAtB,KAAgCD,UAAU,CAACC,UAAX,CAAsB,KAAtB,CAApC,EAAkE;AAAA,4BAC/CC,OAAO,CAACC,UAAR,CAAmBH,UAAnB,CAD+C;AAAA,QACxDI,IADwD,qBACxDA,IADwD;;AAEhE,QAAIA,IAAI,CAACC,MAAL,KAAgB,EAApB,EAAwB;AACtB,aAAOC,eAAe,CAACC,cAAvB;AACD,KAFD,MAEO;AACL,aAAOD,eAAe,CAACE,eAAvB;AACD;AACF,GAPD,MAOO;AAAA,gCACeN,OAAO,CAACO,eAAR,CAAwBT,UAAxB,CADf;AAAA,QACGU,OADH,yBACGA,OADH;;AAEL,YAAQA,OAAR;AACE,WAAK,CAAL;AACE,eAAOJ,eAAe,CAACK,cAAvB;;AACF,WAAK,GAAL;AACE,eAAOL,eAAe,CAACK,cAAvB;;AACF,WAAK,CAAL;AACE,eAAOL,eAAe,CAACM,aAAvB;;AACF,WAAK,GAAL;AACE,eAAON,eAAe,CAACM,aAAvB;;AACF;AACE,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AAVJ;AAYD;AACF;SAEeC,iBAAiBd;AAC/B,MAAMe,QAAQ,GAAGhB,kBAAkB,CAACC,UAAD,CAAnC;;AACA,MAAIA,UAAU,CAACC,UAAX,CAAsB,KAAtB,KAAgCD,UAAU,CAACC,UAAX,CAAsB,KAAtB,CAApC,EAAkE;AAAA,6BAC/CC,OAAO,CAACC,UAAR,CAAmBH,UAAnB,CAD+C;AAAA,QACxDI,IADwD,sBACxDA,IADwD;;AAEhE,WAAO;AACLW,MAAAA,QAAQ,EAARA,QADK;AAELX,MAAAA,IAAI,EAAJA;AAFK,KAAP;AAID,GAND,MAMO;AAAA,iCACYF,OAAO,CAACO,eAAR,CAAwBT,UAAxB,CADZ;AAAA,QACGgB,IADH,0BACGA,IADH;;AAEL,WAAO;AACLD,MAAAA,QAAQ,EAARA,QADK;AAELX,MAAAA,IAAI,EAAEY;AAFD,KAAP;AAID;AACF;;;;"}