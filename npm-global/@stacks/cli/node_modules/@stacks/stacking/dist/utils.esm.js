import { AddressHashMode } from '@stacks/transactions';
import 'bn.js';
import './constants.esm.js';
import { address } from 'bitcoinjs-lib';

function getAddressHashMode(btcAddress) {
  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {
    var _address$fromBech = address.fromBech32(btcAddress),
        data = _address$fromBech.data;

    if (data.length === 32) {
      return AddressHashMode.SerializeP2WSH;
    } else {
      return AddressHashMode.SerializeP2WPKH;
    }
  } else {
    var _address$fromBase58Ch = address.fromBase58Check(btcAddress),
        version = _address$fromBase58Ch.version;

    switch (version) {
      case 0:
        return AddressHashMode.SerializeP2PKH;

      case 111:
        return AddressHashMode.SerializeP2PKH;

      case 5:
        return AddressHashMode.SerializeP2SH;

      case 196:
        return AddressHashMode.SerializeP2SH;

      default:
        throw new Error('Invalid pox address version');
    }
  }
}
function decodeBtcAddress(btcAddress) {
  var hashMode = getAddressHashMode(btcAddress);

  if (btcAddress.startsWith('bc1') || btcAddress.startsWith('tb1')) {
    var _address$fromBech2 = address.fromBech32(btcAddress),
        data = _address$fromBech2.data;

    return {
      hashMode: hashMode,
      data: data
    };
  } else {
    var _address$fromBase58Ch2 = address.fromBase58Check(btcAddress),
        hash = _address$fromBase58Ch2.hash;

    return {
      hashMode: hashMode,
      data: hash
    };
  }
}

export { decodeBtcAddress, getAddressHashMode };
//# sourceMappingURL=utils.esm.js.map
