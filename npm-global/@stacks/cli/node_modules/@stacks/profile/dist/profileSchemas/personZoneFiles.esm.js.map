{"version":3,"file":"personZoneFiles.esm.js","sources":["../../src/profileSchemas/personZoneFiles.ts"],"sourcesContent":["// @ts-ignore: Could not find a declaration file for module\nimport { parseZoneFile } from 'zone-file';\n\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nimport { fetchPrivate } from '@stacks/common';\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n * @param callback\n *\n * @ignore\n */\nexport function resolveZoneFileToPerson(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  callback: (profile: any) => void\n) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchPrivate(tokenFileUrl)\n      .then(response => response.text())\n      .then(responseText => JSON.parse(responseText))\n      .then(responseJson => {\n        const tokenRecords = responseJson;\n        const token = tokenRecords[0].token;\n        const profile = extractProfile(token, publicKeyOrAddress);\n\n        callback(profile);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}\n"],"names":["resolveZoneFileToPerson","zoneFile","publicKeyOrAddress","callback","zoneFileJson","parseZoneFile","hasOwnProperty","Error","e","console","error","tokenFileUrl","Object","keys","length","getTokenFileUrl","profile","JSON","parse","person","Person","fromLegacyFormat","warn","fetchPrivate","then","response","text","responseText","responseJson","tokenRecords","token","extractProfile"],"mappings":";;;;;SAegBA,wBACdC,UACAC,oBACAC;AAEA,MAAIC,YAAY,GAAG,IAAnB;;AACA,MAAI;AACFA,IAAAA,YAAY,GAAGC,aAAa,CAACJ,QAAD,CAA5B;;AACA,QAAI,CAACG,YAAY,CAACE,cAAb,CAA4B,SAA5B,CAAL,EAA6C;AAC3CF,MAAAA,YAAY,GAAG,IAAf;AACA,YAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAED,MAAIG,YAAY,GAAG,IAAnB;;AACA,MAAIP,YAAY,IAAIQ,MAAM,CAACC,IAAP,CAAYT,YAAZ,EAA0BU,MAA1B,GAAmC,CAAvD,EAA0D;AACxDH,IAAAA,YAAY,GAAGI,eAAe,CAACX,YAAD,CAA9B;AACD,GAFD,MAEO;AACL,QAAIY,OAAO,GAAG,IAAd;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWjB,QAAX,CAAV;AACA,UAAMkB,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwBL,OAAxB,CAAf;AACAA,MAAAA,OAAO,GAAGG,MAAM,CAACH,OAAP,EAAV;AACD,KAJD,CAIE,OAAON,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACa,IAAR,CAAaZ,KAAb;AACD;;AACDP,IAAAA,QAAQ,CAACa,OAAD,CAAR;AACA;AACD;;AAED,MAAIL,YAAJ,EAAkB;AAChBY,IAAAA,YAAY,CAACZ,YAAD,CAAZ,CACGa,IADH,CACQ,UAAAC,QAAQ;AAAA,aAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,KADhB,EAEGF,IAFH,CAEQ,UAAAG,YAAY;AAAA,aAAIV,IAAI,CAACC,KAAL,CAAWS,YAAX,CAAJ;AAAA,KAFpB,EAGGH,IAHH,CAGQ,UAAAI,YAAY;AAChB,UAAMC,YAAY,GAAGD,YAArB;AACA,UAAME,KAAK,GAAGD,YAAY,CAAC,CAAD,CAAZ,CAAgBC,KAA9B;AACA,UAAMd,OAAO,GAAGe,cAAc,CAACD,KAAD,EAAQ5B,kBAAR,CAA9B;AAEAC,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACD,KATH,WAUS,UAAAN,KAAK;AACVD,MAAAA,OAAO,CAACa,IAAR,CAAaZ,KAAb;AACD,KAZH;AAaD,GAdD,MAcO;AACLD,IAAAA,OAAO,CAACa,IAAR,CAAa,0BAAb;AACAnB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF;;;;"}