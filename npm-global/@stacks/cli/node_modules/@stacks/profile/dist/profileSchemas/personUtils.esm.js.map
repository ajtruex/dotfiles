{"version":3,"file":"personUtils.esm.js","sources":["../../src/profileSchemas/personUtils.ts"],"sourcesContent":["export function getName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n  return name;\n}\n\n/**\n *\n * @ignore\n */\nexport function getGivenName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n  return givenName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getFamilyName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n  return familyName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getDescription(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n  if (profile.description) {\n    description = profile.description;\n  }\n  return description;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAvatarUrl(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl: string | null = null;\n  if (profile.image) {\n    profile.image.map((image: any) => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n  return avatarContentUrl;\n}\n\n/**\n *\n * @ignore\n */\nexport function getVerifiedAccounts(profile: any, verifications?: any[]) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts: any[] = [];\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map((account: any) => {\n      let accountIsValid = false;\n      let proofUrl = null;\n\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n        if (\n          verification.valid &&\n          verification.service === account.service &&\n          verification.identifier === account.identifier &&\n          verification.proofUrl\n        ) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n  return filteredAccounts;\n}\n\n/**\n *\n * @ignore\n */\nexport function getOrganizations(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations: any[] = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\n\n/**\n *\n * @ignore\n */\nexport function getConnections(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAddress(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\n\n/**\n *\n * @ignore\n */\nexport function getBirthDate(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}\n"],"names":["getName","profile","name","givenName","familyName","getGivenName","nameParts","split","slice","join","getFamilyName","pop","getDescription","description","getAvatarUrl","avatarContentUrl","image","map","contentUrl","getVerifiedAccounts","verifications","filteredAccounts","hasOwnProperty","account","accountIsValid","proofUrl","verification","proof_url","valid","service","identifier","push","getOrganizations","organizations","worksFor","getConnections","connections","knows","getAddress","addressString","addressParts","address","streetAddress","addressLocality","postalCode","addressCountry","length","getBirthDate","monthNames","birthDateString","date","Date","birthDate","getMonth","getDate","getFullYear"],"mappings":"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"}