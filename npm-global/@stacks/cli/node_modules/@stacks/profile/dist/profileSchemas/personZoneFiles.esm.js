import { fetchPrivate } from '@stacks/common';
import { extractProfile } from '../profileTokens.esm.js';
import { parseZoneFile } from 'zone-file';
import { getTokenFileUrl, Person } from '../profile.esm.js';

function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback) {
  var zoneFileJson = null;

  try {
    zoneFileJson = parseZoneFile(zoneFile);

    if (!zoneFileJson.hasOwnProperty('$origin')) {
      zoneFileJson = null;
      throw new Error('zone file is missing an origin');
    }
  } catch (e) {
    console.error(e);
  }

  var tokenFileUrl = null;

  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {
    tokenFileUrl = getTokenFileUrl(zoneFileJson);
  } else {
    var profile = null;

    try {
      profile = JSON.parse(zoneFile);
      var person = Person.fromLegacyFormat(profile);
      profile = person.profile();
    } catch (error) {
      console.warn(error);
    }

    callback(profile);
    return;
  }

  if (tokenFileUrl) {
    fetchPrivate(tokenFileUrl).then(function (response) {
      return response.text();
    }).then(function (responseText) {
      return JSON.parse(responseText);
    }).then(function (responseJson) {
      var tokenRecords = responseJson;
      var token = tokenRecords[0].token;
      var profile = extractProfile(token, publicKeyOrAddress);
      callback(profile);
    })["catch"](function (error) {
      console.warn(error);
    });
  } else {
    console.warn('Token file url not found');
    callback({});
  }
}

export { resolveZoneFileToPerson };
//# sourceMappingURL=personZoneFiles.esm.js.map
