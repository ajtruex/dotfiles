import { inheritsLoose as _inheritsLoose } from './_virtual/_rollupPluginBabelHelpers.js';
import { fetchPrivate, Logger } from '@stacks/common';
import { signProfileToken, extractProfile } from './profileTokens.esm.js';
import { getPersonFromLegacyFormat } from './profileSchemas/personLegacy.esm.js';
import { makeZoneFile, parseZoneFile } from 'zone-file';
import { getName, getGivenName, getFamilyName, getDescription, getAvatarUrl, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations } from './profileSchemas/personUtils.esm.js';
import { validate } from 'schema-inspector';

var schemaDefinition = {
  type: 'object',
  properties: {
    '@context': {
      type: 'string',
      optional: true
    },
    '@type': {
      type: 'string'
    }
  }
};
var Profile = /*#__PURE__*/function () {
  function Profile(profile) {
    if (profile === void 0) {
      profile = {};
    }

    this._profile = Object.assign({}, {
      '@context': 'http://schema.org/'
    }, profile);
  }

  var _proto = Profile.prototype;

  _proto.toJSON = function toJSON() {
    return Object.assign({}, this._profile);
  };

  _proto.toToken = function toToken(privateKey) {
    return signProfileToken(this.toJSON(), privateKey);
  };

  Profile.validateSchema = function validateSchema(profile, strict) {
    if (strict === void 0) {
      strict = false;
    }

    schemaDefinition.strict = strict;
    return validate(schemaDefinition, profile);
  };

  Profile.fromToken = function fromToken(token, publicKeyOrAddress) {
    if (publicKeyOrAddress === void 0) {
      publicKeyOrAddress = null;
    }

    var profile = extractProfile(token, publicKeyOrAddress);
    return new Profile(profile);
  };

  Profile.makeZoneFile = function makeZoneFile(domainName, tokenFileURL) {
    return makeProfileZoneFile(domainName, tokenFileURL);
  };

  return Profile;
}();
var Person = /*#__PURE__*/function (_Profile) {
  _inheritsLoose(Person, _Profile);

  function Person(profile) {
    var _this;

    if (profile === void 0) {
      profile = {};
    }

    _this = _Profile.call(this, profile) || this;
    _this._profile = Object.assign({}, {
      '@type': 'Person'
    }, _this._profile);
    return _this;
  }

  Person.validateSchema = function validateSchema(profile, strict) {
    return validate(schemaDefinition, profile);
  };

  Person.fromToken = function fromToken(token, publicKeyOrAddress) {
    if (publicKeyOrAddress === void 0) {
      publicKeyOrAddress = null;
    }

    var profile = extractProfile(token, publicKeyOrAddress);
    return new Person(profile);
  };

  Person.fromLegacyFormat = function fromLegacyFormat(legacyProfile) {
    var profile = getPersonFromLegacyFormat(legacyProfile);
    return new Person(profile);
  };

  var _proto2 = Person.prototype;

  _proto2.toJSON = function toJSON() {
    return {
      profile: this.profile(),
      name: this.name(),
      givenName: this.givenName(),
      familyName: this.familyName(),
      description: this.description(),
      avatarUrl: this.avatarUrl(),
      verifiedAccounts: this.verifiedAccounts(),
      address: this.address(),
      birthDate: this.birthDate(),
      connections: this.connections(),
      organizations: this.organizations()
    };
  };

  _proto2.profile = function profile() {
    return Object.assign({}, this._profile);
  };

  _proto2.name = function name() {
    return getName(this.profile());
  };

  _proto2.givenName = function givenName() {
    return getGivenName(this.profile());
  };

  _proto2.familyName = function familyName() {
    return getFamilyName(this.profile());
  };

  _proto2.description = function description() {
    return getDescription(this.profile());
  };

  _proto2.avatarUrl = function avatarUrl() {
    return getAvatarUrl(this.profile());
  };

  _proto2.verifiedAccounts = function verifiedAccounts(verifications) {
    return getVerifiedAccounts(this.profile(), verifications);
  };

  _proto2.address = function address() {
    return getAddress(this.profile());
  };

  _proto2.birthDate = function birthDate() {
    return getBirthDate(this.profile());
  };

  _proto2.connections = function connections() {
    return getConnections(this.profile());
  };

  _proto2.organizations = function organizations() {
    return getOrganizations(this.profile());
  };

  return Person;
}(Profile);
function makeProfileZoneFile(origin, tokenFileUrl) {
  if (!tokenFileUrl.includes('://')) {
    throw new Error('Invalid token file url');
  }

  var urlScheme = tokenFileUrl.split('://')[0];
  var urlParts = tokenFileUrl.split('://')[1].split('/');
  var domain = urlParts[0];
  var pathname = "/" + urlParts.slice(1).join('/');
  var zoneFile = {
    $origin: origin,
    $ttl: 3600,
    uri: [{
      name: '_http._tcp',
      priority: 10,
      weight: 1,
      target: urlScheme + "://" + domain + pathname
    }]
  };
  var zoneFileTemplate = '{$origin}\n{$ttl}\n{uri}\n';
  return makeZoneFile(zoneFile, zoneFileTemplate);
}
function getTokenFileUrl(zoneFileJson) {
  if (!zoneFileJson.hasOwnProperty('uri')) {
    return null;
  }

  if (!Array.isArray(zoneFileJson.uri)) {
    return null;
  }

  if (zoneFileJson.uri.length < 1) {
    return null;
  }

  var firstUriRecord = zoneFileJson.uri[0];

  if (!firstUriRecord.hasOwnProperty('target')) {
    return null;
  }

  var tokenFileUrl = firstUriRecord.target;

  if (tokenFileUrl.startsWith('https')) ; else if (tokenFileUrl.startsWith('http')) ; else {
    tokenFileUrl = "https://" + tokenFileUrl;
  }

  return tokenFileUrl;
}
function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {
  return new Promise(function (resolve, reject) {
    var zoneFileJson = null;

    try {
      zoneFileJson = parseZoneFile(zoneFile);

      if (!zoneFileJson.hasOwnProperty('$origin')) {
        zoneFileJson = null;
      }
    } catch (e) {
      reject(e);
    }

    var tokenFileUrl = null;

    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {
      tokenFileUrl = getTokenFileUrl(zoneFileJson);
    } else {
      var profile = null;

      try {
        profile = JSON.parse(zoneFile);
        profile = Person.fromLegacyFormat(profile).profile();
      } catch (error) {
        reject(error);
      }

      resolve(profile);
      return;
    }

    if (tokenFileUrl) {
      fetchPrivate(tokenFileUrl).then(function (response) {
        return response.text();
      }).then(function (responseText) {
        return JSON.parse(responseText);
      }).then(function (responseJson) {
        var tokenRecords = responseJson;
        var profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);
        resolve(profile);
      })["catch"](function (error) {
        Logger.error("resolveZoneFileToProfile: error fetching token file " + tokenFileUrl + ": " + error);
        reject(error);
      });
    } else {
      Logger.debug('Token file url not found. Resolving to blank profile.');
      resolve({});
    }
  });
}

export { Person, Profile, getTokenFileUrl, makeProfileZoneFile, resolveZoneFileToProfile };
//# sourceMappingURL=profile.esm.js.map
