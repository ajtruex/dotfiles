{"version":3,"file":"profile.umd.development.js","sources":["../src/profileTokens.ts","../src/profileSchemas/personLegacy.ts","../src/profileSchemas/personZoneFiles.ts","../src/profileSchemas/personUtils.ts","../src/profile.ts"],"sourcesContent":["import { ECPair } from 'bitcoinjs-lib';\nimport { decodeToken, SECP256K1Client, TokenSigner, TokenVerifier } from 'jsontokens';\nimport { TokenInterface } from 'jsontokens/lib/decode';\nimport { nextYear, makeUUID4 } from '@stacks/common';\nimport { ecPairToAddress } from '@stacks/encryption';\n\n/**\n * Signs a profile token\n * @param {Object} profile - the JSON of the profile to be signed\n * @param {String} privateKey - the signing private key\n * @param {Object} subject - the entity that the information is about\n * @param {Object} issuer - the entity that is issuing the token\n * @param {String} signingAlgorithm - the signing algorithm to use\n * @param {Date} issuedAt - the time of issuance of the token\n * @param {Date} expiresAt - the time of expiration of the token\n * @returns {Object} - the signed profile token\n *\n */\nexport function signProfileToken(\n  profile: any,\n  privateKey: string,\n  subject?: any,\n  issuer?: any,\n  signingAlgorithm = 'ES256K',\n  issuedAt = new Date(),\n  expiresAt = nextYear()\n): string {\n  if (signingAlgorithm !== 'ES256K') {\n    throw new Error('Signing algorithm not supported');\n  }\n\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  if (!subject) {\n    subject = { publicKey };\n  }\n\n  if (!issuer) {\n    issuer = { publicKey };\n  }\n\n  const tokenSigner = new TokenSigner(signingAlgorithm, privateKey);\n\n  const payload = {\n    jti: makeUUID4(),\n    iat: issuedAt.toISOString(),\n    exp: expiresAt.toISOString(),\n    subject,\n    issuer,\n    claim: profile,\n  };\n\n  return tokenSigner.sign(payload);\n}\n\n/**\n * Wraps a token for a profile token file\n * @param {String} token - the token to be wrapped\n * @returns {Object} - including `token` and `decodedToken`\n */\nexport function wrapProfileToken(token: string) {\n  return {\n    token,\n    decodedToken: decodeToken(token),\n  };\n}\n\n/**\n * Verifies a profile token\n * @param {String} token - the token to be verified\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the verified, decoded profile token\n * @throws {Error} - throws an error if token verification fails\n */\nexport function verifyProfileToken(token: string, publicKeyOrAddress: string): TokenInterface {\n  const decodedToken = decodeToken(token);\n  const payload = decodedToken.payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n\n  // Inspect and verify the subject\n  if (payload.hasOwnProperty('subject') && payload.subject) {\n    if (!payload.subject.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have a subject public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have a subject\");\n  }\n\n  // Inspect and verify the issuer\n  if (payload.hasOwnProperty('issuer') && payload.issuer) {\n    if (!payload.issuer.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have an issuer public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have an issuer\");\n  }\n\n  // Inspect and verify the claim\n  if (!payload.hasOwnProperty('claim')) {\n    throw new Error(\"Token doesn't have a claim\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const issuerPublicKey = (payload.issuer as Record<string, string>).publicKey as string;\n  const publicKeyBuffer = Buffer.from(issuerPublicKey, 'hex');\n\n  const compressedKeyPair = ECPair.fromPublicKey(publicKeyBuffer, { compressed: true });\n  const compressedAddress = ecPairToAddress(compressedKeyPair);\n  const uncompressedKeyPair = ECPair.fromPublicKey(publicKeyBuffer, { compressed: false });\n  const uncompressedAddress = ecPairToAddress(uncompressedKeyPair);\n\n  if (publicKeyOrAddress === issuerPublicKey) {\n    // pass\n  } else if (publicKeyOrAddress === compressedAddress) {\n    // pass\n  } else if (publicKeyOrAddress === uncompressedAddress) {\n    // pass\n  } else {\n    throw new Error('Token issuer public key does not match the verifying value');\n  }\n\n  const tokenVerifier = new TokenVerifier(decodedToken.header.alg as string, issuerPublicKey);\n  if (!tokenVerifier) {\n    throw new Error('Invalid token verifier');\n  }\n\n  const tokenVerified = tokenVerifier.verify(token);\n  if (!tokenVerified) {\n    throw new Error('Token verification failed');\n  }\n\n  return decodedToken;\n}\n\n/**\n * Extracts a profile from an encoded token and optionally verifies it,\n * if `publicKeyOrAddress` is provided.\n * @param {String} token - the token to be extracted\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the profile extracted from the encoded token\n * @throws {Error} - if the token isn't signed by the provided `publicKeyOrAddress`\n */\nexport function extractProfile(\n  token: string,\n  publicKeyOrAddress: string | null = null\n): Record<string, any> {\n  let decodedToken;\n  if (publicKeyOrAddress) {\n    decodedToken = verifyProfileToken(token, publicKeyOrAddress);\n  } else {\n    decodedToken = decodeToken(token);\n  }\n\n  let profile = {};\n  if (decodedToken.hasOwnProperty('payload')) {\n    const payload = decodedToken.payload;\n    if (typeof payload === 'string') {\n      throw new Error('Unexpected token payload type of string');\n    }\n    if (payload.hasOwnProperty('claim')) {\n      profile = payload.claim as object;\n    }\n  }\n\n  return profile;\n}\n","/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\nfunction formatAccount(serviceName: string, data: any) {\n  let proofUrl;\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl,\n  };\n}\n\n/**\n *\n * @param profile\n *\n * @ignore\n */\nexport function getPersonFromLegacyFormat(profile: any) {\n  const profileData: {\n    ['@type']: string;\n    account?: any[];\n    name?: string;\n    description?: string;\n    address?: {\n      ['@type']: string;\n      addressLocality: string;\n    };\n    image?: any[];\n    website?: Array<{\n      ['@type']: string;\n      url: string;\n    }>;\n  } = {\n    '@type': 'Person',\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted,\n      };\n    }\n\n    const images = [];\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url,\n      });\n    }\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url,\n      });\n    }\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [\n        {\n          '@type': 'WebSite',\n          url: profile.website,\n        },\n      ];\n    }\n\n    const accounts = [];\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address,\n      });\n    }\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain,\n          });\n        }\n      }\n    }\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url,\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}\n","// @ts-ignore: Could not find a declaration file for module\nimport { parseZoneFile } from 'zone-file';\n\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nimport { fetchPrivate } from '@stacks/common';\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n * @param callback\n *\n * @ignore\n */\nexport function resolveZoneFileToPerson(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  callback: (profile: any) => void\n) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchPrivate(tokenFileUrl)\n      .then(response => response.text())\n      .then(responseText => JSON.parse(responseText))\n      .then(responseJson => {\n        const tokenRecords = responseJson;\n        const token = tokenRecords[0].token;\n        const profile = extractProfile(token, publicKeyOrAddress);\n\n        callback(profile);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}\n","export function getName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n  return name;\n}\n\n/**\n *\n * @ignore\n */\nexport function getGivenName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n  return givenName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getFamilyName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n  return familyName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getDescription(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n  if (profile.description) {\n    description = profile.description;\n  }\n  return description;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAvatarUrl(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl: string | null = null;\n  if (profile.image) {\n    profile.image.map((image: any) => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n  return avatarContentUrl;\n}\n\n/**\n *\n * @ignore\n */\nexport function getVerifiedAccounts(profile: any, verifications?: any[]) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts: any[] = [];\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map((account: any) => {\n      let accountIsValid = false;\n      let proofUrl = null;\n\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n        if (\n          verification.valid &&\n          verification.service === account.service &&\n          verification.identifier === account.identifier &&\n          verification.proofUrl\n        ) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n  return filteredAccounts;\n}\n\n/**\n *\n * @ignore\n */\nexport function getOrganizations(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations: any[] = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\n\n/**\n *\n * @ignore\n */\nexport function getConnections(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAddress(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\n\n/**\n *\n * @ignore\n */\nexport function getBirthDate(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}\n","import { signProfileToken, extractProfile } from './profileTokens';\n\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport {\n  getName,\n  getFamilyName,\n  getGivenName,\n  getAvatarUrl,\n  getDescription,\n  getVerifiedAccounts,\n  getAddress,\n  getBirthDate,\n  getConnections,\n  getOrganizations,\n} from './profileSchemas/personUtils';\n\n// TODO: bring into this monorepo/convert to ts\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\n\n// Could not find a declaration file for module\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport * as inspector from 'schema-inspector';\n\nimport { Logger, fetchPrivate } from '@stacks/common';\n\nconst schemaDefinition: { [key: string]: any } = {\n  type: 'object',\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n  },\n};\n\n/**\n * Represents a user profile\n *\n */\nexport class Profile {\n  _profile: { [key: string]: any };\n\n  constructor(profile = {}) {\n    this._profile = Object.assign(\n      {},\n      {\n        '@context': 'http://schema.org/',\n      },\n      profile\n    );\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey: string): string {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile: any, strict = false): any {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Profile {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName: string, tokenFileURL: string): string {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n}\n\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n    '@id': { type: 'string', optional: true },\n    name: { type: 'string', optional: true },\n    givenName: { type: 'string', optional: true },\n    familyName: { type: 'string', optional: true },\n    description: { type: 'string', optional: true },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          name: { type: 'string', optional: true },\n          contentUrl: { type: 'string', optional: true },\n        },\n      },\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          url: { type: 'string', optional: true },\n        },\n      },\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          service: { type: 'string', optional: true },\n          identifier: { type: 'string', optional: true },\n          proofType: { type: 'string', optional: true },\n          proofUrl: { type: 'string', optional: true },\n          proofMessage: { type: 'string', optional: true },\n          proofSignature: { type: 'string', optional: true },\n        },\n      },\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': { type: 'string' },\n        streetAddress: { type: 'string', optional: true },\n        addressLocality: { type: 'string', optional: true },\n        postalCode: { type: 'string', optional: true },\n        addressCountry: { type: 'string', optional: true },\n      },\n    },\n    birthDate: { type: 'string', optional: true },\n    taxID: { type: 'string', optional: true },\n  },\n};\n\n/**\n * @ignore\n */\nexport class Person extends Profile {\n  constructor(profile = {}) {\n    super(profile);\n    this._profile = Object.assign(\n      {},\n      {\n        '@type': 'Person',\n      },\n      this._profile\n    );\n  }\n\n  static validateSchema(profile: any, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Person {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile: any) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations(),\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications?: any[]) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n}\n\n/**\n *\n * @param origin\n * @param tokenFileUrl\n *\n * @ignore\n */\nexport function makeProfileZoneFile(origin: string, tokenFileUrl: string): string {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [\n      {\n        name: '_http._tcp',\n        priority: 10,\n        weight: 1,\n        target: `${urlScheme}://${domain}${pathname}`,\n      },\n    ],\n  };\n\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\n\n/**\n *\n * @param zoneFileJson\n *\n * @ignore\n */\nexport function getTokenFileUrl(zoneFileJson: any): string | null {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n  const firstUriRecord = zoneFileJson.uri[0];\n\n  if (!firstUriRecord.hasOwnProperty('target')) {\n    return null;\n  }\n  let tokenFileUrl = firstUriRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {\n    // pass\n  } else if (tokenFileUrl.startsWith('http')) {\n    // pass\n  } else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n *\n * @ignore\n */\nexport function resolveZoneFileToProfile(zoneFile: any, publicKeyOrAddress: string) {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl: string | null = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      let profile = null;\n      try {\n        profile = JSON.parse(zoneFile);\n        profile = Person.fromLegacyFormat(profile).profile();\n      } catch (error) {\n        reject(error);\n      }\n      resolve(profile);\n      return;\n    }\n\n    if (tokenFileUrl) {\n      fetchPrivate(tokenFileUrl)\n        .then(response => response.text())\n        .then(responseText => JSON.parse(responseText))\n        .then(responseJson => {\n          const tokenRecords = responseJson;\n          const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n          resolve(profile);\n        })\n        .catch(error => {\n          Logger.error(\n            `resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`\n          );\n          reject(error);\n        });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}\n"],"names":["signProfileToken","profile","privateKey","subject","issuer","signingAlgorithm","issuedAt","expiresAt","Date","nextYear","Error","publicKey","SECP256K1Client","derivePublicKey","tokenSigner","TokenSigner","payload","jti","makeUUID4","iat","toISOString","exp","claim","sign","wrapProfileToken","token","decodedToken","decodeToken","verifyProfileToken","publicKeyOrAddress","hasOwnProperty","issuerPublicKey","publicKeyBuffer","Buffer","from","compressedKeyPair","ECPair","fromPublicKey","compressed","compressedAddress","ecPairToAddress","uncompressedKeyPair","uncompressedAddress","tokenVerifier","TokenVerifier","header","alg","tokenVerified","verify","extractProfile","formatAccount","serviceName","data","proofUrl","proof","url","service","identifier","username","proofType","getPersonFromLegacyFormat","profileData","name","formatted","bio","description","location","address","addressLocality","images","avatar","push","contentUrl","cover","length","image","website","accounts","bitcoin","role","twitter","facebook","github","auth","publicKeychain","pgp","fingerprint","account","resolveZoneFileToPerson","zoneFile","callback","zoneFileJson","parseZoneFile","e","console","error","tokenFileUrl","Object","keys","getTokenFileUrl","JSON","parse","person","Person","fromLegacyFormat","warn","fetchPrivate","then","response","text","responseText","responseJson","tokenRecords","getName","givenName","familyName","getGivenName","nameParts","split","slice","join","getFamilyName","pop","getDescription","getAvatarUrl","avatarContentUrl","map","getVerifiedAccounts","verifications","filteredAccounts","accountIsValid","verification","proof_url","valid","getOrganizations","organizations","worksFor","getConnections","connections","knows","getAddress","addressString","addressParts","streetAddress","postalCode","addressCountry","getBirthDate","monthNames","birthDateString","date","birthDate","getMonth","getDate","getFullYear","schemaDefinition","type","properties","optional","Profile","_profile","assign","toJSON","toToken","validateSchema","strict","inspector","fromToken","makeZoneFile","domainName","tokenFileURL","makeProfileZoneFile","legacyProfile","avatarUrl","verifiedAccounts","origin","includes","urlScheme","urlParts","domain","pathname","$origin","$ttl","uri","priority","weight","target","zoneFileTemplate","Array","isArray","firstUriRecord","startsWith","resolveZoneFileToProfile","Promise","resolve","reject","Logger","debug"],"mappings":"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"}