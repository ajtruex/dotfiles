{"version":3,"file":"profile.cjs.development.js","sources":["../src/profileTokens.ts","../src/profileSchemas/personLegacy.ts","../src/profileSchemas/personZoneFiles.ts","../src/profileSchemas/personUtils.ts","../src/profile.ts"],"sourcesContent":["import { ECPair } from 'bitcoinjs-lib';\nimport { decodeToken, SECP256K1Client, TokenSigner, TokenVerifier } from 'jsontokens';\nimport { TokenInterface } from 'jsontokens/lib/decode';\nimport { nextYear, makeUUID4 } from '@stacks/common';\nimport { ecPairToAddress } from '@stacks/encryption';\n\n/**\n * Signs a profile token\n * @param {Object} profile - the JSON of the profile to be signed\n * @param {String} privateKey - the signing private key\n * @param {Object} subject - the entity that the information is about\n * @param {Object} issuer - the entity that is issuing the token\n * @param {String} signingAlgorithm - the signing algorithm to use\n * @param {Date} issuedAt - the time of issuance of the token\n * @param {Date} expiresAt - the time of expiration of the token\n * @returns {Object} - the signed profile token\n *\n */\nexport function signProfileToken(\n  profile: any,\n  privateKey: string,\n  subject?: any,\n  issuer?: any,\n  signingAlgorithm = 'ES256K',\n  issuedAt = new Date(),\n  expiresAt = nextYear()\n): string {\n  if (signingAlgorithm !== 'ES256K') {\n    throw new Error('Signing algorithm not supported');\n  }\n\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  if (!subject) {\n    subject = { publicKey };\n  }\n\n  if (!issuer) {\n    issuer = { publicKey };\n  }\n\n  const tokenSigner = new TokenSigner(signingAlgorithm, privateKey);\n\n  const payload = {\n    jti: makeUUID4(),\n    iat: issuedAt.toISOString(),\n    exp: expiresAt.toISOString(),\n    subject,\n    issuer,\n    claim: profile,\n  };\n\n  return tokenSigner.sign(payload);\n}\n\n/**\n * Wraps a token for a profile token file\n * @param {String} token - the token to be wrapped\n * @returns {Object} - including `token` and `decodedToken`\n */\nexport function wrapProfileToken(token: string) {\n  return {\n    token,\n    decodedToken: decodeToken(token),\n  };\n}\n\n/**\n * Verifies a profile token\n * @param {String} token - the token to be verified\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the verified, decoded profile token\n * @throws {Error} - throws an error if token verification fails\n */\nexport function verifyProfileToken(token: string, publicKeyOrAddress: string): TokenInterface {\n  const decodedToken = decodeToken(token);\n  const payload = decodedToken.payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n\n  // Inspect and verify the subject\n  if (payload.hasOwnProperty('subject') && payload.subject) {\n    if (!payload.subject.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have a subject public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have a subject\");\n  }\n\n  // Inspect and verify the issuer\n  if (payload.hasOwnProperty('issuer') && payload.issuer) {\n    if (!payload.issuer.hasOwnProperty('publicKey')) {\n      throw new Error(\"Token doesn't have an issuer public key\");\n    }\n  } else {\n    throw new Error(\"Token doesn't have an issuer\");\n  }\n\n  // Inspect and verify the claim\n  if (!payload.hasOwnProperty('claim')) {\n    throw new Error(\"Token doesn't have a claim\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  const issuerPublicKey = (payload.issuer as Record<string, string>).publicKey as string;\n  const publicKeyBuffer = Buffer.from(issuerPublicKey, 'hex');\n\n  const compressedKeyPair = ECPair.fromPublicKey(publicKeyBuffer, { compressed: true });\n  const compressedAddress = ecPairToAddress(compressedKeyPair);\n  const uncompressedKeyPair = ECPair.fromPublicKey(publicKeyBuffer, { compressed: false });\n  const uncompressedAddress = ecPairToAddress(uncompressedKeyPair);\n\n  if (publicKeyOrAddress === issuerPublicKey) {\n    // pass\n  } else if (publicKeyOrAddress === compressedAddress) {\n    // pass\n  } else if (publicKeyOrAddress === uncompressedAddress) {\n    // pass\n  } else {\n    throw new Error('Token issuer public key does not match the verifying value');\n  }\n\n  const tokenVerifier = new TokenVerifier(decodedToken.header.alg as string, issuerPublicKey);\n  if (!tokenVerifier) {\n    throw new Error('Invalid token verifier');\n  }\n\n  const tokenVerified = tokenVerifier.verify(token);\n  if (!tokenVerified) {\n    throw new Error('Token verification failed');\n  }\n\n  return decodedToken;\n}\n\n/**\n * Extracts a profile from an encoded token and optionally verifies it,\n * if `publicKeyOrAddress` is provided.\n * @param {String} token - the token to be extracted\n * @param {String} publicKeyOrAddress - the public key or address of the\n *   keypair that is thought to have signed the token\n * @returns {Object} - the profile extracted from the encoded token\n * @throws {Error} - if the token isn't signed by the provided `publicKeyOrAddress`\n */\nexport function extractProfile(\n  token: string,\n  publicKeyOrAddress: string | null = null\n): Record<string, any> {\n  let decodedToken;\n  if (publicKeyOrAddress) {\n    decodedToken = verifyProfileToken(token, publicKeyOrAddress);\n  } else {\n    decodedToken = decodeToken(token);\n  }\n\n  let profile = {};\n  if (decodedToken.hasOwnProperty('payload')) {\n    const payload = decodedToken.payload;\n    if (typeof payload === 'string') {\n      throw new Error('Unexpected token payload type of string');\n    }\n    if (payload.hasOwnProperty('claim')) {\n      profile = payload.claim as object;\n    }\n  }\n\n  return profile;\n}\n","/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\nfunction formatAccount(serviceName: string, data: any) {\n  let proofUrl;\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl,\n  };\n}\n\n/**\n *\n * @param profile\n *\n * @ignore\n */\nexport function getPersonFromLegacyFormat(profile: any) {\n  const profileData: {\n    ['@type']: string;\n    account?: any[];\n    name?: string;\n    description?: string;\n    address?: {\n      ['@type']: string;\n      addressLocality: string;\n    };\n    image?: any[];\n    website?: Array<{\n      ['@type']: string;\n      url: string;\n    }>;\n  } = {\n    '@type': 'Person',\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted,\n      };\n    }\n\n    const images = [];\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url,\n      });\n    }\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url,\n      });\n    }\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [\n        {\n          '@type': 'WebSite',\n          url: profile.website,\n        },\n      ];\n    }\n\n    const accounts = [];\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address,\n      });\n    }\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain,\n          });\n        }\n      }\n    }\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url,\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}\n","// @ts-ignore: Could not find a declaration file for module\nimport { parseZoneFile } from 'zone-file';\n\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nimport { fetchPrivate } from '@stacks/common';\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n * @param callback\n *\n * @ignore\n */\nexport function resolveZoneFileToPerson(\n  zoneFile: any,\n  publicKeyOrAddress: string,\n  callback: (profile: any) => void\n) {\n  let zoneFileJson = null;\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchPrivate(tokenFileUrl)\n      .then(response => response.text())\n      .then(responseText => JSON.parse(responseText))\n      .then(responseJson => {\n        const tokenRecords = responseJson;\n        const token = tokenRecords[0].token;\n        const profile = extractProfile(token, publicKeyOrAddress);\n\n        callback(profile);\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}\n","export function getName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n  return name;\n}\n\n/**\n *\n * @ignore\n */\nexport function getGivenName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n  return givenName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getFamilyName(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n  return familyName;\n}\n\n/**\n *\n * @ignore\n */\nexport function getDescription(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n  if (profile.description) {\n    description = profile.description;\n  }\n  return description;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAvatarUrl(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl: string | null = null;\n  if (profile.image) {\n    profile.image.map((image: any) => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n  return avatarContentUrl;\n}\n\n/**\n *\n * @ignore\n */\nexport function getVerifiedAccounts(profile: any, verifications?: any[]) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts: any[] = [];\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map((account: any) => {\n      let accountIsValid = false;\n      let proofUrl = null;\n\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n        if (\n          verification.valid &&\n          verification.service === account.service &&\n          verification.identifier === account.identifier &&\n          verification.proofUrl\n        ) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n  return filteredAccounts;\n}\n\n/**\n *\n * @ignore\n */\nexport function getOrganizations(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations: any[] = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\n\n/**\n *\n * @ignore\n */\nexport function getConnections(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\n\n/**\n *\n * @ignore\n */\nexport function getAddress(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\n\n/**\n *\n * @ignore\n */\nexport function getBirthDate(profile: any) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}\n","import { signProfileToken, extractProfile } from './profileTokens';\n\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport {\n  getName,\n  getFamilyName,\n  getGivenName,\n  getAvatarUrl,\n  getDescription,\n  getVerifiedAccounts,\n  getAddress,\n  getBirthDate,\n  getConnections,\n  getOrganizations,\n} from './profileSchemas/personUtils';\n\n// TODO: bring into this monorepo/convert to ts\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\n\n// Could not find a declaration file for module\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport * as inspector from 'schema-inspector';\n\nimport { Logger, fetchPrivate } from '@stacks/common';\n\nconst schemaDefinition: { [key: string]: any } = {\n  type: 'object',\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n  },\n};\n\n/**\n * Represents a user profile\n *\n */\nexport class Profile {\n  _profile: { [key: string]: any };\n\n  constructor(profile = {}) {\n    this._profile = Object.assign(\n      {},\n      {\n        '@context': 'http://schema.org/',\n      },\n      profile\n    );\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey: string): string {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile: any, strict = false): any {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Profile {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName: string, tokenFileURL: string): string {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n}\n\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': { type: 'string', optional: true },\n    '@type': { type: 'string' },\n    '@id': { type: 'string', optional: true },\n    name: { type: 'string', optional: true },\n    givenName: { type: 'string', optional: true },\n    familyName: { type: 'string', optional: true },\n    description: { type: 'string', optional: true },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          name: { type: 'string', optional: true },\n          contentUrl: { type: 'string', optional: true },\n        },\n      },\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          url: { type: 'string', optional: true },\n        },\n      },\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          service: { type: 'string', optional: true },\n          identifier: { type: 'string', optional: true },\n          proofType: { type: 'string', optional: true },\n          proofUrl: { type: 'string', optional: true },\n          proofMessage: { type: 'string', optional: true },\n          proofSignature: { type: 'string', optional: true },\n        },\n      },\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': { type: 'string' },\n          '@id': { type: 'string', optional: true },\n        },\n      },\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': { type: 'string' },\n        streetAddress: { type: 'string', optional: true },\n        addressLocality: { type: 'string', optional: true },\n        postalCode: { type: 'string', optional: true },\n        addressCountry: { type: 'string', optional: true },\n      },\n    },\n    birthDate: { type: 'string', optional: true },\n    taxID: { type: 'string', optional: true },\n  },\n};\n\n/**\n * @ignore\n */\nexport class Person extends Profile {\n  constructor(profile = {}) {\n    super(profile);\n    this._profile = Object.assign(\n      {},\n      {\n        '@type': 'Person',\n      },\n      this._profile\n    );\n  }\n\n  static validateSchema(profile: any, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token: string, publicKeyOrAddress: string | null = null): Person {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile: any) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations(),\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications?: any[]) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n}\n\n/**\n *\n * @param origin\n * @param tokenFileUrl\n *\n * @ignore\n */\nexport function makeProfileZoneFile(origin: string, tokenFileUrl: string): string {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [\n      {\n        name: '_http._tcp',\n        priority: 10,\n        weight: 1,\n        target: `${urlScheme}://${domain}${pathname}`,\n      },\n    ],\n  };\n\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\n\n/**\n *\n * @param zoneFileJson\n *\n * @ignore\n */\nexport function getTokenFileUrl(zoneFileJson: any): string | null {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n  const firstUriRecord = zoneFileJson.uri[0];\n\n  if (!firstUriRecord.hasOwnProperty('target')) {\n    return null;\n  }\n  let tokenFileUrl = firstUriRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {\n    // pass\n  } else if (tokenFileUrl.startsWith('http')) {\n    // pass\n  } else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\n\n/**\n *\n * @param zoneFile\n * @param publicKeyOrAddress\n *\n * @ignore\n */\nexport function resolveZoneFileToProfile(zoneFile: any, publicKeyOrAddress: string) {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl: string | null = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      let profile = null;\n      try {\n        profile = JSON.parse(zoneFile);\n        profile = Person.fromLegacyFormat(profile).profile();\n      } catch (error) {\n        reject(error);\n      }\n      resolve(profile);\n      return;\n    }\n\n    if (tokenFileUrl) {\n      fetchPrivate(tokenFileUrl)\n        .then(response => response.text())\n        .then(responseText => JSON.parse(responseText))\n        .then(responseJson => {\n          const tokenRecords = responseJson;\n          const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n          resolve(profile);\n        })\n        .catch(error => {\n          Logger.error(\n            `resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`\n          );\n          reject(error);\n        });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}\n"],"names":["signProfileToken","profile","privateKey","subject","issuer","signingAlgorithm","issuedAt","expiresAt","Date","nextYear","Error","publicKey","SECP256K1Client","derivePublicKey","tokenSigner","TokenSigner","payload","jti","makeUUID4","iat","toISOString","exp","claim","sign","wrapProfileToken","token","decodedToken","decodeToken","verifyProfileToken","publicKeyOrAddress","hasOwnProperty","issuerPublicKey","publicKeyBuffer","Buffer","from","compressedKeyPair","ECPair","fromPublicKey","compressed","compressedAddress","ecPairToAddress","uncompressedKeyPair","uncompressedAddress","tokenVerifier","TokenVerifier","header","alg","tokenVerified","verify","extractProfile","formatAccount","serviceName","data","proofUrl","proof","url","service","identifier","username","proofType","getPersonFromLegacyFormat","profileData","name","formatted","bio","description","location","address","addressLocality","images","avatar","push","contentUrl","cover","length","image","website","accounts","bitcoin","role","twitter","facebook","github","auth","publicKeychain","pgp","fingerprint","account","resolveZoneFileToPerson","zoneFile","callback","zoneFileJson","parseZoneFile","e","console","error","tokenFileUrl","Object","keys","getTokenFileUrl","JSON","parse","person","Person","fromLegacyFormat","warn","fetchPrivate","then","response","text","responseText","responseJson","tokenRecords","getName","givenName","familyName","getGivenName","nameParts","split","slice","join","getFamilyName","pop","getDescription","getAvatarUrl","avatarContentUrl","map","getVerifiedAccounts","verifications","filteredAccounts","accountIsValid","verification","proof_url","valid","getOrganizations","organizations","worksFor","getConnections","connections","knows","getAddress","addressString","addressParts","streetAddress","postalCode","addressCountry","getBirthDate","monthNames","birthDateString","date","birthDate","getMonth","getDate","getFullYear","schemaDefinition","type","properties","optional","Profile","_profile","assign","toJSON","toToken","validateSchema","strict","inspector","fromToken","makeZoneFile","domainName","tokenFileURL","makeProfileZoneFile","legacyProfile","avatarUrl","verifiedAccounts","origin","includes","urlScheme","urlParts","domain","pathname","$origin","$ttl","uri","priority","weight","target","zoneFileTemplate","Array","isArray","firstUriRecord","startsWith","resolveZoneFileToProfile","Promise","resolve","reject","Logger","debug"],"mappings":"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"}