"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnchainApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class BurnchainApi extends runtime.BaseAPI {
    /**
     * Get a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    async getBurnchainRewardListRaw(requestParameters) {
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.BurnchainRewardListResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of recent burnchain (e.g. Bitcoin) reward recipients with the associated amounts and block info
     * Get recent burnchain reward recipients
     */
    async getBurnchainRewardList(requestParameters) {
        const response = await this.getBurnchainRewardListRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    async getBurnchainRewardListByAddressRaw(requestParameters) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getBurnchainRewardListByAddress.');
        }
        const queryParameters = {};
        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }
        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.BurnchainRewardListResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of recent burnchain (e.g. Bitcoin) rewards for the given recipient with the associated amounts and block info
     * Get recent burnchain reward for the given recipient
     */
    async getBurnchainRewardListByAddress(requestParameters) {
        const response = await this.getBurnchainRewardListByAddressRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get the total burnchain (e.g. Bitcoin) rewards for the given recipient
     * Get total burnchain rewards for the given recipient
     */
    async getBurnchainRewardsTotalByAddressRaw(requestParameters) {
        if (requestParameters.address === null || requestParameters.address === undefined) {
            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getBurnchainRewardsTotalByAddress.');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/extended/v1/burnchain/rewards/{address}/total`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.BurnchainRewardsTotalFromJSON(jsonValue));
    }
    /**
     * Get the total burnchain (e.g. Bitcoin) rewards for the given recipient
     * Get total burnchain rewards for the given recipient
     */
    async getBurnchainRewardsTotalByAddress(requestParameters) {
        const response = await this.getBurnchainRewardsTotalByAddressRaw(requestParameters);
        return await response.value();
    }
}
exports.BurnchainApi = BurnchainApi;
//# sourceMappingURL=BurnchainApi.js.map