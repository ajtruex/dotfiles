/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ContractInterfaceResponse, ContractSourceResponse, MapEntryResponse, ReadOnlyFunctionArgs, ReadOnlyFunctionSuccessResponse } from '../models';
export interface CallReadOnlyFunctionRequest {
    contractAddress: string;
    contractName: string;
    functionName: string;
    readOnlyFunctionArgs: ReadOnlyFunctionArgs;
}
export interface GetContractByIdRequest {
    contractId: string;
}
export interface GetContractDataMapEntryRequest {
    contractAddress: string;
    contractName: string;
    mapName: string;
    key: string;
    proof?: number;
}
export interface GetContractEventsByIdRequest {
    contractId: string;
    limit?: number;
    offset?: number;
}
export interface GetContractInterfaceRequest {
    contractAddress: string;
    contractName: string;
}
export interface GetContractSourceRequest {
    contractAddress: string;
    contractName: string;
    proof?: number;
}
/**
 * SmartContractsApi - interface
 *
 * @export
 * @interface SmartContractsApiInterface
 */
export interface SmartContractsApiInterface {
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * @summary Call read-only function
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {string} functionName Function name
     * @param {ReadOnlyFunctionArgs} readOnlyFunctionArgs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    callReadOnlyFunctionRaw(requestParameters: CallReadOnlyFunctionRequest): Promise<runtime.ApiResponse<ReadOnlyFunctionSuccessResponse>>;
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunction(requestParameters: CallReadOnlyFunctionRequest): Promise<ReadOnlyFunctionSuccessResponse>;
    /**
     * Get contract info using the contract ID
     * @summary Get contract info
     * @param {string} contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractByIdRaw(requestParameters: GetContractByIdRequest): Promise<runtime.ApiResponse<object>>;
    /**
     * Get contract info using the contract ID
     * Get contract info
     */
    getContractById(requestParameters: GetContractByIdRequest): Promise<object>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * @summary Get specific data-map inside a contract
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {string} mapName Map name
     * @param {string} key Hex string serialization of the lookup key (which should be a Clarity value)
     * @param {number} [proof] Returns object without the proof field when set to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractDataMapEntryRaw(requestParameters: GetContractDataMapEntryRequest): Promise<runtime.ApiResponse<MapEntryResponse>>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntry(requestParameters: GetContractDataMapEntryRequest): Promise<MapEntryResponse>;
    /**
     * Get contract events using a contract ID
     * @summary Get contract events
     * @param {string} contractId Contract identifier formatted as &#x60;&lt;contract_address&gt;.&lt;contract_name&gt;&#x60;
     * @param {number} [limit] max number of contract events to fetch
     * @param {number} [offset] index of first contract event to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractEventsByIdRaw(requestParameters: GetContractEventsByIdRequest): Promise<runtime.ApiResponse<object>>;
    /**
     * Get contract events using a contract ID
     * Get contract events
     */
    getContractEventsById(requestParameters: GetContractEventsByIdRequest): Promise<object>;
    /**
     * Get contract interface using a `contract_address` and `contract name`
     * @summary Get contract interface
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractInterfaceRaw(requestParameters: GetContractInterfaceRequest): Promise<runtime.ApiResponse<ContractInterfaceResponse>>;
    /**
     * Get contract interface using a `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterface(requestParameters: GetContractInterfaceRequest): Promise<ContractInterfaceResponse>;
    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * @summary Get contract source
     * @param {string} contractAddress Stacks address
     * @param {string} contractName Contract name
     * @param {number} [proof] Returns object without the proof field if set to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SmartContractsApiInterface
     */
    getContractSourceRaw(requestParameters: GetContractSourceRequest): Promise<runtime.ApiResponse<ContractSourceResponse>>;
    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSource(requestParameters: GetContractSourceRequest): Promise<ContractSourceResponse>;
}
/**
 *
 */
export declare class SmartContractsApi extends runtime.BaseAPI implements SmartContractsApiInterface {
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunctionRaw(requestParameters: CallReadOnlyFunctionRequest): Promise<runtime.ApiResponse<ReadOnlyFunctionSuccessResponse>>;
    /**
     * Call a read-only public function on a given smart contract.  The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:
     * Call read-only function
     */
    callReadOnlyFunction(requestParameters: CallReadOnlyFunctionRequest): Promise<ReadOnlyFunctionSuccessResponse>;
    /**
     * Get contract info using the contract ID
     * Get contract info
     */
    getContractByIdRaw(requestParameters: GetContractByIdRequest): Promise<runtime.ApiResponse<object>>;
    /**
     * Get contract info using the contract ID
     * Get contract info
     */
    getContractById(requestParameters: GetContractByIdRequest): Promise<object>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntryRaw(requestParameters: GetContractDataMapEntryRequest): Promise<runtime.ApiResponse<MapEntryResponse>>;
    /**
     * Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].  The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.  In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.
     * Get specific data-map inside a contract
     */
    getContractDataMapEntry(requestParameters: GetContractDataMapEntryRequest): Promise<MapEntryResponse>;
    /**
     * Get contract events using a contract ID
     * Get contract events
     */
    getContractEventsByIdRaw(requestParameters: GetContractEventsByIdRequest): Promise<runtime.ApiResponse<object>>;
    /**
     * Get contract events using a contract ID
     * Get contract events
     */
    getContractEventsById(requestParameters: GetContractEventsByIdRequest): Promise<object>;
    /**
     * Get contract interface using a `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterfaceRaw(requestParameters: GetContractInterfaceRequest): Promise<runtime.ApiResponse<ContractInterfaceResponse>>;
    /**
     * Get contract interface using a `contract_address` and `contract name`
     * Get contract interface
     */
    getContractInterface(requestParameters: GetContractInterfaceRequest): Promise<ContractInterfaceResponse>;
    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSourceRaw(requestParameters: GetContractSourceRequest): Promise<runtime.ApiResponse<ContractSourceResponse>>;
    /**
     * Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data
     * Get contract source
     */
    getContractSource(requestParameters: GetContractSourceRequest): Promise<ContractSourceResponse>;
}
