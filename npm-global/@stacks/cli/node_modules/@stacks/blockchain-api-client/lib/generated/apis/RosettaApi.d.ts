/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { RosettaAccountBalanceRequest, RosettaAccountBalanceResponse, RosettaBlockRequest, RosettaBlockResponse, RosettaBlockTransactionRequest, RosettaBlockTransactionResponse, RosettaConstructionCombineRequest, RosettaConstructionCombineResponse, RosettaConstructionDeriveRequest, RosettaConstructionDeriveResponse, RosettaConstructionHashRequest, RosettaConstructionHashResponse, RosettaConstructionMetadataRequest, RosettaConstructionMetadataResponse, RosettaConstructionParseRequest, RosettaConstructionParseResponse, RosettaConstructionPayloadResponse, RosettaConstructionPayloadsRequest, RosettaConstructionPreprocessRequest, RosettaConstructionPreprocessResponse, RosettaConstructionSubmitRequest, RosettaConstructionSubmitResponse, RosettaMempoolRequest, RosettaMempoolResponse, RosettaMempoolTransactionRequest, RosettaMempoolTransactionResponse, RosettaNetworkListResponse, RosettaNetworkOptionsResponse, RosettaOptionsRequest, RosettaStatusRequest } from '../models';
export interface RosettaAccountBalanceOperationRequest {
    rosettaAccountBalanceRequest: RosettaAccountBalanceRequest;
}
export interface RosettaBlockOperationRequest {
    rosettaBlockRequest: RosettaBlockRequest;
}
export interface RosettaBlockTransactionOperationRequest {
    rosettaBlockTransactionRequest: RosettaBlockTransactionRequest;
}
export interface RosettaConstructionCombineOperationRequest {
    rosettaConstructionCombineRequest: RosettaConstructionCombineRequest;
}
export interface RosettaConstructionDeriveOperationRequest {
    rosettaConstructionDeriveRequest: RosettaConstructionDeriveRequest;
}
export interface RosettaConstructionHashOperationRequest {
    rosettaConstructionHashRequest: RosettaConstructionHashRequest;
}
export interface RosettaConstructionMetadataOperationRequest {
    rosettaConstructionMetadataRequest: RosettaConstructionMetadataRequest;
}
export interface RosettaConstructionParseOperationRequest {
    rosettaConstructionParseRequest: RosettaConstructionParseRequest;
}
export interface RosettaConstructionPayloadsOperationRequest {
    rosettaConstructionPayloadsRequest: RosettaConstructionPayloadsRequest;
}
export interface RosettaConstructionPreprocessOperationRequest {
    rosettaConstructionPreprocessRequest: RosettaConstructionPreprocessRequest;
}
export interface RosettaConstructionSubmitOperationRequest {
    rosettaConstructionSubmitRequest: RosettaConstructionSubmitRequest;
}
export interface RosettaMempoolOperationRequest {
    rosettaMempoolRequest: RosettaMempoolRequest;
}
export interface RosettaMempoolTransactionOperationRequest {
    rosettaMempoolTransactionRequest: RosettaMempoolTransactionRequest;
}
export interface RosettaNetworkOptionsRequest {
    rosettaOptionsRequest: RosettaOptionsRequest;
}
export interface RosettaNetworkStatusRequest {
    rosettaStatusRequest: RosettaStatusRequest;
}
/**
 * RosettaApi - interface
 *
 * @export
 * @interface RosettaApiInterface
 */
export interface RosettaApiInterface {
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * @summary Get an Account Balance
     * @param {RosettaAccountBalanceRequest} rosettaAccountBalanceRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaAccountBalanceRaw(requestParameters: RosettaAccountBalanceOperationRequest): Promise<runtime.ApiResponse<RosettaAccountBalanceResponse>>;
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalance(requestParameters: RosettaAccountBalanceOperationRequest): Promise<RosettaAccountBalanceResponse>;
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * @summary Get a Block
     * @param {RosettaBlockRequest} rosettaBlockRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaBlockRaw(requestParameters: RosettaBlockOperationRequest): Promise<runtime.ApiResponse<RosettaBlockResponse>>;
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * Get a Block
     */
    rosettaBlock(requestParameters: RosettaBlockOperationRequest): Promise<RosettaBlockResponse>;
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * @summary Get a Block Transaction
     * @param {RosettaBlockTransactionRequest} rosettaBlockTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaBlockTransactionRaw(requestParameters: RosettaBlockTransactionOperationRequest): Promise<runtime.ApiResponse<RosettaBlockTransactionResponse>>;
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransaction(requestParameters: RosettaBlockTransactionOperationRequest): Promise<RosettaBlockTransactionResponse>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * @summary Create Network Transaction from Signatures
     * @param {RosettaConstructionCombineRequest} rosettaConstructionCombineRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionCombineRaw(requestParameters: RosettaConstructionCombineOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionCombineResponse>>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombine(requestParameters: RosettaConstructionCombineOperationRequest): Promise<RosettaConstructionCombineResponse>;
    /**
     * TODO
     * @summary Derive an AccountIdentifier from a PublicKey
     * @param {RosettaConstructionDeriveRequest} rosettaConstructionDeriveRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionDeriveRaw(requestParameters: RosettaConstructionDeriveOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionDeriveResponse>>;
    /**
     * TODO
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDerive(requestParameters: RosettaConstructionDeriveOperationRequest): Promise<RosettaConstructionDeriveResponse>;
    /**
     * TODO
     * @summary Get the Hash of a Signed Transaction
     * @param {RosettaConstructionHashRequest} rosettaConstructionHashRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionHashRaw(requestParameters: RosettaConstructionHashOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionHashResponse>>;
    /**
     * TODO
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHash(requestParameters: RosettaConstructionHashOperationRequest): Promise<RosettaConstructionHashResponse>;
    /**
     * TODO
     * @summary Get Metadata for Transaction Construction
     * @param {RosettaConstructionMetadataRequest} rosettaConstructionMetadataRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionMetadataRaw(requestParameters: RosettaConstructionMetadataOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionMetadataResponse>>;
    /**
     * TODO
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadata(requestParameters: RosettaConstructionMetadataOperationRequest): Promise<RosettaConstructionMetadataResponse>;
    /**
     * TODO
     * @summary Parse a Transaction
     * @param {RosettaConstructionParseRequest} rosettaConstructionParseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionParseRaw(requestParameters: RosettaConstructionParseOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionParseResponse>>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParse(requestParameters: RosettaConstructionParseOperationRequest): Promise<RosettaConstructionParseResponse>;
    /**
     * Generate and unsigned transaction from operations and metadata
     * @summary Generate an Unsigned Transaction and Signing Payloads
     * @param {RosettaConstructionPayloadsRequest} rosettaConstructionPayloadsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionPayloadsRaw(requestParameters: RosettaConstructionPayloadsOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionPayloadResponse>>;
    /**
     * Generate and unsigned transaction from operations and metadata
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloads(requestParameters: RosettaConstructionPayloadsOperationRequest): Promise<RosettaConstructionPayloadResponse>;
    /**
     * TODO
     * @summary Create a Request to Fetch Metadata
     * @param {RosettaConstructionPreprocessRequest} rosettaConstructionPreprocessRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionPreprocessRaw(requestParameters: RosettaConstructionPreprocessOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionPreprocessResponse>>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocess(requestParameters: RosettaConstructionPreprocessOperationRequest): Promise<RosettaConstructionPreprocessResponse>;
    /**
     * Submit a pre-signed transaction to the node.
     * @summary Submit a Signed Transaction
     * @param {RosettaConstructionSubmitRequest} rosettaConstructionSubmitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaConstructionSubmitRaw(requestParameters: RosettaConstructionSubmitOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionSubmitResponse>>;
    /**
     * Submit a pre-signed transaction to the node.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmit(requestParameters: RosettaConstructionSubmitOperationRequest): Promise<RosettaConstructionSubmitResponse>;
    /**
     * Get all Transaction Identifiers in the mempool.
     * @summary Get All Mempool Transactions
     * @param {RosettaMempoolRequest} rosettaMempoolRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaMempoolRaw(requestParameters: RosettaMempoolOperationRequest): Promise<runtime.ApiResponse<RosettaMempoolResponse>>;
    /**
     * Get all Transaction Identifiers in the mempool.
     * Get All Mempool Transactions
     */
    rosettaMempool(requestParameters: RosettaMempoolOperationRequest): Promise<RosettaMempoolResponse>;
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * @summary Get a Mempool Transaction
     * @param {RosettaMempoolTransactionRequest} rosettaMempoolTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaMempoolTransactionRaw(requestParameters: RosettaMempoolTransactionOperationRequest): Promise<runtime.ApiResponse<RosettaMempoolTransactionResponse>>;
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransaction(requestParameters: RosettaMempoolTransactionOperationRequest): Promise<RosettaMempoolTransactionResponse>;
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * @summary Get List of Available Networks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkListRaw(): Promise<runtime.ApiResponse<RosettaNetworkListResponse>>;
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkList(): Promise<RosettaNetworkListResponse>;
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * @summary Get Network Options
     * @param {RosettaOptionsRequest} rosettaOptionsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkOptionsRaw(requestParameters: RosettaNetworkOptionsRequest): Promise<runtime.ApiResponse<RosettaNetworkOptionsResponse>>;
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptions(requestParameters: RosettaNetworkOptionsRequest): Promise<RosettaNetworkOptionsResponse>;
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * @summary Get Network Status
     * @param {RosettaStatusRequest} rosettaStatusRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosettaApiInterface
     */
    rosettaNetworkStatusRaw(requestParameters: RosettaNetworkStatusRequest): Promise<runtime.ApiResponse<{
        [key: string]: object;
    }>>;
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatus(requestParameters: RosettaNetworkStatusRequest): Promise<{
        [key: string]: object;
    }>;
}
/**
 *
 */
export declare class RosettaApi extends runtime.BaseAPI implements RosettaApiInterface {
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalanceRaw(requestParameters: RosettaAccountBalanceOperationRequest): Promise<runtime.ApiResponse<RosettaAccountBalanceResponse>>;
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    rosettaAccountBalance(requestParameters: RosettaAccountBalanceOperationRequest): Promise<RosettaAccountBalanceResponse>;
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * Get a Block
     */
    rosettaBlockRaw(requestParameters: RosettaBlockOperationRequest): Promise<runtime.ApiResponse<RosettaBlockResponse>>;
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * Get a Block
     */
    rosettaBlock(requestParameters: RosettaBlockOperationRequest): Promise<RosettaBlockResponse>;
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransactionRaw(requestParameters: RosettaBlockTransactionOperationRequest): Promise<runtime.ApiResponse<RosettaBlockTransactionResponse>>;
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    rosettaBlockTransaction(requestParameters: RosettaBlockTransactionOperationRequest): Promise<RosettaBlockTransactionResponse>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombineRaw(requestParameters: RosettaConstructionCombineOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionCombineResponse>>;
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * Create Network Transaction from Signatures
     */
    rosettaConstructionCombine(requestParameters: RosettaConstructionCombineOperationRequest): Promise<RosettaConstructionCombineResponse>;
    /**
     * TODO
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDeriveRaw(requestParameters: RosettaConstructionDeriveOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionDeriveResponse>>;
    /**
     * TODO
     * Derive an AccountIdentifier from a PublicKey
     */
    rosettaConstructionDerive(requestParameters: RosettaConstructionDeriveOperationRequest): Promise<RosettaConstructionDeriveResponse>;
    /**
     * TODO
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHashRaw(requestParameters: RosettaConstructionHashOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionHashResponse>>;
    /**
     * TODO
     * Get the Hash of a Signed Transaction
     */
    rosettaConstructionHash(requestParameters: RosettaConstructionHashOperationRequest): Promise<RosettaConstructionHashResponse>;
    /**
     * TODO
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadataRaw(requestParameters: RosettaConstructionMetadataOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionMetadataResponse>>;
    /**
     * TODO
     * Get Metadata for Transaction Construction
     */
    rosettaConstructionMetadata(requestParameters: RosettaConstructionMetadataOperationRequest): Promise<RosettaConstructionMetadataResponse>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParseRaw(requestParameters: RosettaConstructionParseOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionParseResponse>>;
    /**
     * TODO
     * Parse a Transaction
     */
    rosettaConstructionParse(requestParameters: RosettaConstructionParseOperationRequest): Promise<RosettaConstructionParseResponse>;
    /**
     * Generate and unsigned transaction from operations and metadata
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloadsRaw(requestParameters: RosettaConstructionPayloadsOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionPayloadResponse>>;
    /**
     * Generate and unsigned transaction from operations and metadata
     * Generate an Unsigned Transaction and Signing Payloads
     */
    rosettaConstructionPayloads(requestParameters: RosettaConstructionPayloadsOperationRequest): Promise<RosettaConstructionPayloadResponse>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocessRaw(requestParameters: RosettaConstructionPreprocessOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionPreprocessResponse>>;
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    rosettaConstructionPreprocess(requestParameters: RosettaConstructionPreprocessOperationRequest): Promise<RosettaConstructionPreprocessResponse>;
    /**
     * Submit a pre-signed transaction to the node.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmitRaw(requestParameters: RosettaConstructionSubmitOperationRequest): Promise<runtime.ApiResponse<RosettaConstructionSubmitResponse>>;
    /**
     * Submit a pre-signed transaction to the node.
     * Submit a Signed Transaction
     */
    rosettaConstructionSubmit(requestParameters: RosettaConstructionSubmitOperationRequest): Promise<RosettaConstructionSubmitResponse>;
    /**
     * Get all Transaction Identifiers in the mempool.
     * Get All Mempool Transactions
     */
    rosettaMempoolRaw(requestParameters: RosettaMempoolOperationRequest): Promise<runtime.ApiResponse<RosettaMempoolResponse>>;
    /**
     * Get all Transaction Identifiers in the mempool.
     * Get All Mempool Transactions
     */
    rosettaMempool(requestParameters: RosettaMempoolOperationRequest): Promise<RosettaMempoolResponse>;
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransactionRaw(requestParameters: RosettaMempoolTransactionOperationRequest): Promise<runtime.ApiResponse<RosettaMempoolTransactionResponse>>;
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * Get a Mempool Transaction
     */
    rosettaMempoolTransaction(requestParameters: RosettaMempoolTransactionOperationRequest): Promise<RosettaMempoolTransactionResponse>;
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkListRaw(): Promise<runtime.ApiResponse<RosettaNetworkListResponse>>;
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    rosettaNetworkList(): Promise<RosettaNetworkListResponse>;
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptionsRaw(requestParameters: RosettaNetworkOptionsRequest): Promise<runtime.ApiResponse<RosettaNetworkOptionsResponse>>;
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    rosettaNetworkOptions(requestParameters: RosettaNetworkOptionsRequest): Promise<RosettaNetworkOptionsResponse>;
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatusRaw(requestParameters: RosettaNetworkStatusRequest): Promise<runtime.ApiResponse<{
        [key: string]: object;
    }>>;
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    rosettaNetworkStatus(requestParameters: RosettaNetworkStatusRequest): Promise<{
        [key: string]: object;
    }>;
}
