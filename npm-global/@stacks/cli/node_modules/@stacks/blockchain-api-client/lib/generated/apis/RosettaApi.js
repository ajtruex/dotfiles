"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Stacks 2.0 Blockchain API
 * This is the documentation for the Stacks 2.0 Blockchain API.  It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/614feab5c108d292bffa#?env%5BStacks%20Blockchain%20API%5D=W3sia2V5Ijoic3R4X2FkZHJlc3MiLCJ2YWx1ZSI6IlNUMlRKUkhESE1ZQlE0MTdIRkIwQkRYNDMwVFFBNVBYUlg2NDk1RzFWIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJibG9ja19pZCIsInZhbHVlIjoiMHgiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6Im9mZnNldCIsInZhbHVlIjoiMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfdHgiLCJ2YWx1ZSI6IjIwMCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGltaXRfYmxvY2siLCJ2YWx1ZSI6IjMwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJ0eF9pZCIsInZhbHVlIjoiMHg1NDA5MGMxNmE3MDJiNzUzYjQzMTE0ZTg4NGJjMTlhODBhNzk2MzhmZDQ0OWE0MGY4MDY4Y2RmMDAzY2RlNmUwIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9pZCIsInZhbHVlIjoiU1RKVFhFSlBKUFBWRE5BOUIwNTJOU1JSQkdRQ0ZOS1ZTMTc4VkdIMS5oZWxsb193b3JsZFxuIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJidGNfYWRkcmVzcyIsInZhbHVlIjoiYWJjIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9hZGRyZXNzIiwidmFsdWUiOiJTVEpUWEVKUEpQUFZETkE5QjA1Mk5TUlJCR1FDRk5LVlMxNzhWR0gxIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJjb250cmFjdF9uYW1lIiwidmFsdWUiOiJoZWxsb193b3JsZCIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWFwIiwidmFsdWUiOiJzdG9yZSIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY29udHJhY3RfbWV0aG9kIiwidmFsdWUiOiJnZXQtdmFsdWUiLCJlbmFibGVkIjp0cnVlfV0=)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosettaApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class RosettaApi extends runtime.BaseAPI {
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    async rosettaAccountBalanceRaw(requestParameters) {
        if (requestParameters.rosettaAccountBalanceRequest === null || requestParameters.rosettaAccountBalanceRequest === undefined) {
            throw new runtime.RequiredError('rosettaAccountBalanceRequest', 'Required parameter requestParameters.rosettaAccountBalanceRequest was null or undefined when calling rosettaAccountBalance.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/account/balance`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaAccountBalanceRequestToJSON(requestParameters.rosettaAccountBalanceRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaAccountBalanceResponseFromJSON(jsonValue));
    }
    /**
     * An AccountBalanceRequest is utilized to make a balance request on the /account/balance endpoint. If the block_identifier is populated, a historical balance query should be performed.
     * Get an Account Balance
     */
    async rosettaAccountBalance(requestParameters) {
        const response = await this.rosettaAccountBalanceRaw(requestParameters);
        return await response.value();
    }
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * Get a Block
     */
    async rosettaBlockRaw(requestParameters) {
        if (requestParameters.rosettaBlockRequest === null || requestParameters.rosettaBlockRequest === undefined) {
            throw new runtime.RequiredError('rosettaBlockRequest', 'Required parameter requestParameters.rosettaBlockRequest was null or undefined when calling rosettaBlock.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/block`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaBlockRequestToJSON(requestParameters.rosettaBlockRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaBlockResponseFromJSON(jsonValue));
    }
    /**
     * A BlockRequest is utilized to make a block request on the /block endpoint.
     * Get a Block
     */
    async rosettaBlock(requestParameters) {
        const response = await this.rosettaBlockRaw(requestParameters);
        return await response.value();
    }
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    async rosettaBlockTransactionRaw(requestParameters) {
        if (requestParameters.rosettaBlockTransactionRequest === null || requestParameters.rosettaBlockTransactionRequest === undefined) {
            throw new runtime.RequiredError('rosettaBlockTransactionRequest', 'Required parameter requestParameters.rosettaBlockTransactionRequest was null or undefined when calling rosettaBlockTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/block/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaBlockTransactionRequestToJSON(requestParameters.rosettaBlockTransactionRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaBlockTransactionResponseFromJSON(jsonValue));
    }
    /**
     * A BlockTransactionRequest is used to fetch a Transaction included in a block that is not returned in a BlockResponse.
     * Get a Block Transaction
     */
    async rosettaBlockTransaction(requestParameters) {
        const response = await this.rosettaBlockTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * Create Network Transaction from Signatures
     */
    async rosettaConstructionCombineRaw(requestParameters) {
        if (requestParameters.rosettaConstructionCombineRequest === null || requestParameters.rosettaConstructionCombineRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionCombineRequest', 'Required parameter requestParameters.rosettaConstructionCombineRequest was null or undefined when calling rosettaConstructionCombine.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/combine`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionCombineRequestToJSON(requestParameters.rosettaConstructionCombineRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionCombineResponseFromJSON(jsonValue));
    }
    /**
     * Take unsigned transaction and signature, combine both and return signed transaction
     * Create Network Transaction from Signatures
     */
    async rosettaConstructionCombine(requestParameters) {
        const response = await this.rosettaConstructionCombineRaw(requestParameters);
        return await response.value();
    }
    /**
     * TODO
     * Derive an AccountIdentifier from a PublicKey
     */
    async rosettaConstructionDeriveRaw(requestParameters) {
        if (requestParameters.rosettaConstructionDeriveRequest === null || requestParameters.rosettaConstructionDeriveRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionDeriveRequest', 'Required parameter requestParameters.rosettaConstructionDeriveRequest was null or undefined when calling rosettaConstructionDerive.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/derive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionDeriveRequestToJSON(requestParameters.rosettaConstructionDeriveRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionDeriveResponseFromJSON(jsonValue));
    }
    /**
     * TODO
     * Derive an AccountIdentifier from a PublicKey
     */
    async rosettaConstructionDerive(requestParameters) {
        const response = await this.rosettaConstructionDeriveRaw(requestParameters);
        return await response.value();
    }
    /**
     * TODO
     * Get the Hash of a Signed Transaction
     */
    async rosettaConstructionHashRaw(requestParameters) {
        if (requestParameters.rosettaConstructionHashRequest === null || requestParameters.rosettaConstructionHashRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionHashRequest', 'Required parameter requestParameters.rosettaConstructionHashRequest was null or undefined when calling rosettaConstructionHash.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/hash`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionHashRequestToJSON(requestParameters.rosettaConstructionHashRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionHashResponseFromJSON(jsonValue));
    }
    /**
     * TODO
     * Get the Hash of a Signed Transaction
     */
    async rosettaConstructionHash(requestParameters) {
        const response = await this.rosettaConstructionHashRaw(requestParameters);
        return await response.value();
    }
    /**
     * TODO
     * Get Metadata for Transaction Construction
     */
    async rosettaConstructionMetadataRaw(requestParameters) {
        if (requestParameters.rosettaConstructionMetadataRequest === null || requestParameters.rosettaConstructionMetadataRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionMetadataRequest', 'Required parameter requestParameters.rosettaConstructionMetadataRequest was null or undefined when calling rosettaConstructionMetadata.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionMetadataRequestToJSON(requestParameters.rosettaConstructionMetadataRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionMetadataResponseFromJSON(jsonValue));
    }
    /**
     * TODO
     * Get Metadata for Transaction Construction
     */
    async rosettaConstructionMetadata(requestParameters) {
        const response = await this.rosettaConstructionMetadataRaw(requestParameters);
        return await response.value();
    }
    /**
     * TODO
     * Parse a Transaction
     */
    async rosettaConstructionParseRaw(requestParameters) {
        if (requestParameters.rosettaConstructionParseRequest === null || requestParameters.rosettaConstructionParseRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionParseRequest', 'Required parameter requestParameters.rosettaConstructionParseRequest was null or undefined when calling rosettaConstructionParse.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/parse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionParseRequestToJSON(requestParameters.rosettaConstructionParseRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionParseResponseFromJSON(jsonValue));
    }
    /**
     * TODO
     * Parse a Transaction
     */
    async rosettaConstructionParse(requestParameters) {
        const response = await this.rosettaConstructionParseRaw(requestParameters);
        return await response.value();
    }
    /**
     * Generate and unsigned transaction from operations and metadata
     * Generate an Unsigned Transaction and Signing Payloads
     */
    async rosettaConstructionPayloadsRaw(requestParameters) {
        if (requestParameters.rosettaConstructionPayloadsRequest === null || requestParameters.rosettaConstructionPayloadsRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionPayloadsRequest', 'Required parameter requestParameters.rosettaConstructionPayloadsRequest was null or undefined when calling rosettaConstructionPayloads.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/payloads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionPayloadsRequestToJSON(requestParameters.rosettaConstructionPayloadsRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionPayloadResponseFromJSON(jsonValue));
    }
    /**
     * Generate and unsigned transaction from operations and metadata
     * Generate an Unsigned Transaction and Signing Payloads
     */
    async rosettaConstructionPayloads(requestParameters) {
        const response = await this.rosettaConstructionPayloadsRaw(requestParameters);
        return await response.value();
    }
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    async rosettaConstructionPreprocessRaw(requestParameters) {
        if (requestParameters.rosettaConstructionPreprocessRequest === null || requestParameters.rosettaConstructionPreprocessRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionPreprocessRequest', 'Required parameter requestParameters.rosettaConstructionPreprocessRequest was null or undefined when calling rosettaConstructionPreprocess.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/preprocess`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionPreprocessRequestToJSON(requestParameters.rosettaConstructionPreprocessRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionPreprocessResponseFromJSON(jsonValue));
    }
    /**
     * TODO
     * Create a Request to Fetch Metadata
     */
    async rosettaConstructionPreprocess(requestParameters) {
        const response = await this.rosettaConstructionPreprocessRaw(requestParameters);
        return await response.value();
    }
    /**
     * Submit a pre-signed transaction to the node.
     * Submit a Signed Transaction
     */
    async rosettaConstructionSubmitRaw(requestParameters) {
        if (requestParameters.rosettaConstructionSubmitRequest === null || requestParameters.rosettaConstructionSubmitRequest === undefined) {
            throw new runtime.RequiredError('rosettaConstructionSubmitRequest', 'Required parameter requestParameters.rosettaConstructionSubmitRequest was null or undefined when calling rosettaConstructionSubmit.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/construction/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaConstructionSubmitRequestToJSON(requestParameters.rosettaConstructionSubmitRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaConstructionSubmitResponseFromJSON(jsonValue));
    }
    /**
     * Submit a pre-signed transaction to the node.
     * Submit a Signed Transaction
     */
    async rosettaConstructionSubmit(requestParameters) {
        const response = await this.rosettaConstructionSubmitRaw(requestParameters);
        return await response.value();
    }
    /**
     * Get all Transaction Identifiers in the mempool.
     * Get All Mempool Transactions
     */
    async rosettaMempoolRaw(requestParameters) {
        if (requestParameters.rosettaMempoolRequest === null || requestParameters.rosettaMempoolRequest === undefined) {
            throw new runtime.RequiredError('rosettaMempoolRequest', 'Required parameter requestParameters.rosettaMempoolRequest was null or undefined when calling rosettaMempool.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/mempool`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaMempoolRequestToJSON(requestParameters.rosettaMempoolRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaMempoolResponseFromJSON(jsonValue));
    }
    /**
     * Get all Transaction Identifiers in the mempool.
     * Get All Mempool Transactions
     */
    async rosettaMempool(requestParameters) {
        const response = await this.rosettaMempoolRaw(requestParameters);
        return await response.value();
    }
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * Get a Mempool Transaction
     */
    async rosettaMempoolTransactionRaw(requestParameters) {
        if (requestParameters.rosettaMempoolTransactionRequest === null || requestParameters.rosettaMempoolTransactionRequest === undefined) {
            throw new runtime.RequiredError('rosettaMempoolTransactionRequest', 'Required parameter requestParameters.rosettaMempoolTransactionRequest was null or undefined when calling rosettaMempoolTransaction.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/mempool/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaMempoolTransactionRequestToJSON(requestParameters.rosettaMempoolTransactionRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaMempoolTransactionResponseFromJSON(jsonValue));
    }
    /**
     * A MempoolTransactionRequest is utilized to retrieve a transaction from the mempool.
     * Get a Mempool Transaction
     */
    async rosettaMempoolTransaction(requestParameters) {
        const response = await this.rosettaMempoolTransactionRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    async rosettaNetworkListRaw() {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/rosetta/v1/network/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaNetworkListResponseFromJSON(jsonValue));
    }
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    async rosettaNetworkList() {
        const response = await this.rosettaNetworkListRaw();
        return await response.value();
    }
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    async rosettaNetworkOptionsRaw(requestParameters) {
        if (requestParameters.rosettaOptionsRequest === null || requestParameters.rosettaOptionsRequest === undefined) {
            throw new runtime.RequiredError('rosettaOptionsRequest', 'Required parameter requestParameters.rosettaOptionsRequest was null or undefined when calling rosettaNetworkOptions.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/network/options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaOptionsRequestToJSON(requestParameters.rosettaOptionsRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => models_1.RosettaNetworkOptionsResponseFromJSON(jsonValue));
    }
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    async rosettaNetworkOptions(requestParameters) {
        const response = await this.rosettaNetworkOptionsRaw(requestParameters);
        return await response.value();
    }
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    async rosettaNetworkStatusRaw(requestParameters) {
        if (requestParameters.rosettaStatusRequest === null || requestParameters.rosettaStatusRequest === undefined) {
            throw new runtime.RequiredError('rosettaStatusRequest', 'Required parameter requestParameters.rosettaStatusRequest was null or undefined when calling rosettaNetworkStatus.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/rosetta/v1/network/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: models_1.RosettaStatusRequestToJSON(requestParameters.rosettaStatusRequest),
        });
        return new runtime.JSONApiResponse(response);
    }
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    async rosettaNetworkStatus(requestParameters) {
        const response = await this.rosettaNetworkStatusRaw(requestParameters);
        return await response.value();
    }
}
exports.RosettaApi = RosettaApi;
//# sourceMappingURL=RosettaApi.js.map