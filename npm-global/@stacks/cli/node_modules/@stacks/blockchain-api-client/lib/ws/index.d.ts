import * as JsonRpcLite from 'jsonrpc-lite';
import { RpcTxUpdateNotificationParams, RpcAddressTxNotificationParams, RpcAddressBalanceNotificationParams } from '@blockstack/stacks-blockchain-api-types';
declare type IWebSocket = import('ws') | WebSocket;
interface Subscription {
    unsubscribe(): Promise<void>;
}
export declare class StacksApiWebSocketClient {
    webSocket: IWebSocket;
    idCursor: number;
    pendingRequests: Map<JsonRpcLite.ID, {
        resolve: (result: any) => void;
        reject: (error: any) => void;
    }>;
    eventEmitter: import("eventemitter3")<{
        txUpdate: (event: RpcTxUpdateNotificationParams) => any;
        addressTxUpdate: (event: RpcAddressTxNotificationParams) => void;
        addressBalanceUpdate: (event: RpcAddressBalanceNotificationParams) => void;
    }, any>;
    static connect(url?: string): Promise<StacksApiWebSocketClient>;
    constructor(webSocket: IWebSocket);
    handleNotification(data: JsonRpcLite.NotificationObject): void;
    private rpcCall;
    subscribeTxUpdates(txId: string, update: (event: RpcTxUpdateNotificationParams) => any): Promise<Subscription>;
    subscribeAddressTransactions(address: string, update: (event: RpcAddressTxNotificationParams) => any): Promise<Subscription>;
    subscribeAddressBalanceUpdates(address: string, update: (event: RpcAddressBalanceNotificationParams) => any): Promise<Subscription>;
}
export declare function connectWebSocketClient(url?: string): Promise<StacksApiWebSocketClient>;
export {};
