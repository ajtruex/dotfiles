import { asyncToGenerator as _asyncToGenerator } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';
import { getCryptoLib } from './cryptoUtils.esm.js';

var NodeCryptoAesCipher = /*#__PURE__*/function () {
  function NodeCryptoAesCipher(createCipher, createDecipher) {
    this.createCipher = createCipher;
    this.createDecipher = createDecipher;
  }

  var _proto = NodeCryptoAesCipher.prototype;

  _proto.encrypt = /*#__PURE__*/function () {
    var _encrypt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(algorithm, key, iv, data) {
      var cipher, result;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc')) {
                _context.next = 2;
                break;
              }

              throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

            case 2:
              cipher = this.createCipher(algorithm, key, iv);
              result = Buffer.concat([cipher.update(data), cipher["final"]()]);
              return _context.abrupt("return", Promise.resolve(result));

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function encrypt(_x, _x2, _x3, _x4) {
      return _encrypt.apply(this, arguments);
    }

    return encrypt;
  }();

  _proto.decrypt = /*#__PURE__*/function () {
    var _decrypt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(algorithm, key, iv, data) {
      var cipher, result;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc')) {
                _context2.next = 2;
                break;
              }

              throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

            case 2:
              cipher = this.createDecipher(algorithm, key, iv);
              result = Buffer.concat([cipher.update(data), cipher["final"]()]);
              return _context2.abrupt("return", Promise.resolve(result));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function decrypt(_x5, _x6, _x7, _x8) {
      return _decrypt.apply(this, arguments);
    }

    return decrypt;
  }();

  return NodeCryptoAesCipher;
}();
var WebCryptoAesCipher = /*#__PURE__*/function () {
  function WebCryptoAesCipher(subtleCrypto) {
    this.subtleCrypto = subtleCrypto;
  }

  var _proto2 = WebCryptoAesCipher.prototype;

  _proto2.encrypt = /*#__PURE__*/function () {
    var _encrypt2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(algorithm, key, iv, data) {
      var algo, length, cryptoKey, result;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(algorithm === 'aes-128-cbc')) {
                _context3.next = 5;
                break;
              }

              algo = 'AES-CBC';
              length = 128;
              _context3.next = 11;
              break;

            case 5:
              if (!(algorithm === 'aes-256-cbc')) {
                _context3.next = 10;
                break;
              }

              algo = 'AES-CBC';
              length = 256;
              _context3.next = 11;
              break;

            case 10:
              throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

            case 11:
              _context3.next = 13;
              return this.subtleCrypto.importKey('raw', key, {
                name: algo,
                length: length
              }, false, ['encrypt']);

            case 13:
              cryptoKey = _context3.sent;
              _context3.next = 16;
              return this.subtleCrypto.encrypt({
                name: algo,
                iv: iv
              }, cryptoKey, data);

            case 16:
              result = _context3.sent;
              return _context3.abrupt("return", Buffer.from(result));

            case 18:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function encrypt(_x9, _x10, _x11, _x12) {
      return _encrypt2.apply(this, arguments);
    }

    return encrypt;
  }();

  _proto2.decrypt = /*#__PURE__*/function () {
    var _decrypt2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(algorithm, key, iv, data) {
      var algo, length, cryptoKey, result;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!(algorithm === 'aes-128-cbc')) {
                _context4.next = 5;
                break;
              }

              algo = 'AES-CBC';
              length = 128;
              _context4.next = 11;
              break;

            case 5:
              if (!(algorithm === 'aes-256-cbc')) {
                _context4.next = 10;
                break;
              }

              algo = 'AES-CBC';
              length = 256;
              _context4.next = 11;
              break;

            case 10:
              throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

            case 11:
              _context4.next = 13;
              return this.subtleCrypto.importKey('raw', key, {
                name: algo,
                length: length
              }, false, ['decrypt']);

            case 13:
              cryptoKey = _context4.sent;
              _context4.next = 16;
              return this.subtleCrypto.decrypt({
                name: algo,
                iv: iv
              }, cryptoKey, data);

            case 16:
              result = _context4.sent;
              return _context4.abrupt("return", Buffer.from(result));

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function decrypt(_x13, _x14, _x15, _x16) {
      return _decrypt2.apply(this, arguments);
    }

    return decrypt;
  }();

  return WebCryptoAesCipher;
}();
function createCipher() {
  return _createCipher.apply(this, arguments);
}

function _createCipher() {
  _createCipher = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
    var cryptoLib;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return getCryptoLib();

          case 2:
            cryptoLib = _context5.sent;

            if (!(cryptoLib.name === 'subtleCrypto')) {
              _context5.next = 7;
              break;
            }

            return _context5.abrupt("return", new WebCryptoAesCipher(cryptoLib.lib));

          case 7:
            return _context5.abrupt("return", new NodeCryptoAesCipher(cryptoLib.lib.createCipheriv, cryptoLib.lib.createDecipheriv));

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _createCipher.apply(this, arguments);
}

export { NodeCryptoAesCipher, WebCryptoAesCipher, createCipher };
//# sourceMappingURL=aesCipher.esm.js.map
