{"version":3,"file":"wallet.esm.js","sources":["../src/wallet.ts"],"sourcesContent":["import { validateMnemonic, mnemonicToEntropy, entropyToMnemonic } from 'bip39';\nimport { randomBytes, GetRandomBytes } from './cryptoRandom';\nimport { createSha2Hash } from './sha2Hash';\nimport { createHmacSha256 } from './hmacSha256';\nimport { createCipher } from './aesCipher';\nimport { createPbkdf2 } from './pbkdf2';\nimport { TriplesecDecryptSignature } from './cryptoUtils';\n\n/**\n * Encrypt a raw mnemonic phrase to be password protected\n * @param {string} phrase - Raw mnemonic phrase\n * @param {string} password - Password to encrypt mnemonic with\n * @return {Promise<Buffer>} The encrypted phrase\n * @private\n * @ignore\n * */\nexport async function encryptMnemonic(\n  phrase: string,\n  password: string,\n  opts?: {\n    getRandomBytes?: GetRandomBytes;\n  }\n): Promise<Buffer> {\n  // hex encoded mnemonic string\n  let mnemonicEntropy: string;\n  try {\n    // must be bip39 mnemonic\n    mnemonicEntropy = mnemonicToEntropy(phrase);\n  } catch (error) {\n    console.error('Invalid mnemonic phrase provided');\n    console.error(error);\n    throw new Error('Not a valid bip39 mnemonic');\n  }\n\n  // normalize plaintext to fixed length byte string\n  const plaintextNormalized = Buffer.from(mnemonicEntropy, 'hex');\n\n  // AES-128-CBC with SHA256 HMAC\n  const pbkdf2 = await createPbkdf2();\n  let salt: Buffer;\n  if (opts && opts.getRandomBytes) {\n    salt = opts.getRandomBytes(16);\n  } else {\n    salt = randomBytes(16);\n  }\n  const keysAndIV = await pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n  const encKey = keysAndIV.slice(0, 16);\n  const macKey = keysAndIV.slice(16, 32);\n  const iv = keysAndIV.slice(32, 48);\n\n  const cipher = await createCipher();\n  const cipherText = await cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);\n\n  const hmacPayload = Buffer.concat([salt, cipherText]);\n  const hmacSha256 = await createHmacSha256();\n  const hmacDigest = await hmacSha256.digest(macKey, hmacPayload);\n\n  const payload = Buffer.concat([salt, hmacDigest, cipherText]);\n  return payload;\n}\n\n// Used to distinguish bad password during decrypt vs invalid format\nclass PasswordError extends Error {}\n\n/**\n * @ignore\n */\nasync function decryptMnemonicBuffer(dataBuffer: Buffer, password: string): Promise<string> {\n  const salt = dataBuffer.slice(0, 16);\n  const hmacSig = dataBuffer.slice(16, 48); // 32 bytes\n  const cipherText = dataBuffer.slice(48);\n  const hmacPayload = Buffer.concat([salt, cipherText]);\n\n  const pbkdf2 = await createPbkdf2();\n  const keysAndIV = await pbkdf2.derive(password, salt, 100000, 48, 'sha512');\n  const encKey = keysAndIV.slice(0, 16);\n  const macKey = keysAndIV.slice(16, 32);\n  const iv = keysAndIV.slice(32, 48);\n\n  const decipher = await createCipher();\n  const decryptedResult = await decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);\n\n  const hmacSha256 = await createHmacSha256();\n  const hmacDigest = await hmacSha256.digest(macKey, hmacPayload);\n\n  // hash both hmacSig and hmacDigest so string comparison time\n  // is uncorrelated to the ciphertext\n  const sha2Hash = await createSha2Hash();\n  const hmacSigHash = await sha2Hash.digest(hmacSig);\n  const hmacDigestHash = await sha2Hash.digest(hmacDigest);\n\n  if (!hmacSigHash.equals(hmacDigestHash)) {\n    // not authentic\n    throw new PasswordError('Wrong password (HMAC mismatch)');\n  }\n\n  let mnemonic: string;\n  try {\n    mnemonic = entropyToMnemonic(decryptedResult);\n  } catch (error) {\n    console.error('Error thrown by `entropyToMnemonic`');\n    console.error(error);\n    throw new PasswordError('Wrong password (invalid plaintext)');\n  }\n  if (!validateMnemonic(mnemonic)) {\n    throw new PasswordError('Wrong password (invalid plaintext)');\n  }\n\n  return mnemonic;\n}\n\n/**\n * Decrypt legacy triplesec keys\n * @param {Buffer} dataBuffer - The encrypted key\n * @param {String} password - Password for data\n * @return {Promise<Buffer>} Decrypted seed\n * @private\n * @ignore\n */\nfunction decryptLegacy(\n  dataBuffer: Buffer,\n  password: string,\n  triplesecDecrypt?: TriplesecDecryptSignature\n): Promise<Buffer> {\n  return new Promise<Buffer>((resolve, reject) => {\n    if (!triplesecDecrypt) {\n      reject(new Error('The `triplesec.decrypt` function must be provided'));\n    }\n    triplesecDecrypt!(\n      {\n        key: Buffer.from(password),\n        data: dataBuffer,\n      },\n      (err, plaintextBuffer) => {\n        if (!err) {\n          resolve(plaintextBuffer!);\n        } else {\n          reject(err);\n        }\n      }\n    );\n  });\n}\n\n/**\n * Decrypt an encrypted mnemonic phrase with a password.\n * Legacy triplesec encrypted payloads are also supported.\n * @param data - Buffer or hex-encoded string of the encrypted mnemonic\n * @param password - Password for data\n * @return the raw mnemonic phrase\n * @private\n * @ignore\n */\nexport async function decryptMnemonic(\n  data: string | Buffer,\n  password: string,\n  triplesecDecrypt?: TriplesecDecryptSignature\n) {\n  const dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');\n  try {\n    return await decryptMnemonicBuffer(dataBuffer, password);\n  } catch (err) {\n    if (err instanceof PasswordError) {\n      throw err;\n    }\n    const data = await decryptLegacy(dataBuffer, password, triplesecDecrypt);\n    return data.toString();\n  }\n}\n"],"names":["encryptMnemonic","phrase","password","opts","mnemonicEntropy","mnemonicToEntropy","console","error","Error","plaintextNormalized","Buffer","from","createPbkdf2","pbkdf2","getRandomBytes","salt","randomBytes","derive","keysAndIV","encKey","slice","macKey","iv","createCipher","cipher","encrypt","cipherText","hmacPayload","concat","createHmacSha256","hmacSha256","digest","hmacDigest","payload","PasswordError","decryptMnemonicBuffer","dataBuffer","hmacSig","decipher","decrypt","decryptedResult","createSha2Hash","sha2Hash","hmacSigHash","hmacDigestHash","equals","mnemonic","entropyToMnemonic","validateMnemonic","decryptLegacy","triplesecDecrypt","Promise","resolve","reject","key","data","err","plaintextBuffer","decryptMnemonic","isBuffer","toString"],"mappings":"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"}