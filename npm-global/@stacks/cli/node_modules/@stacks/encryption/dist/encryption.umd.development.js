(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('elliptic'), require('randombytes'), require('@stacks/common'), require('bitcoinjs-lib'), require('sha.js'), require('ripemd160-min'), require('bip39')) :
  typeof define === 'function' && define.amd ? define(['exports', 'elliptic', 'randombytes', '@stacks/common', 'bitcoinjs-lib', 'sha.js', 'ripemd160-min', 'bip39'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['@stacks/encryption'] = {}, global.elliptic, global.randomBytes, global.common, global.bitcoinjsLib, global.sha_js, global.Ripemd160Polyfill, global.bip39));
}(this, (function (exports, elliptic, randomBytes, common, bitcoinjsLib, sha_js, Ripemd160Polyfill, bip39) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var randomBytes__default = /*#__PURE__*/_interopDefaultLegacy(randomBytes);
  var Ripemd160Polyfill__default = /*#__PURE__*/_interopDefaultLegacy(Ripemd160Polyfill);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
    /**
     * Copyright (c) 2014-present, Facebook, Inc.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};

      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };

      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);

      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };

      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      Gp[iteratorSymbol] = function () {
        return this;
      };

      Gp.toString = function () {
        return "[object Generator]";
      };

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  });

  function isSubtleCryptoAvailable() {
    return typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined';
  }
  function isNodeCryptoAvailable(withFeature) {
    try {
      var resolvedResult = require.resolve('crypto');

      if (!resolvedResult) {
        return false;
      }

      var cryptoModule = require('crypto');

      if (!cryptoModule) {
        return false;
      }

      if (withFeature) {
        var features = withFeature(cryptoModule);
        return features;
      }

      return true;
    } catch (error) {
      return false;
    }
  }
  var NO_CRYPTO_LIB = 'Crypto lib not found. Either the WebCrypto "crypto.subtle" or Node.js "crypto" module must be available.';
  function getCryptoLib() {
    return _getCryptoLib.apply(this, arguments);
  }

  function _getCryptoLib() {
    _getCryptoLib = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var nodeCrypto;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!isSubtleCryptoAvailable()) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", {
                lib: crypto.subtle,
                name: 'subtleCrypto'
              });

            case 4:
              _context.prev = 4;
              nodeCrypto = require('crypto');
              return _context.abrupt("return", {
                lib: nodeCrypto,
                name: 'nodeCrypto'
              });

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](4);
              throw new Error(NO_CRYPTO_LIB);

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 9]]);
    }));
    return _getCryptoLib.apply(this, arguments);
  }

  var NodeCryptoSha2Hash = /*#__PURE__*/function () {
    function NodeCryptoSha2Hash(createHash) {
      this.createHash = createHash;
    }

    var _proto = NodeCryptoSha2Hash.prototype;

    _proto.digest = /*#__PURE__*/function () {
      var _digest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(data, algorithm) {
        var result;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (algorithm === void 0) {
                  algorithm = 'sha256';
                }

                _context.prev = 1;
                result = this.createHash(algorithm).update(data).digest();
                return _context.abrupt("return", Promise.resolve(result));

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](1);
                console.log(_context.t0);
                console.log("Error performing " + algorithm + " digest with Node.js 'crypto.createHash', falling back to JS implementation.");
                return _context.abrupt("return", Promise.resolve(algorithm === 'sha256' ? hashSha256Sync(data) : hashSha512Sync(data)));

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 6]]);
      }));

      function digest(_x, _x2) {
        return _digest.apply(this, arguments);
      }

      return digest;
    }();

    return NodeCryptoSha2Hash;
  }();
  var WebCryptoSha2Hash = /*#__PURE__*/function () {
    function WebCryptoSha2Hash(subtleCrypto) {
      this.subtleCrypto = subtleCrypto;
    }

    var _proto2 = WebCryptoSha2Hash.prototype;

    _proto2.digest = /*#__PURE__*/function () {
      var _digest2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(data, algorithm) {
        var algo, hash;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (algorithm === void 0) {
                  algorithm = 'sha256';
                }

                if (!(algorithm === 'sha256')) {
                  _context2.next = 5;
                  break;
                }

                algo = 'SHA-256';
                _context2.next = 10;
                break;

              case 5:
                if (!(algorithm === 'sha512')) {
                  _context2.next = 9;
                  break;
                }

                algo = 'SHA-512';
                _context2.next = 10;
                break;

              case 9:
                throw new Error("Unsupported hash algorithm " + algorithm);

              case 10:
                _context2.prev = 10;
                _context2.next = 13;
                return this.subtleCrypto.digest(algo, data);

              case 13:
                hash = _context2.sent;
                return _context2.abrupt("return", Buffer.from(hash));

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2["catch"](10);
                console.log(_context2.t0);
                console.log("Error performing " + algorithm + " digest with WebCrypto, falling back to JS implementation.");
                return _context2.abrupt("return", Promise.resolve(algorithm === 'sha256' ? hashSha256Sync(data) : hashSha512Sync(data)));

              case 22:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[10, 17]]);
      }));

      function digest(_x3, _x4) {
        return _digest2.apply(this, arguments);
      }

      return digest;
    }();

    return WebCryptoSha2Hash;
  }();
  function createSha2Hash() {
    return _createSha2Hash.apply(this, arguments);
  }

  function _createSha2Hash() {
    _createSha2Hash = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var cryptoLib;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return getCryptoLib();

            case 2:
              cryptoLib = _context3.sent;

              if (!(cryptoLib.name === 'subtleCrypto')) {
                _context3.next = 7;
                break;
              }

              return _context3.abrupt("return", new WebCryptoSha2Hash(cryptoLib.lib));

            case 7:
              return _context3.abrupt("return", new NodeCryptoSha2Hash(cryptoLib.lib.createHash));

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _createSha2Hash.apply(this, arguments);
  }

  function hashSha256Sync(data) {
    var hash = new sha_js.sha256();
    hash.update(data);
    return hash.digest();
  }
  function hashSha512Sync(data) {
    var hash = new sha_js.sha512();
    hash.update(data);
    return hash.digest();
  }

  var Ripemd160PolyfillDigest = /*#__PURE__*/function () {
    function Ripemd160PolyfillDigest() {}

    var _proto = Ripemd160PolyfillDigest.prototype;

    _proto.digest = function digest(data) {
      var instance = new Ripemd160Polyfill__default['default']();
      instance.update(data);
      var hash = instance.digest();

      if (Array.isArray(hash)) {
        return Buffer.from(hash);
      } else {
        return Buffer.from(hash.buffer);
      }
    };

    return Ripemd160PolyfillDigest;
  }();
  var NodeCryptoRipemd160Digest = /*#__PURE__*/function () {
    function NodeCryptoRipemd160Digest(nodeCryptoCreateHash) {
      this.nodeCryptoCreateHash = nodeCryptoCreateHash;
    }

    var _proto2 = NodeCryptoRipemd160Digest.prototype;

    _proto2.digest = function digest(data) {
      try {
        return this.nodeCryptoCreateHash('rmd160').update(data).digest();
      } catch (error) {
        try {
          return this.nodeCryptoCreateHash('ripemd160').update(data).digest();
        } catch (_err) {
          console.log(error);
          console.log('Node.js `crypto.createHash` exists but failing to digest for ripemd160, falling back to js implementation');
          var polyfill = new Ripemd160PolyfillDigest();
          return polyfill.digest(data);
        }
      }
    };

    return NodeCryptoRipemd160Digest;
  }();
  function createHashRipemd160() {
    var nodeCryptoCreateHash = isNodeCryptoAvailable(function (nodeCrypto) {
      if (typeof nodeCrypto.createHash === 'function') {
        return nodeCrypto.createHash;
      }

      return false;
    });

    if (nodeCryptoCreateHash) {
      return new NodeCryptoRipemd160Digest(nodeCryptoCreateHash);
    } else {
      return new Ripemd160PolyfillDigest();
    }
  }
  function hashRipemd160(data) {
    var hash = createHashRipemd160();
    return hash.digest(data);
  }

  function getEntropy(arg) {
    if (!arg) {
      arg = 32;
    }

    return randomBytes__default['default'](arg);
  }
  function makeECPrivateKey() {
    var keyPair = bitcoinjsLib.ECPair.makeRandom({
      rng: getEntropy
    });
    return keyPair.privateKey.toString('hex');
  }
  function publicKeyToAddress(publicKey) {
    var publicKeyBuffer = Buffer.isBuffer(publicKey) ? publicKey : Buffer.from(publicKey, 'hex');
    var publicKeyHash160 = hashRipemd160(hashSha256Sync(publicKeyBuffer));
    var result = bitcoinjsLib.address.toBase58Check(publicKeyHash160, bitcoinjsLib.networks.bitcoin.pubKeyHash);
    return result;
  }
  function getPublicKeyFromPrivate(privateKey) {
    var privateKeyBuffer = Buffer.isBuffer(privateKey) ? privateKey : Buffer.from(privateKey, 'hex');
    var keyPair = bitcoinjsLib.ECPair.fromPrivateKey(privateKeyBuffer);
    return keyPair.publicKey.toString('hex');
  }
  function hexStringToECPair(skHex, network) {
    var ecPairOptions = {
      network: network || bitcoinjsLib.networks.bitcoin,
      compressed: true
    };

    if (skHex.length === 66) {
      if (skHex.slice(64) !== '01') {
        throw new Error('Improperly formatted private-key hex string. 66-length hex usually ' + 'indicates compressed key, but last byte must be == 1');
      }

      return bitcoinjsLib.ECPair.fromPrivateKey(Buffer.from(skHex.slice(0, 64), 'hex'), ecPairOptions);
    } else if (skHex.length === 64) {
      ecPairOptions.compressed = false;
      return bitcoinjsLib.ECPair.fromPrivateKey(Buffer.from(skHex, 'hex'), ecPairOptions);
    } else {
      throw new Error('Improperly formatted private-key hex string: length should be 64 or 66.');
    }
  }
  function ecPairToHexString(secretKey) {
    var ecPointHex = secretKey.privateKey.toString('hex');

    if (secretKey.compressed) {
      return ecPointHex + "01";
    } else {
      return ecPointHex;
    }
  }
  function ecPairToAddress(keyPair) {
    var sha256 = hashSha256Sync(keyPair.publicKey);
    var hash160 = hashRipemd160(sha256);
    return bitcoinjsLib.address.toBase58Check(hash160, keyPair.network.pubKeyHash);
  }

  var NodeCryptoHmacSha256 = /*#__PURE__*/function () {
    function NodeCryptoHmacSha256(createHmac) {
      this.createHmac = createHmac;
    }

    var _proto = NodeCryptoHmacSha256.prototype;

    _proto.digest = /*#__PURE__*/function () {
      var _digest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key, data) {
        var result;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                result = this.createHmac('sha256', key).update(data).digest();
                return _context.abrupt("return", Promise.resolve(result));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function digest(_x, _x2) {
        return _digest.apply(this, arguments);
      }

      return digest;
    }();

    return NodeCryptoHmacSha256;
  }();
  var WebCryptoHmacSha256 = /*#__PURE__*/function () {
    function WebCryptoHmacSha256(subtleCrypto) {
      this.subtleCrypto = subtleCrypto;
    }

    var _proto2 = WebCryptoHmacSha256.prototype;

    _proto2.digest = /*#__PURE__*/function () {
      var _digest2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(key, data) {
        var cryptoKey, sig;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.subtleCrypto.importKey('raw', key, {
                  name: 'HMAC',
                  hash: 'SHA-256'
                }, true, ['sign']);

              case 2:
                cryptoKey = _context2.sent;
                _context2.next = 5;
                return this.subtleCrypto.sign({
                  name: 'HMAC',
                  hash: 'SHA-256'
                }, cryptoKey, data);

              case 5:
                sig = _context2.sent;
                return _context2.abrupt("return", Buffer.from(sig));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function digest(_x3, _x4) {
        return _digest2.apply(this, arguments);
      }

      return digest;
    }();

    return WebCryptoHmacSha256;
  }();
  function createHmacSha256() {
    return _createHmacSha.apply(this, arguments);
  }

  function _createHmacSha() {
    _createHmacSha = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var cryptoLib;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return getCryptoLib();

            case 2:
              cryptoLib = _context3.sent;

              if (!(cryptoLib.name === 'subtleCrypto')) {
                _context3.next = 7;
                break;
              }

              return _context3.abrupt("return", new WebCryptoHmacSha256(cryptoLib.lib));

            case 7:
              return _context3.abrupt("return", new NodeCryptoHmacSha256(cryptoLib.lib.createHmac));

            case 8:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _createHmacSha.apply(this, arguments);
  }

  var NodeCryptoAesCipher = /*#__PURE__*/function () {
    function NodeCryptoAesCipher(createCipher, createDecipher) {
      this.createCipher = createCipher;
      this.createDecipher = createDecipher;
    }

    var _proto = NodeCryptoAesCipher.prototype;

    _proto.encrypt = /*#__PURE__*/function () {
      var _encrypt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(algorithm, key, iv, data) {
        var cipher, result;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc')) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

              case 2:
                cipher = this.createCipher(algorithm, key, iv);
                result = Buffer.concat([cipher.update(data), cipher["final"]()]);
                return _context.abrupt("return", Promise.resolve(result));

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function encrypt(_x, _x2, _x3, _x4) {
        return _encrypt.apply(this, arguments);
      }

      return encrypt;
    }();

    _proto.decrypt = /*#__PURE__*/function () {
      var _decrypt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(algorithm, key, iv, data) {
        var cipher, result;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(algorithm !== 'aes-128-cbc' && algorithm !== 'aes-256-cbc')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

              case 2:
                cipher = this.createDecipher(algorithm, key, iv);
                result = Buffer.concat([cipher.update(data), cipher["final"]()]);
                return _context2.abrupt("return", Promise.resolve(result));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function decrypt(_x5, _x6, _x7, _x8) {
        return _decrypt.apply(this, arguments);
      }

      return decrypt;
    }();

    return NodeCryptoAesCipher;
  }();
  var WebCryptoAesCipher = /*#__PURE__*/function () {
    function WebCryptoAesCipher(subtleCrypto) {
      this.subtleCrypto = subtleCrypto;
    }

    var _proto2 = WebCryptoAesCipher.prototype;

    _proto2.encrypt = /*#__PURE__*/function () {
      var _encrypt2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(algorithm, key, iv, data) {
        var algo, length, cryptoKey, result;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(algorithm === 'aes-128-cbc')) {
                  _context3.next = 5;
                  break;
                }

                algo = 'AES-CBC';
                length = 128;
                _context3.next = 11;
                break;

              case 5:
                if (!(algorithm === 'aes-256-cbc')) {
                  _context3.next = 10;
                  break;
                }

                algo = 'AES-CBC';
                length = 256;
                _context3.next = 11;
                break;

              case 10:
                throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

              case 11:
                _context3.next = 13;
                return this.subtleCrypto.importKey('raw', key, {
                  name: algo,
                  length: length
                }, false, ['encrypt']);

              case 13:
                cryptoKey = _context3.sent;
                _context3.next = 16;
                return this.subtleCrypto.encrypt({
                  name: algo,
                  iv: iv
                }, cryptoKey, data);

              case 16:
                result = _context3.sent;
                return _context3.abrupt("return", Buffer.from(result));

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function encrypt(_x9, _x10, _x11, _x12) {
        return _encrypt2.apply(this, arguments);
      }

      return encrypt;
    }();

    _proto2.decrypt = /*#__PURE__*/function () {
      var _decrypt2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(algorithm, key, iv, data) {
        var algo, length, cryptoKey, result;
        return runtime_1.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(algorithm === 'aes-128-cbc')) {
                  _context4.next = 5;
                  break;
                }

                algo = 'AES-CBC';
                length = 128;
                _context4.next = 11;
                break;

              case 5:
                if (!(algorithm === 'aes-256-cbc')) {
                  _context4.next = 10;
                  break;
                }

                algo = 'AES-CBC';
                length = 256;
                _context4.next = 11;
                break;

              case 10:
                throw new Error("Unsupported cipher algorithm \"" + algorithm + "\"");

              case 11:
                _context4.next = 13;
                return this.subtleCrypto.importKey('raw', key, {
                  name: algo,
                  length: length
                }, false, ['decrypt']);

              case 13:
                cryptoKey = _context4.sent;
                _context4.next = 16;
                return this.subtleCrypto.decrypt({
                  name: algo,
                  iv: iv
                }, cryptoKey, data);

              case 16:
                result = _context4.sent;
                return _context4.abrupt("return", Buffer.from(result));

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function decrypt(_x13, _x14, _x15, _x16) {
        return _decrypt2.apply(this, arguments);
      }

      return decrypt;
    }();

    return WebCryptoAesCipher;
  }();
  function createCipher() {
    return _createCipher.apply(this, arguments);
  }

  function _createCipher() {
    _createCipher = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      var cryptoLib;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return getCryptoLib();

            case 2:
              cryptoLib = _context5.sent;

              if (!(cryptoLib.name === 'subtleCrypto')) {
                _context5.next = 7;
                break;
              }

              return _context5.abrupt("return", new WebCryptoAesCipher(cryptoLib.lib));

            case 7:
              return _context5.abrupt("return", new NodeCryptoAesCipher(cryptoLib.lib.createCipheriv, cryptoLib.lib.createDecipheriv));

            case 8:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _createCipher.apply(this, arguments);
  }

  function getAesCbcOutputLength(inputByteLength) {
    var cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;
    return cipherTextLength;
  }
  function getBase64OutputLength(inputByteLength) {
    var encodedLength = Math.ceil(inputByteLength / 3) * 4;
    return encodedLength;
  }
  function hashCode(string) {
    var hash = 0;
    if (string.length === 0) return hash;

    for (var i = 0; i < string.length; i++) {
      var character = string.charCodeAt(i);
      hash = (hash << 5) - hash + character;
      hash &= hash;
    }

    return hash & 0x7fffffff;
  }

  var ecurve = /*#__PURE__*/new elliptic.ec('secp256k1');
  function aes256CbcEncrypt(_x, _x2, _x3) {
    return _aes256CbcEncrypt.apply(this, arguments);
  }

  function _aes256CbcEncrypt() {
    _aes256CbcEncrypt = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(iv, key, plaintext) {
      var cipher, result;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return createCipher();

            case 2:
              cipher = _context.sent;
              _context.next = 5;
              return cipher.encrypt('aes-256-cbc', key, iv, plaintext);

            case 5:
              result = _context.sent;
              return _context.abrupt("return", result);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _aes256CbcEncrypt.apply(this, arguments);
  }

  function aes256CbcDecrypt(_x4, _x5, _x6) {
    return _aes256CbcDecrypt.apply(this, arguments);
  }

  function _aes256CbcDecrypt() {
    _aes256CbcDecrypt = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(iv, key, ciphertext) {
      var cipher, result;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return createCipher();

            case 2:
              cipher = _context2.sent;
              _context2.next = 5;
              return cipher.decrypt('aes-256-cbc', key, iv, ciphertext);

            case 5:
              result = _context2.sent;
              return _context2.abrupt("return", result);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _aes256CbcDecrypt.apply(this, arguments);
  }

  function hmacSha256(_x7, _x8) {
    return _hmacSha.apply(this, arguments);
  }

  function _hmacSha() {
    _hmacSha = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(key, content) {
      var hmacSha256;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return createHmacSha256();

            case 2:
              hmacSha256 = _context3.sent;
              return _context3.abrupt("return", hmacSha256.digest(key, content));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _hmacSha.apply(this, arguments);
  }

  function equalConstTime(b1, b2) {
    if (b1.length !== b2.length) {
      return false;
    }

    var res = 0;

    for (var i = 0; i < b1.length; i++) {
      res |= b1[i] ^ b2[i];
    }

    return res === 0;
  }

  function sharedSecretToKeys(sharedSecret) {
    var hashedSecret = hashSha512Sync(sharedSecret);
    return {
      encryptionKey: hashedSecret.slice(0, 32),
      hmacKey: hashedSecret.slice(32)
    };
  }

  function getHexFromBN(bnInput) {
    var hexOut = bnInput.toString('hex', 64);

    if (hexOut.length === 64) {
      return hexOut;
    } else if (hexOut.length < 64) {
      var padding = '0'.repeat(64 - hexOut.length);
      return "" + padding + hexOut;
    } else {
      throw new Error('Generated a > 32-byte BN for encryption. Failing.');
    }
  }
  function getBufferFromBN(bnInput) {
    var result = bnInput.toArrayLike(Buffer, 'be', 32);

    if (result.byteLength !== 32) {
      throw new Error('Generated a 32-byte BN for encryption. Failing.');
    }

    return result;
  }
  function getCipherObjectWrapper(opts) {
    var shell = {
      iv: '',
      ephemeralPK: '',
      mac: '',
      cipherText: '',
      wasString: !!opts.wasString
    };

    if (opts.cipherTextEncoding === 'base64') {
      shell.cipherTextEncoding = 'base64';
    }

    var ivLength = 32;
    var ephemeralPKLength = 66;
    var macLength = 64;
    return {
      payloadValuesLength: ivLength + ephemeralPKLength + macLength,
      payloadShell: JSON.stringify(shell)
    };
  }
  function getSignedCipherObjectWrapper(payloadShell) {
    var shell = {
      signature: '',
      publicKey: '',
      cipherText: payloadShell
    };
    var signatureLength = 144;
    var publicKeyLength = 66;
    return {
      signedPayloadValuesLength: signatureLength + publicKeyLength,
      signedPayloadShell: JSON.stringify(shell)
    };
  }
  function eciesGetJsonStringLength(opts) {
    var _getCipherObjectWrapp = getCipherObjectWrapper(opts),
        payloadShell = _getCipherObjectWrapp.payloadShell,
        payloadValuesLength = _getCipherObjectWrapp.payloadValuesLength;

    var cipherTextLength = getAesCbcOutputLength(opts.contentLength);
    var encodedCipherTextLength;

    if (!opts.cipherTextEncoding || opts.cipherTextEncoding === 'hex') {
      encodedCipherTextLength = cipherTextLength * 2;
    } else if (opts.cipherTextEncoding === 'base64') {
      encodedCipherTextLength = getBase64OutputLength(cipherTextLength);
    } else {
      throw new Error("Unexpected cipherTextEncoding \"" + opts.cipherTextEncoding + "\"");
    }

    if (!opts.sign) {
      return payloadShell.length + payloadValuesLength + encodedCipherTextLength;
    } else {
      var _getSignedCipherObjec = getSignedCipherObjectWrapper(payloadShell),
          signedPayloadShell = _getSignedCipherObjec.signedPayloadShell,
          signedPayloadValuesLength = _getSignedCipherObjec.signedPayloadValuesLength;

      return signedPayloadShell.length + signedPayloadValuesLength + payloadValuesLength + encodedCipherTextLength;
    }
  }
  function encryptECIES(_x9, _x10, _x11, _x12) {
    return _encryptECIES.apply(this, arguments);
  }

  function _encryptECIES() {
    _encryptECIES = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(publicKey, content, wasString, cipherTextEncoding) {
      var ecPK, ephemeralSK, ephemeralPK, sharedSecret, sharedSecretBuffer, sharedKeys, initializationVector, cipherText, macData, mac, cipherTextString, result;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              ecPK = ecurve.keyFromPublic(publicKey, 'hex').getPublic();
              ephemeralSK = ecurve.genKeyPair();
              ephemeralPK = Buffer.from(ephemeralSK.getPublic().encodeCompressed());
              sharedSecret = ephemeralSK.derive(ecPK);
              sharedSecretBuffer = getBufferFromBN(sharedSecret);
              sharedKeys = sharedSecretToKeys(sharedSecretBuffer);
              initializationVector = randomBytes__default['default'](16);
              _context4.next = 9;
              return aes256CbcEncrypt(initializationVector, sharedKeys.encryptionKey, content);

            case 9:
              cipherText = _context4.sent;
              macData = Buffer.concat([initializationVector, ephemeralPK, cipherText]);
              _context4.next = 13;
              return hmacSha256(sharedKeys.hmacKey, macData);

            case 13:
              mac = _context4.sent;

              if (!(!cipherTextEncoding || cipherTextEncoding === 'hex')) {
                _context4.next = 18;
                break;
              }

              cipherTextString = cipherText.toString('hex');
              _context4.next = 23;
              break;

            case 18:
              if (!(cipherTextEncoding === 'base64')) {
                _context4.next = 22;
                break;
              }

              cipherTextString = cipherText.toString('base64');
              _context4.next = 23;
              break;

            case 22:
              throw new Error("Unexpected cipherTextEncoding \"" + cipherTextEncoding + "\"");

            case 23:
              result = {
                iv: initializationVector.toString('hex'),
                ephemeralPK: ephemeralPK.toString('hex'),
                cipherText: cipherTextString,
                mac: mac.toString('hex'),
                wasString: !!wasString
              };

              if (cipherTextEncoding && cipherTextEncoding !== 'hex') {
                result.cipherTextEncoding = cipherTextEncoding;
              }

              return _context4.abrupt("return", result);

            case 26:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _encryptECIES.apply(this, arguments);
  }

  function decryptECIES(_x13, _x14) {
    return _decryptECIES.apply(this, arguments);
  }

  function _decryptECIES() {
    _decryptECIES = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(privateKey, cipherObject) {
      var ecSK, ephemeralPK, sharedSecret, sharedSecretBuffer, sharedKeys, ivBuffer, cipherTextBuffer, macData, actualMac, expectedMac, plainText;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              ecSK = ecurve.keyFromPrivate(privateKey, 'hex');
              ephemeralPK = null;
              _context5.prev = 2;
              ephemeralPK = ecurve.keyFromPublic(cipherObject.ephemeralPK, 'hex').getPublic();
              _context5.next = 9;
              break;

            case 6:
              _context5.prev = 6;
              _context5.t0 = _context5["catch"](2);
              throw new common.FailedDecryptionError('Unable to get public key from cipher object. ' + 'You might be trying to decrypt an unencrypted object.');

            case 9:
              sharedSecret = ecSK.derive(ephemeralPK);
              sharedSecretBuffer = getBufferFromBN(sharedSecret);
              sharedKeys = sharedSecretToKeys(sharedSecretBuffer);
              ivBuffer = Buffer.from(cipherObject.iv, 'hex');

              if (!(!cipherObject.cipherTextEncoding || cipherObject.cipherTextEncoding === 'hex')) {
                _context5.next = 17;
                break;
              }

              cipherTextBuffer = Buffer.from(cipherObject.cipherText, 'hex');
              _context5.next = 22;
              break;

            case 17:
              if (!(cipherObject.cipherTextEncoding === 'base64')) {
                _context5.next = 21;
                break;
              }

              cipherTextBuffer = Buffer.from(cipherObject.cipherText, 'base64');
              _context5.next = 22;
              break;

            case 21:
              throw new Error("Unexpected cipherTextEncoding \"" + cipherObject.cipherText + "\"");

            case 22:
              macData = Buffer.concat([ivBuffer, Buffer.from(ephemeralPK.encodeCompressed()), cipherTextBuffer]);
              _context5.next = 25;
              return hmacSha256(sharedKeys.hmacKey, macData);

            case 25:
              actualMac = _context5.sent;
              expectedMac = Buffer.from(cipherObject.mac, 'hex');

              if (equalConstTime(expectedMac, actualMac)) {
                _context5.next = 29;
                break;
              }

              throw new common.FailedDecryptionError('Decryption failed: failure in MAC check');

            case 29:
              _context5.next = 31;
              return aes256CbcDecrypt(ivBuffer, sharedKeys.encryptionKey, cipherTextBuffer);

            case 31:
              plainText = _context5.sent;

              if (!cipherObject.wasString) {
                _context5.next = 36;
                break;
              }

              return _context5.abrupt("return", plainText.toString());

            case 36:
              return _context5.abrupt("return", plainText);

            case 37:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[2, 6]]);
    }));
    return _decryptECIES.apply(this, arguments);
  }

  function signECDSA(privateKey, content) {
    var contentBuffer = content instanceof Buffer ? content : Buffer.from(content);
    var ecPrivate = ecurve.keyFromPrivate(privateKey, 'hex');
    var publicKey = getPublicKeyFromPrivate(privateKey);
    var contentHash = hashSha256Sync(contentBuffer);
    var signature = ecPrivate.sign(contentHash);
    var signatureString = signature.toDER('hex');
    return {
      signature: signatureString,
      publicKey: publicKey
    };
  }

  function getBuffer(content) {
    if (content instanceof Buffer) return content;else if (content instanceof ArrayBuffer) return Buffer.from(content);else return Buffer.from(content);
  }

  function verifyECDSA(content, publicKey, signature) {
    var contentBuffer = getBuffer(content);
    var ecPublic = ecurve.keyFromPublic(publicKey, 'hex');
    var contentHash = hashSha256Sync(contentBuffer);
    return ecPublic.verify(contentHash, signature);
  }

  var NodeCryptoPbkdf2 = /*#__PURE__*/function () {
    function NodeCryptoPbkdf2(nodePbkdf2) {
      this.nodePbkdf2 = nodePbkdf2;
    }

    var _proto = NodeCryptoPbkdf2.prototype;

    _proto.derive = /*#__PURE__*/function () {
      var _derive = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(password, salt, iterations, keyLength, digest) {
        var _this = this;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(digest !== 'sha512' && digest !== 'sha256')) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Unsupported digest \"" + digest + "\" for Pbkdf2");

              case 2:
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  _this.nodePbkdf2(password, salt, iterations, keyLength, digest, function (error, result) {
                    if (error) {
                      reject(error);
                    }

                    resolve(result);
                  });
                }));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function derive(_x, _x2, _x3, _x4, _x5) {
        return _derive.apply(this, arguments);
      }

      return derive;
    }();

    return NodeCryptoPbkdf2;
  }();
  var WebCryptoPbkdf2 = /*#__PURE__*/function () {
    function WebCryptoPbkdf2(subtleCrypto) {
      this.subtleCrypto = subtleCrypto;
    }

    var _proto2 = WebCryptoPbkdf2.prototype;

    _proto2.derive = /*#__PURE__*/function () {
      var _derive2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(password, salt, iterations, keyLength, digest) {
        var algo, result, passwordBytes, key, partialWebCrypto;
        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(digest === 'sha256')) {
                  _context2.next = 4;
                  break;
                }

                algo = 'SHA-256';
                _context2.next = 9;
                break;

              case 4:
                if (!(digest === 'sha512')) {
                  _context2.next = 8;
                  break;
                }

                algo = 'SHA-512';
                _context2.next = 9;
                break;

              case 8:
                throw new Error("Unsupported Pbkdf2 digest algorithm \"" + digest + "\"");

              case 9:
                passwordBytes = Buffer.from(password, 'utf8');
                _context2.prev = 10;
                _context2.next = 13;
                return this.subtleCrypto.importKey('raw', passwordBytes, 'PBKDF2', false, ['deriveBits']);

              case 13:
                key = _context2.sent;
                _context2.next = 16;
                return this.subtleCrypto.deriveBits({
                  name: 'PBKDF2',
                  salt: salt,
                  iterations: iterations,
                  hash: {
                    name: algo
                  }
                }, key, keyLength * 8);

              case 16:
                result = _context2.sent;
                _context2.next = 23;
                break;

              case 19:
                _context2.prev = 19;
                _context2.t0 = _context2["catch"](10);
                partialWebCrypto = new WebCryptoPartialPbkdf2(this.subtleCrypto);
                return _context2.abrupt("return", partialWebCrypto.derive(password, salt, iterations, keyLength, digest));

              case 23:
                return _context2.abrupt("return", Buffer.from(result));

              case 24:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[10, 19]]);
      }));

      function derive(_x6, _x7, _x8, _x9, _x10) {
        return _derive2.apply(this, arguments);
      }

      return derive;
    }();

    return WebCryptoPbkdf2;
  }();
  var WebCryptoPartialPbkdf2 = /*#__PURE__*/function () {
    function WebCryptoPartialPbkdf2(subtleCrypto) {
      this.subtleCrypto = subtleCrypto;
    }

    var _proto3 = WebCryptoPartialPbkdf2.prototype;

    _proto3.derive = /*#__PURE__*/function () {
      var _derive3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(password, salt, iterations, keyLength, digest) {
        var _this2 = this;

        var key, algo, algoOpts, hmacDigest, DK, saltLength, block1, destPos, hLen, l, writeUInt32BE, i, T, U, j, k;
        return runtime_1.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                writeUInt32BE = function _writeUInt32BE(data, value, offset) {
                  value = +value;
                  offset >>>= 0;
                  data[offset] = value >>> 24;
                  data[offset + 1] = value >>> 16;
                  data[offset + 2] = value >>> 8;
                  data[offset + 3] = value & 0xff;
                  return offset + 4;
                };

                if (!(digest !== 'sha512' && digest !== 'sha256')) {
                  _context3.next = 3;
                  break;
                }

                throw new Error("Unsupported digest \"" + digest + "\" for Pbkdf2");

              case 3:
                key = Buffer.from(password, 'utf8');
                algo = digest === 'sha512' ? 'SHA-512' : 'SHA-256';
                algoOpts = {
                  name: 'HMAC',
                  hash: algo
                };

                hmacDigest = function hmacDigest(key, data) {
                  return _this2.subtleCrypto.importKey('raw', key, algoOpts, true, ['sign']).then(function (cryptoKey) {
                    return _this2.subtleCrypto.sign(algoOpts, cryptoKey, data);
                  }).then(function (result) {
                    return new Uint8Array(result);
                  });
                };

                DK = new Uint8Array(keyLength);
                saltLength = salt.length;
                block1 = new Uint8Array(saltLength + 4);
                block1.set(salt);
                destPos = 0;
                hLen = digest === 'sha512' ? 64 : 32;
                l = Math.ceil(keyLength / hLen);
                i = 1;

              case 15:
                if (!(i <= l)) {
                  _context3.next = 35;
                  break;
                }

                writeUInt32BE(block1, i, saltLength);
                _context3.next = 19;
                return hmacDigest(key, block1);

              case 19:
                T = _context3.sent;
                U = T;
                j = 1;

              case 22:
                if (!(j < iterations)) {
                  _context3.next = 30;
                  break;
                }

                _context3.next = 25;
                return hmacDigest(key, U);

              case 25:
                U = _context3.sent;

                for (k = 0; k < hLen; k++) {
                  T[k] ^= U[k];
                }

              case 27:
                j++;
                _context3.next = 22;
                break;

              case 30:
                DK.set(T.subarray(0, DK.byteLength - destPos), destPos);
                destPos += hLen;

              case 32:
                i++;
                _context3.next = 15;
                break;

              case 35:
                return _context3.abrupt("return", Buffer.from(DK.buffer));

              case 36:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function derive(_x11, _x12, _x13, _x14, _x15) {
        return _derive3.apply(this, arguments);
      }

      return derive;
    }();

    return WebCryptoPartialPbkdf2;
  }();
  function createPbkdf2() {
    return _createPbkdf.apply(this, arguments);
  }

  function _createPbkdf() {
    _createPbkdf = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var cryptoLib;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return getCryptoLib();

            case 2:
              cryptoLib = _context4.sent;

              if (!(cryptoLib.name === 'subtleCrypto')) {
                _context4.next = 7;
                break;
              }

              return _context4.abrupt("return", new WebCryptoPbkdf2(cryptoLib.lib));

            case 7:
              return _context4.abrupt("return", new NodeCryptoPbkdf2(cryptoLib.lib.pbkdf2));

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _createPbkdf.apply(this, arguments);
  }

  function encryptMnemonic(_x, _x2, _x3) {
    return _encryptMnemonic.apply(this, arguments);
  }

  function _encryptMnemonic() {
    _encryptMnemonic = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(phrase, password, opts) {
      var mnemonicEntropy, plaintextNormalized, pbkdf2, salt, keysAndIV, encKey, macKey, iv, cipher, cipherText, hmacPayload, hmacSha256, hmacDigest, payload;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              mnemonicEntropy = bip39.mnemonicToEntropy(phrase);
              _context.next = 9;
              break;

            case 4:
              _context.prev = 4;
              _context.t0 = _context["catch"](0);
              console.error('Invalid mnemonic phrase provided');
              console.error(_context.t0);
              throw new Error('Not a valid bip39 mnemonic');

            case 9:
              plaintextNormalized = Buffer.from(mnemonicEntropy, 'hex');
              _context.next = 12;
              return createPbkdf2();

            case 12:
              pbkdf2 = _context.sent;

              if (opts && opts.getRandomBytes) {
                salt = opts.getRandomBytes(16);
              } else {
                salt = randomBytes__default['default'](16);
              }

              _context.next = 16;
              return pbkdf2.derive(password, salt, 100000, 48, 'sha512');

            case 16:
              keysAndIV = _context.sent;
              encKey = keysAndIV.slice(0, 16);
              macKey = keysAndIV.slice(16, 32);
              iv = keysAndIV.slice(32, 48);
              _context.next = 22;
              return createCipher();

            case 22:
              cipher = _context.sent;
              _context.next = 25;
              return cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);

            case 25:
              cipherText = _context.sent;
              hmacPayload = Buffer.concat([salt, cipherText]);
              _context.next = 29;
              return createHmacSha256();

            case 29:
              hmacSha256 = _context.sent;
              _context.next = 32;
              return hmacSha256.digest(macKey, hmacPayload);

            case 32:
              hmacDigest = _context.sent;
              payload = Buffer.concat([salt, hmacDigest, cipherText]);
              return _context.abrupt("return", payload);

            case 35:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 4]]);
    }));
    return _encryptMnemonic.apply(this, arguments);
  }

  var PasswordError = /*#__PURE__*/function (_Error) {
    _inheritsLoose(PasswordError, _Error);

    function PasswordError() {
      return _Error.apply(this, arguments) || this;
    }

    return PasswordError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  function decryptMnemonicBuffer(_x4, _x5) {
    return _decryptMnemonicBuffer.apply(this, arguments);
  }

  function _decryptMnemonicBuffer() {
    _decryptMnemonicBuffer = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(dataBuffer, password) {
      var salt, hmacSig, cipherText, hmacPayload, pbkdf2, keysAndIV, encKey, macKey, iv, decipher, decryptedResult, hmacSha256, hmacDigest, sha2Hash, hmacSigHash, hmacDigestHash, mnemonic;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              salt = dataBuffer.slice(0, 16);
              hmacSig = dataBuffer.slice(16, 48);
              cipherText = dataBuffer.slice(48);
              hmacPayload = Buffer.concat([salt, cipherText]);
              _context2.next = 6;
              return createPbkdf2();

            case 6:
              pbkdf2 = _context2.sent;
              _context2.next = 9;
              return pbkdf2.derive(password, salt, 100000, 48, 'sha512');

            case 9:
              keysAndIV = _context2.sent;
              encKey = keysAndIV.slice(0, 16);
              macKey = keysAndIV.slice(16, 32);
              iv = keysAndIV.slice(32, 48);
              _context2.next = 15;
              return createCipher();

            case 15:
              decipher = _context2.sent;
              _context2.next = 18;
              return decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);

            case 18:
              decryptedResult = _context2.sent;
              _context2.next = 21;
              return createHmacSha256();

            case 21:
              hmacSha256 = _context2.sent;
              _context2.next = 24;
              return hmacSha256.digest(macKey, hmacPayload);

            case 24:
              hmacDigest = _context2.sent;
              _context2.next = 27;
              return createSha2Hash();

            case 27:
              sha2Hash = _context2.sent;
              _context2.next = 30;
              return sha2Hash.digest(hmacSig);

            case 30:
              hmacSigHash = _context2.sent;
              _context2.next = 33;
              return sha2Hash.digest(hmacDigest);

            case 33:
              hmacDigestHash = _context2.sent;

              if (hmacSigHash.equals(hmacDigestHash)) {
                _context2.next = 36;
                break;
              }

              throw new PasswordError('Wrong password (HMAC mismatch)');

            case 36:
              _context2.prev = 36;
              mnemonic = bip39.entropyToMnemonic(decryptedResult);
              _context2.next = 45;
              break;

            case 40:
              _context2.prev = 40;
              _context2.t0 = _context2["catch"](36);
              console.error('Error thrown by `entropyToMnemonic`');
              console.error(_context2.t0);
              throw new PasswordError('Wrong password (invalid plaintext)');

            case 45:
              if (bip39.validateMnemonic(mnemonic)) {
                _context2.next = 47;
                break;
              }

              throw new PasswordError('Wrong password (invalid plaintext)');

            case 47:
              return _context2.abrupt("return", mnemonic);

            case 48:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[36, 40]]);
    }));
    return _decryptMnemonicBuffer.apply(this, arguments);
  }

  function decryptLegacy(dataBuffer, password, triplesecDecrypt) {
    return new Promise(function (resolve, reject) {
      if (!triplesecDecrypt) {
        reject(new Error('The `triplesec.decrypt` function must be provided'));
      }

      triplesecDecrypt({
        key: Buffer.from(password),
        data: dataBuffer
      }, function (err, plaintextBuffer) {
        if (!err) {
          resolve(plaintextBuffer);
        } else {
          reject(err);
        }
      });
    });
  }

  function decryptMnemonic(_x6, _x7, _x8) {
    return _decryptMnemonic.apply(this, arguments);
  }

  function _decryptMnemonic() {
    _decryptMnemonic = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(data, password, triplesecDecrypt) {
      var dataBuffer, _data;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');
              _context3.prev = 1;
              _context3.next = 4;
              return decryptMnemonicBuffer(dataBuffer, password);

            case 4:
              return _context3.abrupt("return", _context3.sent);

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](1);

              if (!(_context3.t0 instanceof PasswordError)) {
                _context3.next = 11;
                break;
              }

              throw _context3.t0;

            case 11:
              _context3.next = 13;
              return decryptLegacy(dataBuffer, password, triplesecDecrypt);

            case 13:
              _data = _context3.sent;
              return _context3.abrupt("return", _data.toString());

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[1, 7]]);
    }));
    return _decryptMnemonic.apply(this, arguments);
  }

  function encryptContent(_x, _x2) {
    return _encryptContent.apply(this, arguments);
  }

  function _encryptContent() {
    _encryptContent = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(content, options) {
      var opts, privateKey, wasString, contentBuffer, cipherObject, cipherPayload, signatureObject, signedCipherObject;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              opts = Object.assign({}, options);

              if (opts.publicKey) {
                _context.next = 5;
                break;
              }

              if (opts.privateKey) {
                _context.next = 4;
                break;
              }

              throw new Error('Either public key or private key must be supplied for encryption.');

            case 4:
              opts.publicKey = getPublicKeyFromPrivate(opts.privateKey);

            case 5:
              if (typeof opts.wasString === 'boolean') {
                wasString = opts.wasString;
              } else {
                wasString = typeof content === 'string';
              }

              contentBuffer = typeof content === 'string' ? Buffer.from(content) : content;
              _context.next = 9;
              return encryptECIES(opts.publicKey, contentBuffer, wasString, opts.cipherTextEncoding);

            case 9:
              cipherObject = _context.sent;
              cipherPayload = JSON.stringify(cipherObject);

              if (opts.sign) {
                if (typeof opts.sign === 'string') {
                  privateKey = opts.sign;
                } else if (!privateKey) {
                  privateKey = opts.privateKey;
                }

                signatureObject = signECDSA(privateKey, cipherPayload);
                signedCipherObject = {
                  signature: signatureObject.signature,
                  publicKey: signatureObject.publicKey,
                  cipherText: cipherPayload
                };
                cipherPayload = JSON.stringify(signedCipherObject);
              }

              return _context.abrupt("return", cipherPayload);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _encryptContent.apply(this, arguments);
  }

  function decryptContent(content, options) {
    var opts = Object.assign({}, options);

    if (!opts.privateKey) {
      throw new Error('Private key is required for decryption.');
    }

    try {
      var cipherObject = JSON.parse(content);
      return decryptECIES(opts.privateKey, cipherObject);
    } catch (err) {
      if (err instanceof SyntaxError) {
        throw new Error('Failed to parse encrypted content JSON. The content may not ' + 'be encrypted. If using getFile, try passing { decrypt: false }.');
      } else {
        throw err;
      }
    }
  }

  Object.defineProperty(exports, 'randomBytes', {
    enumerable: true,
    get: function () {
      return randomBytes__default['default'];
    }
  });
  exports.NodeCryptoSha2Hash = NodeCryptoSha2Hash;
  exports.WebCryptoSha2Hash = WebCryptoSha2Hash;
  exports.aes256CbcEncrypt = aes256CbcEncrypt;
  exports.createSha2Hash = createSha2Hash;
  exports.decryptContent = decryptContent;
  exports.decryptECIES = decryptECIES;
  exports.decryptMnemonic = decryptMnemonic;
  exports.ecPairToAddress = ecPairToAddress;
  exports.ecPairToHexString = ecPairToHexString;
  exports.eciesGetJsonStringLength = eciesGetJsonStringLength;
  exports.encryptContent = encryptContent;
  exports.encryptECIES = encryptECIES;
  exports.encryptMnemonic = encryptMnemonic;
  exports.getAesCbcOutputLength = getAesCbcOutputLength;
  exports.getBase64OutputLength = getBase64OutputLength;
  exports.getBufferFromBN = getBufferFromBN;
  exports.getCipherObjectWrapper = getCipherObjectWrapper;
  exports.getEntropy = getEntropy;
  exports.getHexFromBN = getHexFromBN;
  exports.getPublicKeyFromPrivate = getPublicKeyFromPrivate;
  exports.getSignedCipherObjectWrapper = getSignedCipherObjectWrapper;
  exports.hashCode = hashCode;
  exports.hashSha256Sync = hashSha256Sync;
  exports.hashSha512Sync = hashSha512Sync;
  exports.hexStringToECPair = hexStringToECPair;
  exports.makeECPrivateKey = makeECPrivateKey;
  exports.publicKeyToAddress = publicKeyToAddress;
  exports.signECDSA = signECDSA;
  exports.verifyECDSA = verifyECDSA;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=encryption.umd.development.js.map
