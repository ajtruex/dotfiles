{"version":3,"file":"cryptoUtils.esm.js","sources":["../src/cryptoUtils.ts"],"sourcesContent":["export function isSubtleCryptoAvailable(): boolean {\n  return typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined';\n}\n\nexport function isNodeCryptoAvailable<T>(\n  withFeature: (nodeCrypto: typeof import('crypto')) => boolean | T\n): false | T;\nexport function isNodeCryptoAvailable<T>(\n  withFeature?: (nodeCrypto: typeof import('crypto')) => boolean | T\n): boolean | T {\n  try {\n    const resolvedResult = require.resolve('crypto');\n    if (!resolvedResult) {\n      return false;\n    }\n    // eslint-disable-next-line import/no-nodejs-modules,no-restricted-modules,global-require\n    const cryptoModule = require('crypto') as typeof import('crypto');\n    if (!cryptoModule) {\n      return false;\n    }\n    if (withFeature) {\n      const features = withFeature(cryptoModule);\n      return features;\n    }\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const NO_CRYPTO_LIB =\n  'Crypto lib not found. Either the WebCrypto \"crypto.subtle\" or Node.js \"crypto\" module must be available.';\n\nexport type TriplesecDecryptSignature = (\n  arg: { data: Buffer; key: Buffer },\n  cb: (err: Error | null, buff: Buffer | null) => void\n) => void;\n\nexport interface WebCryptoLib {\n  lib: SubtleCrypto;\n  name: 'subtleCrypto';\n}\n\nexport interface NodeCryptoLib {\n  lib: typeof import('crypto');\n  name: 'nodeCrypto';\n}\n\n// Make async for future version which may lazy load.\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function getCryptoLib(): Promise<WebCryptoLib | NodeCryptoLib> {\n  if (isSubtleCryptoAvailable()) {\n    return {\n      lib: crypto.subtle,\n      name: 'subtleCrypto',\n    };\n  } else {\n    try {\n      // eslint-disable-next-line max-len\n      // eslint-disable-next-line import/no-nodejs-modules,no-restricted-modules,global-require,@typescript-eslint/no-var-requires\n      const nodeCrypto = require('crypto') as typeof import('crypto');\n      return {\n        lib: nodeCrypto,\n        name: 'nodeCrypto',\n      };\n    } catch (error) {\n      throw new Error(NO_CRYPTO_LIB);\n    }\n  }\n}\n"],"names":["isSubtleCryptoAvailable","crypto","subtle","isNodeCryptoAvailable","withFeature","resolvedResult","require","resolve","cryptoModule","features","error","NO_CRYPTO_LIB","getCryptoLib","lib","name","nodeCrypto","Error"],"mappings":";;;SAAgBA;AACd,SAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,MAAd,KAAyB,WAAjE;AACD;SAKeC,sBACdC;AAEA,MAAI;AACF,QAAMC,cAAc,GAAGC,OAAO,CAACC,OAAR,CAAgB,QAAhB,CAAvB;;AACA,QAAI,CAACF,cAAL,EAAqB;AACnB,aAAO,KAAP;AACD;;AAED,QAAMG,YAAY,GAAGF,OAAO,CAAC,QAAD,CAA5B;;AACA,QAAI,CAACE,YAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AACD,QAAIJ,WAAJ,EAAiB;AACf,UAAMK,QAAQ,GAAGL,WAAW,CAACI,YAAD,CAA5B;AACA,aAAOC,QAAP;AACD;;AACD,WAAO,IAAP;AACD,GAfD,CAeE,OAAOC,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AACF;IAEYC,aAAa,GACxB;SAmBoBC,YAAtB;AAAA;AAAA;;;iEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDZ,uBAAuB,EADtB;AAAA;AAAA;AAAA;;AAAA,6CAEI;AACLa,cAAAA,GAAG,EAAEZ,MAAM,CAACC,MADP;AAELY,cAAAA,IAAI,EAAE;AAFD,aAFJ;;AAAA;AAAA;AAUKC,YAAAA,UAVL,GAUkBT,OAAO,CAAC,QAAD,CAVzB;AAAA,6CAWM;AACLO,cAAAA,GAAG,EAAEE,UADA;AAELD,cAAAA,IAAI,EAAE;AAFD,aAXN;;AAAA;AAAA;AAAA;AAAA,kBAgBK,IAAIE,KAAJ,CAAUL,aAAV,CAhBL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;"}