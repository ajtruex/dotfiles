{"version":3,"file":"keys.esm.js","sources":["../src/keys.ts"],"sourcesContent":["import { ECPair, address, networks, Network } from 'bitcoinjs-lib';\nimport { randomBytes } from './cryptoRandom';\nimport { hashSha256Sync } from './sha2Hash';\nimport { hashRipemd160 } from './hashRipemd160';\n\n/**\n *\n * @param numberOfBytes\n *\n * @ignore\n */\nexport function getEntropy(arg: number): Buffer {\n  if (!arg) {\n    arg = 32;\n  }\n  return randomBytes(arg);\n}\n\n/**\n * @ignore\n */\nexport function makeECPrivateKey() {\n  const keyPair = ECPair.makeRandom({ rng: getEntropy });\n  return keyPair.privateKey!.toString('hex');\n}\n\n/**\n * @ignore\n */\nexport function publicKeyToAddress(publicKey: string | Buffer) {\n  const publicKeyBuffer = Buffer.isBuffer(publicKey) ? publicKey : Buffer.from(publicKey, 'hex');\n  const publicKeyHash160 = hashRipemd160(hashSha256Sync(publicKeyBuffer));\n  const result = address.toBase58Check(publicKeyHash160, networks.bitcoin.pubKeyHash);\n  return result;\n}\n\n/**\n * @ignore\n */\nexport function getPublicKeyFromPrivate(privateKey: string | Buffer) {\n  const privateKeyBuffer = Buffer.isBuffer(privateKey)\n    ? privateKey\n    : Buffer.from(privateKey, 'hex');\n  const keyPair = ECPair.fromPrivateKey(privateKeyBuffer);\n  return keyPair.publicKey.toString('hex');\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function hexStringToECPair(skHex: string, network?: Network): ECPair.ECPairInterface {\n  const ecPairOptions = {\n    network: network || networks.bitcoin,\n    compressed: true,\n  };\n\n  if (skHex.length === 66) {\n    if (skHex.slice(64) !== '01') {\n      throw new Error(\n        'Improperly formatted private-key hex string. 66-length hex usually ' +\n          'indicates compressed key, but last byte must be == 1'\n      );\n    }\n    return ECPair.fromPrivateKey(Buffer.from(skHex.slice(0, 64), 'hex'), ecPairOptions);\n  } else if (skHex.length === 64) {\n    ecPairOptions.compressed = false;\n    return ECPair.fromPrivateKey(Buffer.from(skHex, 'hex'), ecPairOptions);\n  } else {\n    throw new Error('Improperly formatted private-key hex string: length should be 64 or 66.');\n  }\n}\n\n/**\n *\n * @ignore\n */\nexport function ecPairToHexString(secretKey: ECPair.ECPairInterface) {\n  const ecPointHex = secretKey.privateKey!.toString('hex');\n  if (secretKey.compressed) {\n    return `${ecPointHex}01`;\n  } else {\n    return ecPointHex;\n  }\n}\n\n/**\n * Creates a bitcoin address string from an ECPair\n * @private\n * @ignore\n */\nexport function ecPairToAddress(keyPair: ECPair.ECPairInterface) {\n  const sha256 = hashSha256Sync(keyPair.publicKey);\n  const hash160 = hashRipemd160(sha256);\n  return address.toBase58Check(hash160, keyPair.network.pubKeyHash);\n}\n"],"names":["getEntropy","arg","randomBytes","makeECPrivateKey","keyPair","ECPair","makeRandom","rng","privateKey","toString","publicKeyToAddress","publicKey","publicKeyBuffer","Buffer","isBuffer","from","publicKeyHash160","hashRipemd160","hashSha256Sync","result","address","toBase58Check","networks","bitcoin","pubKeyHash","getPublicKeyFromPrivate","privateKeyBuffer","fromPrivateKey","hexStringToECPair","skHex","network","ecPairOptions","compressed","length","slice","Error","ecPairToHexString","secretKey","ecPointHex","ecPairToAddress","sha256","hash160"],"mappings":";;;;;SAWgBA,WAAWC;AACzB,MAAI,CAACA,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAG,EAAN;AACD;;AACD,SAAOC,WAAW,CAACD,GAAD,CAAlB;AACD;SAKeE;AACd,MAAMC,OAAO,GAAGC,MAAM,CAACC,UAAP,CAAkB;AAAEC,IAAAA,GAAG,EAAEP;AAAP,GAAlB,CAAhB;AACA,SAAOI,OAAO,CAACI,UAAR,CAAoBC,QAApB,CAA6B,KAA7B,CAAP;AACD;SAKeC,mBAAmBC;AACjC,MAAMC,eAAe,GAAGC,MAAM,CAACC,QAAP,CAAgBH,SAAhB,IAA6BA,SAA7B,GAAyCE,MAAM,CAACE,IAAP,CAAYJ,SAAZ,EAAuB,KAAvB,CAAjE;AACA,MAAMK,gBAAgB,GAAGC,aAAa,CAACC,cAAc,CAACN,eAAD,CAAf,CAAtC;AACA,MAAMO,MAAM,GAAGC,OAAO,CAACC,aAAR,CAAsBL,gBAAtB,EAAwCM,QAAQ,CAACC,OAAT,CAAiBC,UAAzD,CAAf;AACA,SAAOL,MAAP;AACD;SAKeM,wBAAwBjB;AACtC,MAAMkB,gBAAgB,GAAGb,MAAM,CAACC,QAAP,CAAgBN,UAAhB,IACrBA,UADqB,GAErBK,MAAM,CAACE,IAAP,CAAYP,UAAZ,EAAwB,KAAxB,CAFJ;AAGA,MAAMJ,OAAO,GAAGC,MAAM,CAACsB,cAAP,CAAsBD,gBAAtB,CAAhB;AACA,SAAOtB,OAAO,CAACO,SAAR,CAAkBF,QAAlB,CAA2B,KAA3B,CAAP;AACD;SAOemB,kBAAkBC,OAAeC;AAC/C,MAAMC,aAAa,GAAG;AACpBD,IAAAA,OAAO,EAAEA,OAAO,IAAIR,QAAQ,CAACC,OADT;AAEpBS,IAAAA,UAAU,EAAE;AAFQ,GAAtB;;AAKA,MAAIH,KAAK,CAACI,MAAN,KAAiB,EAArB,EAAyB;AACvB,QAAIJ,KAAK,CAACK,KAAN,CAAY,EAAZ,MAAoB,IAAxB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CACJ,wEACE,sDAFE,CAAN;AAID;;AACD,WAAO9B,MAAM,CAACsB,cAAP,CAAsBd,MAAM,CAACE,IAAP,CAAYc,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAZ,EAAgC,KAAhC,CAAtB,EAA8DH,aAA9D,CAAP;AACD,GARD,MAQO,IAAIF,KAAK,CAACI,MAAN,KAAiB,EAArB,EAAyB;AAC9BF,IAAAA,aAAa,CAACC,UAAd,GAA2B,KAA3B;AACA,WAAO3B,MAAM,CAACsB,cAAP,CAAsBd,MAAM,CAACE,IAAP,CAAYc,KAAZ,EAAmB,KAAnB,CAAtB,EAAiDE,aAAjD,CAAP;AACD,GAHM,MAGA;AACL,UAAM,IAAII,KAAJ,CAAU,yEAAV,CAAN;AACD;AACF;SAMeC,kBAAkBC;AAChC,MAAMC,UAAU,GAAGD,SAAS,CAAC7B,UAAV,CAAsBC,QAAtB,CAA+B,KAA/B,CAAnB;;AACA,MAAI4B,SAAS,CAACL,UAAd,EAA0B;AACxB,WAAUM,UAAV;AACD,GAFD,MAEO;AACL,WAAOA,UAAP;AACD;AACF;SAOeC,gBAAgBnC;AAC9B,MAAMoC,MAAM,GAAGtB,cAAc,CAACd,OAAO,CAACO,SAAT,CAA7B;AACA,MAAM8B,OAAO,GAAGxB,aAAa,CAACuB,MAAD,CAA7B;AACA,SAAOpB,OAAO,CAACC,aAAR,CAAsBoB,OAAtB,EAA+BrC,OAAO,CAAC0B,OAAR,CAAgBN,UAA/C,CAAP;AACD;;;;"}