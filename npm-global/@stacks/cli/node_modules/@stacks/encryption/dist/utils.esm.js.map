{"version":3,"file":"utils.esm.js","sources":["../src/utils.ts"],"sourcesContent":["/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n *\n * @ignore\n */\nexport function hashCode(string: string) {\n  let hash = 0;\n  if (string.length === 0) return hash;\n  for (let i = 0; i < string.length; i++) {\n    const character = string.charCodeAt(i);\n    hash = (hash << 5) - hash + character;\n    hash &= hash;\n  }\n  return hash & 0x7fffffff;\n}\n"],"names":["getAesCbcOutputLength","inputByteLength","cipherTextLength","Math","floor","getBase64OutputLength","encodedLength","ceil","hashCode","string","hash","length","i","character","charCodeAt"],"mappings":"SAKgBA,sBAAsBC;AAEpC,MAAMC,gBAAgB,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWH,eAAe,GAAG,EAA7B,IAAmC,CAApC,IAAyC,EAAlE;AACA,SAAOC,gBAAP;AACD;SAQeG,sBAAsBJ;AACpC,MAAMK,aAAa,GAAGH,IAAI,CAACI,IAAL,CAAUN,eAAe,GAAG,CAA5B,IAAiC,CAAvD;AACA,SAAOK,aAAP;AACD;SAMeE,SAASC;AACvB,MAAIC,IAAI,GAAG,CAAX;AACA,MAAID,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB,OAAOD,IAAP;;AACzB,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACE,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtC,QAAMC,SAAS,GAAGJ,MAAM,CAACK,UAAP,CAAkBF,CAAlB,CAAlB;AACAF,IAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAd,GAAqBG,SAA5B;AACAH,IAAAA,IAAI,IAAIA,IAAR;AACD;;AACD,SAAOA,IAAI,GAAG,UAAd;AACD;;;;"}