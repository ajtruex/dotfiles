{"version":3,"file":"hashRipemd160.esm.js","sources":["../src/hashRipemd160.ts"],"sourcesContent":["import Ripemd160Polyfill from 'ripemd160-min';\nimport { isNodeCryptoAvailable } from './cryptoUtils';\n\ntype NodeCryptoCreateHash = typeof import('crypto').createHash;\n\nexport interface Ripemd160Digest {\n  digest(data: Buffer): Buffer;\n}\n\nexport class Ripemd160PolyfillDigest implements Ripemd160Digest {\n  digest(data: Buffer): Buffer {\n    const instance = new Ripemd160Polyfill();\n    instance.update(data);\n    const hash = instance.digest();\n    if (Array.isArray(hash)) {\n      return Buffer.from(hash);\n    } else {\n      return Buffer.from(hash.buffer);\n    }\n  }\n}\n\nexport class NodeCryptoRipemd160Digest implements Ripemd160Digest {\n  nodeCryptoCreateHash: NodeCryptoCreateHash;\n\n  constructor(nodeCryptoCreateHash: NodeCryptoCreateHash) {\n    this.nodeCryptoCreateHash = nodeCryptoCreateHash;\n  }\n\n  digest(data: Buffer): Buffer {\n    try {\n      return this.nodeCryptoCreateHash('rmd160')\n        .update(data)\n        .digest();\n    } catch (error) {\n      try {\n        return this.nodeCryptoCreateHash('ripemd160')\n          .update(data)\n          .digest();\n      } catch (_err) {\n        console.log(error);\n        console.log(\n          'Node.js `crypto.createHash` exists but failing to digest for ripemd160, falling back to js implementation'\n        );\n        const polyfill = new Ripemd160PolyfillDigest();\n        return polyfill.digest(data);\n      }\n    }\n  }\n}\n\nexport function createHashRipemd160() {\n  const nodeCryptoCreateHash = isNodeCryptoAvailable(nodeCrypto => {\n    if (typeof nodeCrypto.createHash === 'function') {\n      return nodeCrypto.createHash;\n    }\n    return false;\n  });\n  if (nodeCryptoCreateHash) {\n    return new NodeCryptoRipemd160Digest(nodeCryptoCreateHash);\n  } else {\n    return new Ripemd160PolyfillDigest();\n  }\n}\n\nexport function hashRipemd160(data: Buffer) {\n  const hash = createHashRipemd160();\n  return hash.digest(data);\n}\n"],"names":["Ripemd160PolyfillDigest","digest","data","instance","Ripemd160Polyfill","update","hash","Array","isArray","Buffer","from","buffer","NodeCryptoRipemd160Digest","nodeCryptoCreateHash","error","_err","console","log","polyfill","createHashRipemd160","isNodeCryptoAvailable","nodeCrypto","createHash","hashRipemd160"],"mappings":";;;IASaA,uBAAb;AAAA;;AAAA;;AAAA,SACEC,MADF,GACE,gBAAOC,IAAP;AACE,QAAMC,QAAQ,GAAG,IAAIC,iBAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgBH,IAAhB;AACA,QAAMI,IAAI,GAAGH,QAAQ,CAACF,MAAT,EAAb;;AACA,QAAIM,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB,aAAOG,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAP;AACD,KAFD,MAEO;AACL,aAAOG,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACK,MAAjB,CAAP;AACD;AACF,GAVH;;AAAA;AAAA;IAaaC,yBAAb;AAGE,qCAAYC,oBAAZ;AACE,SAAKA,oBAAL,GAA4BA,oBAA5B;AACD;;AALH;;AAAA,UAOEZ,MAPF,GAOE,gBAAOC,IAAP;AACE,QAAI;AACF,aAAO,KAAKW,oBAAL,CAA0B,QAA1B,EACJR,MADI,CACGH,IADH,EAEJD,MAFI,EAAP;AAGD,KAJD,CAIE,OAAOa,KAAP,EAAc;AACd,UAAI;AACF,eAAO,KAAKD,oBAAL,CAA0B,WAA1B,EACJR,MADI,CACGH,IADH,EAEJD,MAFI,EAAP;AAGD,OAJD,CAIE,OAAOc,IAAP,EAAa;AACbC,QAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CACE,2GADF;AAGA,YAAMC,QAAQ,GAAG,IAAIlB,uBAAJ,EAAjB;AACA,eAAOkB,QAAQ,CAACjB,MAAT,CAAgBC,IAAhB,CAAP;AACD;AACF;AACF,GA1BH;;AAAA;AAAA;SA6BgBiB;AACd,MAAMN,oBAAoB,GAAGO,qBAAqB,CAAC,UAAAC,UAAU;AAC3D,QAAI,OAAOA,UAAU,CAACC,UAAlB,KAAiC,UAArC,EAAiD;AAC/C,aAAOD,UAAU,CAACC,UAAlB;AACD;;AACD,WAAO,KAAP;AACD,GALiD,CAAlD;;AAMA,MAAIT,oBAAJ,EAA0B;AACxB,WAAO,IAAID,yBAAJ,CAA8BC,oBAA9B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIb,uBAAJ,EAAP;AACD;AACF;SAEeuB,cAAcrB;AAC5B,MAAMI,IAAI,GAAGa,mBAAmB,EAAhC;AACA,SAAOb,IAAI,CAACL,MAAL,CAAYC,IAAZ,CAAP;AACD;;;;"}