import { asyncToGenerator as _asyncToGenerator, inheritsLoose as _inheritsLoose, wrapNativeSuper as _wrapNativeSuper } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';
import randomBytes from 'randombytes';
import { createSha2Hash } from './sha2Hash.esm.js';
import { createHmacSha256 } from './hmacSha256.esm.js';
import { createCipher } from './aesCipher.esm.js';
import { mnemonicToEntropy, validateMnemonic, entropyToMnemonic } from 'bip39';
import { createPbkdf2 } from './pbkdf2.esm.js';

function encryptMnemonic(_x, _x2, _x3) {
  return _encryptMnemonic.apply(this, arguments);
}

function _encryptMnemonic() {
  _encryptMnemonic = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(phrase, password, opts) {
    var mnemonicEntropy, plaintextNormalized, pbkdf2, salt, keysAndIV, encKey, macKey, iv, cipher, cipherText, hmacPayload, hmacSha256, hmacDigest, payload;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            mnemonicEntropy = mnemonicToEntropy(phrase);
            _context.next = 9;
            break;

          case 4:
            _context.prev = 4;
            _context.t0 = _context["catch"](0);
            console.error('Invalid mnemonic phrase provided');
            console.error(_context.t0);
            throw new Error('Not a valid bip39 mnemonic');

          case 9:
            plaintextNormalized = Buffer.from(mnemonicEntropy, 'hex');
            _context.next = 12;
            return createPbkdf2();

          case 12:
            pbkdf2 = _context.sent;

            if (opts && opts.getRandomBytes) {
              salt = opts.getRandomBytes(16);
            } else {
              salt = randomBytes(16);
            }

            _context.next = 16;
            return pbkdf2.derive(password, salt, 100000, 48, 'sha512');

          case 16:
            keysAndIV = _context.sent;
            encKey = keysAndIV.slice(0, 16);
            macKey = keysAndIV.slice(16, 32);
            iv = keysAndIV.slice(32, 48);
            _context.next = 22;
            return createCipher();

          case 22:
            cipher = _context.sent;
            _context.next = 25;
            return cipher.encrypt('aes-128-cbc', encKey, iv, plaintextNormalized);

          case 25:
            cipherText = _context.sent;
            hmacPayload = Buffer.concat([salt, cipherText]);
            _context.next = 29;
            return createHmacSha256();

          case 29:
            hmacSha256 = _context.sent;
            _context.next = 32;
            return hmacSha256.digest(macKey, hmacPayload);

          case 32:
            hmacDigest = _context.sent;
            payload = Buffer.concat([salt, hmacDigest, cipherText]);
            return _context.abrupt("return", payload);

          case 35:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 4]]);
  }));
  return _encryptMnemonic.apply(this, arguments);
}

var PasswordError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(PasswordError, _Error);

  function PasswordError() {
    return _Error.apply(this, arguments) || this;
  }

  return PasswordError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function decryptMnemonicBuffer(_x4, _x5) {
  return _decryptMnemonicBuffer.apply(this, arguments);
}

function _decryptMnemonicBuffer() {
  _decryptMnemonicBuffer = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(dataBuffer, password) {
    var salt, hmacSig, cipherText, hmacPayload, pbkdf2, keysAndIV, encKey, macKey, iv, decipher, decryptedResult, hmacSha256, hmacDigest, sha2Hash, hmacSigHash, hmacDigestHash, mnemonic;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            salt = dataBuffer.slice(0, 16);
            hmacSig = dataBuffer.slice(16, 48);
            cipherText = dataBuffer.slice(48);
            hmacPayload = Buffer.concat([salt, cipherText]);
            _context2.next = 6;
            return createPbkdf2();

          case 6:
            pbkdf2 = _context2.sent;
            _context2.next = 9;
            return pbkdf2.derive(password, salt, 100000, 48, 'sha512');

          case 9:
            keysAndIV = _context2.sent;
            encKey = keysAndIV.slice(0, 16);
            macKey = keysAndIV.slice(16, 32);
            iv = keysAndIV.slice(32, 48);
            _context2.next = 15;
            return createCipher();

          case 15:
            decipher = _context2.sent;
            _context2.next = 18;
            return decipher.decrypt('aes-128-cbc', encKey, iv, cipherText);

          case 18:
            decryptedResult = _context2.sent;
            _context2.next = 21;
            return createHmacSha256();

          case 21:
            hmacSha256 = _context2.sent;
            _context2.next = 24;
            return hmacSha256.digest(macKey, hmacPayload);

          case 24:
            hmacDigest = _context2.sent;
            _context2.next = 27;
            return createSha2Hash();

          case 27:
            sha2Hash = _context2.sent;
            _context2.next = 30;
            return sha2Hash.digest(hmacSig);

          case 30:
            hmacSigHash = _context2.sent;
            _context2.next = 33;
            return sha2Hash.digest(hmacDigest);

          case 33:
            hmacDigestHash = _context2.sent;

            if (hmacSigHash.equals(hmacDigestHash)) {
              _context2.next = 36;
              break;
            }

            throw new PasswordError('Wrong password (HMAC mismatch)');

          case 36:
            _context2.prev = 36;
            mnemonic = entropyToMnemonic(decryptedResult);
            _context2.next = 45;
            break;

          case 40:
            _context2.prev = 40;
            _context2.t0 = _context2["catch"](36);
            console.error('Error thrown by `entropyToMnemonic`');
            console.error(_context2.t0);
            throw new PasswordError('Wrong password (invalid plaintext)');

          case 45:
            if (validateMnemonic(mnemonic)) {
              _context2.next = 47;
              break;
            }

            throw new PasswordError('Wrong password (invalid plaintext)');

          case 47:
            return _context2.abrupt("return", mnemonic);

          case 48:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[36, 40]]);
  }));
  return _decryptMnemonicBuffer.apply(this, arguments);
}

function decryptLegacy(dataBuffer, password, triplesecDecrypt) {
  return new Promise(function (resolve, reject) {
    if (!triplesecDecrypt) {
      reject(new Error('The `triplesec.decrypt` function must be provided'));
    }

    triplesecDecrypt({
      key: Buffer.from(password),
      data: dataBuffer
    }, function (err, plaintextBuffer) {
      if (!err) {
        resolve(plaintextBuffer);
      } else {
        reject(err);
      }
    });
  });
}

function decryptMnemonic(_x6, _x7, _x8) {
  return _decryptMnemonic.apply(this, arguments);
}

function _decryptMnemonic() {
  _decryptMnemonic = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(data, password, triplesecDecrypt) {
    var dataBuffer, _data;

    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');
            _context3.prev = 1;
            _context3.next = 4;
            return decryptMnemonicBuffer(dataBuffer, password);

          case 4:
            return _context3.abrupt("return", _context3.sent);

          case 7:
            _context3.prev = 7;
            _context3.t0 = _context3["catch"](1);

            if (!(_context3.t0 instanceof PasswordError)) {
              _context3.next = 11;
              break;
            }

            throw _context3.t0;

          case 11:
            _context3.next = 13;
            return decryptLegacy(dataBuffer, password, triplesecDecrypt);

          case 13:
            _data = _context3.sent;
            return _context3.abrupt("return", _data.toString());

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[1, 7]]);
  }));
  return _decryptMnemonic.apply(this, arguments);
}

export { decryptMnemonic, encryptMnemonic };
//# sourceMappingURL=wallet.esm.js.map
