import { asyncToGenerator as _asyncToGenerator } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';

function isSubtleCryptoAvailable() {
  return typeof crypto !== 'undefined' && typeof crypto.subtle !== 'undefined';
}
function isNodeCryptoAvailable(withFeature) {
  try {
    var resolvedResult = require.resolve('crypto');

    if (!resolvedResult) {
      return false;
    }

    var cryptoModule = require('crypto');

    if (!cryptoModule) {
      return false;
    }

    if (withFeature) {
      var features = withFeature(cryptoModule);
      return features;
    }

    return true;
  } catch (error) {
    return false;
  }
}
var NO_CRYPTO_LIB = 'Crypto lib not found. Either the WebCrypto "crypto.subtle" or Node.js "crypto" module must be available.';
function getCryptoLib() {
  return _getCryptoLib.apply(this, arguments);
}

function _getCryptoLib() {
  _getCryptoLib = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
    var nodeCrypto;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!isSubtleCryptoAvailable()) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", {
              lib: crypto.subtle,
              name: 'subtleCrypto'
            });

          case 4:
            _context.prev = 4;
            nodeCrypto = require('crypto');
            return _context.abrupt("return", {
              lib: nodeCrypto,
              name: 'nodeCrypto'
            });

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](4);
            throw new Error(NO_CRYPTO_LIB);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 9]]);
  }));
  return _getCryptoLib.apply(this, arguments);
}

export { NO_CRYPTO_LIB, getCryptoLib, isNodeCryptoAvailable, isSubtleCryptoAvailable };
//# sourceMappingURL=cryptoUtils.esm.js.map
