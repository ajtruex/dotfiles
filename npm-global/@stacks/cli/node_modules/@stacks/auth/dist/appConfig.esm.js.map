{"version":3,"file":"appConfig.esm.js","sources":["../src/appConfig.ts"],"sourcesContent":["import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST, AuthScope } from './constants';\nimport { getGlobalObject } from '@stacks/common';\n\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nexport class AppConfig {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   *\n   */\n  appDomain?: string;\n\n  /**\n   * An array of string representing permissions requested by the app.\n   *\n   */\n  scopes: (AuthScope | string)[];\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   *\n   */\n  redirectPath: string;\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   *\n   */\n  manifestPath: string;\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   *\n   */\n  coreNode?: string;\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   *\n   */\n  authenticatorURL?: string;\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string | undefined} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(\n    scopes: string[] = DEFAULT_SCOPE.slice(),\n    appDomain: string | undefined = getGlobalObject('location', { returnEmptyObject: true })\n      ?.origin,\n    redirectPath = '',\n    manifestPath = '/manifest.json',\n    coreNode: string | undefined = undefined,\n    authenticatorURL: string = DEFAULT_BLOCKSTACK_HOST\n  ) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n  redirectURI(): string {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n  manifestURI(): string {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}\n"],"names":["AppConfig","scopes","appDomain","redirectPath","manifestPath","coreNode","authenticatorURL","DEFAULT_SCOPE","slice","getGlobalObject","returnEmptyObject","origin","undefined","DEFAULT_BLOCKSTACK_HOST","redirectURI","manifestURI"],"mappings":";;;IAaaA,SAAb;AAsDE,qBACEC,MADF,EAEEC,SAFF,EAIEC,YAJF,EAKEC,YALF,EAMEC,QANF,EAOEC,gBAPF;QACEL;AAAAA,MAAAA,SAAmBM,aAAa,CAACC,KAAd;;;QACnBN;;;AAAAA,MAAAA,gCAAgCO,eAAe,CAAC,UAAD,EAAa;AAAEC,QAAAA,iBAAiB,EAAE;AAArB,OAAb,sBAAf,iBAC5BC;;;QACJR;AAAAA,MAAAA,eAAe;;;QACfC;AAAAA,MAAAA,eAAe;;;QACfC;AAAAA,MAAAA,WAA+BO;;;QAC/BN;AAAAA,MAAAA,mBAA2BO;;;AAE3B,SAAKX,SAAL,GAAiBA,SAAjB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACD;;AArEH;;AAAA,SA4EEQ,WA5EF,GA4EE;AACE,gBAAU,KAAKZ,SAAf,GAA2B,KAAKC,YAAhC;AACD,GA9EH;;AAAA,SAoFEY,WApFF,GAoFE;AACE,gBAAU,KAAKb,SAAf,GAA2B,KAAKE,YAAhC;AACD,GAtFH;;AAAA;AAAA;;;;"}