import { fetchPrivate } from '@stacks/common';
import { resolveZoneFileToProfile } from '@stacks/profile';
import { StacksMainnet } from '@stacks/network';

function lookupProfile(options) {
  if (!options.username) {
    return Promise.reject();
  }

  var network = options.network ? options.network : new StacksMainnet();
  var lookupPromise;

  if (options.zoneFileLookupURL) {
    var url = options.zoneFileLookupURL.replace(/\/$/, '') + "/" + options.username;
    lookupPromise = fetchPrivate(url).then(function (response) {
      return response.json();
    });
  } else {
    lookupPromise = network.getNameInfo(options.username);
  }

  return lookupPromise.then(function (responseJSON) {
    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {
      return resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);
    } else {
      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');
    }
  });
}

export { lookupProfile };
//# sourceMappingURL=profile.esm.js.map
