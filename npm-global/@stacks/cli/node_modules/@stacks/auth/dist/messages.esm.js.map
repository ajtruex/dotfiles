{"version":3,"file":"messages.esm.js","sources":["../src/messages.ts"],"sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nimport 'cross-fetch/polyfill';\n\nimport { TokenSigner, SECP256K1Client } from 'jsontokens';\nimport { makeUUID4, nextMonth, getGlobalObject } from '@stacks/common';\nimport { makeDIDFromAddress } from './dids';\nimport {\n  encryptECIES,\n  decryptECIES,\n  makeECPrivateKey,\n  publicKeyToAddress,\n} from '@stacks/encryption';\nimport { DEFAULT_SCOPE, AuthScope } from './constants';\n\nconst VERSION = '1.3.1';\n\ntype AuthMetadata = {\n  email?: string;\n  profileUrl?: string;\n};\n\n/**\n * Generates a ECDSA keypair to\n * use as the ephemeral app transit private key\n * @param {SessionData} session - session object in which key will be stored\n * @return {String} the hex encoded private key\n * @private\n * @ignore\n */\nexport function generateTransitKey() {\n  const transitKey = makeECPrivateKey();\n  return transitKey;\n}\n\n/**\n * Generates an authentication request that can be sent to the Blockstack\n * browser for the user to approve sign in. This authentication request can\n * then be used for sign in by passing it to the `redirectToSignInWithAuthRequest`\n * method.\n *\n * *Note: This method should only be used if you want to roll your own authentication\n * flow. Typically you'd use `redirectToSignIn` which takes care of this\n * under the hood.*\n *\n * @param  {String} transitPrivateKey - hex encoded transit private key\n * @param {String} redirectURI - location to redirect user to after sign in approval\n * @param {String} manifestURI - location of this app's manifest file\n * @param {(AuthScope | string)[]} scopes - the permissions this app is requesting\n * @param {String} appDomain - the origin of this app\n * @param {Number} expiresAt - the time at which this request is no longer valid\n * @param {Object} extraParams - Any extra parameters you'd like to pass to the authenticator.\n * Use this to pass options that aren't part of the Blockstack auth spec, but might be supported\n * by special authenticators.\n * @return {String} the authentication request\n */\nexport function makeAuthRequest(\n  transitPrivateKey: string,\n  redirectURI?: string,\n  manifestURI?: string,\n  scopes: (AuthScope | string)[] = DEFAULT_SCOPE.slice(),\n  appDomain?: string,\n  expiresAt: number = nextMonth().getTime(),\n  extraParams: any = {}\n): string {\n  const getWindowOrigin = (paramName: string) => {\n    const location = getGlobalObject('location', {\n      throwIfUnavailable: true,\n      usageDesc: `makeAuthRequest([${paramName}=undefined])`,\n    });\n    return location?.origin;\n  };\n\n  if (!redirectURI) {\n    redirectURI = `${getWindowOrigin('redirectURI')}/`;\n  }\n  if (!manifestURI) {\n    manifestURI = `${getWindowOrigin('manifestURI')}/manifest.json`;\n  }\n  if (!appDomain) {\n    appDomain = getWindowOrigin('appDomain');\n  }\n\n  /* Create the payload */\n  const payload = Object.assign({}, extraParams, {\n    jti: makeUUID4(),\n    iat: Math.floor(new Date().getTime() / 1000), // JWT times are in seconds\n    exp: Math.floor(expiresAt / 1000), // JWT times are in seconds\n    iss: null,\n    public_keys: [],\n    domain_name: appDomain,\n    manifest_uri: manifestURI,\n    redirect_uri: redirectURI,\n    version: VERSION,\n    do_not_include_profile: true,\n    supports_hub_url: true,\n    scopes,\n  });\n\n  // Logger.info(`blockstack.js: generating v${VERSION} auth request`)\n\n  /* Convert the private key to a public key to an issuer */\n  const publicKey = SECP256K1Client.derivePublicKey(transitPrivateKey);\n  payload.public_keys = [publicKey];\n  const address = publicKeyToAddress(publicKey);\n  payload.iss = makeDIDFromAddress(address);\n\n  /* Sign and return the token */\n  const tokenSigner = new TokenSigner('ES256k', transitPrivateKey);\n  const token = tokenSigner.sign(payload);\n\n  return token;\n}\n\n/**\n * Encrypts the private key for decryption by the given\n * public key.\n * @param  {String} publicKey  [description]\n * @param  {String} privateKey [description]\n * @return {String} hex encoded ciphertext\n * @private\n * @ignore\n */\nexport async function encryptPrivateKey(publicKey: string, privateKey: string): Promise<string> {\n  const encryptedObj = await encryptECIES(publicKey, Buffer.from(privateKey), true);\n  const encryptedJSON = JSON.stringify(encryptedObj);\n  return Buffer.from(encryptedJSON).toString('hex');\n}\n\n/**\n * Decrypts the hex encrypted private key\n * @param  {String} privateKey  the private key corresponding to the public\n * key for which the ciphertext was encrypted\n * @param  {String} hexedEncrypted the ciphertext\n * @return {String}  the decrypted private key\n * @throws {Error} if unable to decrypt\n *\n * @private\n * @ignore\n */\nexport async function decryptPrivateKey(\n  privateKey: string,\n  hexedEncrypted: string\n): Promise<string | null> {\n  const unhexedString = Buffer.from(hexedEncrypted, 'hex').toString();\n  const encryptedObj = JSON.parse(unhexedString);\n  const decrypted = await decryptECIES(privateKey, encryptedObj);\n  if (typeof decrypted !== 'string') {\n    throw new Error('Unable to correctly decrypt private key');\n  } else {\n    return decrypted;\n  }\n}\n\n/**\n * Generates a signed authentication response token for an app. This\n * token is sent back to apps which use contents to access the\n * resources and data requested by the app.\n *\n * @param  {String} privateKey the identity key of the Blockstack ID generating\n * the authentication response\n * @param  {Object} profile the profile object for the Blockstack ID\n * @param  {String} username the username of the Blockstack ID if any, otherwise `null`\n * @param  {AuthMetadata} metadata an object containing metadata sent as part of the authentication\n * response including `email` if requested and available and a URL to the profile\n * @param  {String} coreToken core session token when responding to a legacy auth request\n * or `null` for current direct to gaia authentication requests\n * @param  {String} appPrivateKey the application private key. This private key is\n * unique and specific for every Blockstack ID and application combination.\n * @param  {Number} expiresAt an integer in the same format as\n * `new Date().getTime()`, milliseconds since the Unix epoch\n * @param {String} transitPublicKey the public key provide by the app\n * in its authentication request with which secrets will be encrypted\n * @param {String} hubUrl URL to the write path of the user's Gaia hub\n * @param {String} blockstackAPIUrl URL to the API endpoint to use\n * @param {String} associationToken JWT that binds the app key to the identity key\n * @return {String} signed and encoded authentication response token\n * @private\n * @ignore\n */\nexport async function makeAuthResponse(\n  privateKey: string,\n  profile: {} = {},\n  username: string | null = null,\n  metadata: AuthMetadata | null,\n  coreToken: string | null = null,\n  appPrivateKey: string | null = null,\n  expiresAt: number = nextMonth().getTime(),\n  transitPublicKey: string | null = null,\n  hubUrl: string | null = null,\n  blockstackAPIUrl: string | null = null,\n  associationToken: string | null = null\n): Promise<string> {\n  /* Convert the private key to a public key to an issuer */\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n  const address = publicKeyToAddress(publicKey);\n\n  /* See if we should encrypt with the transit key */\n  let privateKeyPayload = appPrivateKey;\n  let coreTokenPayload = coreToken;\n  let additionalProperties = {};\n  if (appPrivateKey !== undefined && appPrivateKey !== null) {\n    // Logger.info(`blockstack.js: generating v${VERSION} auth response`)\n    if (transitPublicKey !== undefined && transitPublicKey !== null) {\n      privateKeyPayload = await encryptPrivateKey(transitPublicKey, appPrivateKey);\n      if (coreToken !== undefined && coreToken !== null) {\n        coreTokenPayload = await encryptPrivateKey(transitPublicKey, coreToken);\n      }\n    }\n    additionalProperties = {\n      email: metadata?.email ? metadata.email : null,\n      profile_url: metadata?.profileUrl ? metadata.profileUrl : null,\n      hubUrl,\n      blockstackAPIUrl,\n      associationToken,\n      version: VERSION,\n    };\n  } else {\n    // Logger.info('blockstack.js: generating legacy auth response')\n  }\n\n  /* Create the payload */\n  const payload = Object.assign(\n    {},\n    {\n      jti: makeUUID4(),\n      iat: Math.floor(new Date().getTime() / 1000), // JWT times are in seconds\n      exp: Math.floor(expiresAt / 1000), // JWT times are in seconds\n      iss: makeDIDFromAddress(address),\n      private_key: privateKeyPayload,\n      public_keys: [publicKey],\n      profile,\n      username,\n      core_token: coreTokenPayload,\n    },\n    additionalProperties\n  );\n\n  /* Sign and return the token */\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.sign(payload);\n}\n"],"names":["VERSION","generateTransitKey","transitKey","makeECPrivateKey","makeAuthRequest","transitPrivateKey","redirectURI","manifestURI","scopes","appDomain","expiresAt","extraParams","DEFAULT_SCOPE","slice","nextMonth","getTime","getWindowOrigin","paramName","location","getGlobalObject","throwIfUnavailable","usageDesc","origin","payload","Object","assign","jti","makeUUID4","iat","Math","floor","Date","exp","iss","public_keys","domain_name","manifest_uri","redirect_uri","version","do_not_include_profile","supports_hub_url","publicKey","SECP256K1Client","derivePublicKey","address","publicKeyToAddress","makeDIDFromAddress","tokenSigner","TokenSigner","token","sign","encryptPrivateKey","privateKey","encryptECIES","Buffer","from","encryptedObj","encryptedJSON","JSON","stringify","toString","decryptPrivateKey","hexedEncrypted","unhexedString","parse","decryptECIES","decrypted","Error","makeAuthResponse","profile","username","metadata","coreToken","appPrivateKey","transitPublicKey","hubUrl","blockstackAPIUrl","associationToken","privateKeyPayload","coreTokenPayload","additionalProperties","undefined","email","profile_url","profileUrl","private_key","core_token"],"mappings":"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"}