import { getGlobalObject, BLOCKSTACK_HANDLER, fetchPrivate } from '@stacks/common';
import { asyncToGenerator as _asyncToGenerator, extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';
import runtime_1 from './node_modules/regenerator-runtime/runtime.esm.js';
import { decodeToken } from 'jsontokens';
import { parse } from 'query-string';

function getAuthRequestFromURL() {
  var location = getGlobalObject('location', {
    throwIfUnavailable: true,
    usageDesc: 'getAuthRequestFromURL'
  });

  if (location == null ? void 0 : location.search) {
    var queryDict = parse(location == null ? void 0 : location.search);

    if (queryDict.authRequest) {
      return queryDict.authRequest.split(BLOCKSTACK_HANDLER + ":").join('');
    } else {
      return null;
    }
  } else {
    return null;
  }
}
function fetchAppManifest(_x) {
  return _fetchAppManifest.apply(this, arguments);
}

function _fetchAppManifest() {
  _fetchAppManifest = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(authRequest) {
    var payload, manifestURI, response, responseText, responseJSON;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (authRequest) {
              _context.next = 2;
              break;
            }

            throw new Error('Invalid auth request');

          case 2:
            payload = decodeToken(authRequest).payload;

            if (!(typeof payload === 'string')) {
              _context.next = 5;
              break;
            }

            throw new Error('Unexpected token payload type of string');

          case 5:
            manifestURI = payload.manifest_uri;
            _context.prev = 6;
            _context.next = 9;
            return fetchPrivate(manifestURI);

          case 9:
            response = _context.sent;
            _context.next = 12;
            return response.text();

          case 12:
            responseText = _context.sent;
            responseJSON = JSON.parse(responseText);
            return _context.abrupt("return", _extends({}, responseJSON, {
              manifestURI: manifestURI
            }));

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](6);
            console.log(_context.t0);
            throw new Error('Could not fetch manifest.json');

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 17]]);
  }));
  return _fetchAppManifest.apply(this, arguments);
}

export { fetchAppManifest, getAuthRequestFromURL };
//# sourceMappingURL=provider.esm.js.map
