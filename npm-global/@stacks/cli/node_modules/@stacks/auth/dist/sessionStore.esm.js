import { LOCALSTORAGE_SESSION_KEY } from './constants.esm.js';
import { NoSessionDataError } from '@stacks/common';
import { inheritsLoose as _inheritsLoose } from './_virtual/_rollupPluginBabelHelpers.js';
import { SessionData } from './sessionData.esm.js';

var SessionDataStore = /*#__PURE__*/function () {
  function SessionDataStore(sessionOptions) {
    if (sessionOptions) {
      var newSessionData = new SessionData(sessionOptions);
      this.setSessionData(newSessionData);
    }
  }

  var _proto = SessionDataStore.prototype;

  _proto.getSessionData = function getSessionData() {
    throw new Error('Abstract class');
  };

  _proto.setSessionData = function setSessionData(session) {
    throw new Error('Abstract class');
  };

  _proto.deleteSessionData = function deleteSessionData() {
    throw new Error('Abstract class');
  };

  return SessionDataStore;
}();
var InstanceDataStore = /*#__PURE__*/function (_SessionDataStore) {
  _inheritsLoose(InstanceDataStore, _SessionDataStore);

  function InstanceDataStore(sessionOptions) {
    var _this;

    _this = _SessionDataStore.call(this, sessionOptions) || this;

    if (!_this.sessionData) {
      _this.setSessionData(new SessionData({}));
    }

    return _this;
  }

  var _proto2 = InstanceDataStore.prototype;

  _proto2.getSessionData = function getSessionData() {
    if (!this.sessionData) {
      throw new NoSessionDataError('No session data was found.');
    }

    return this.sessionData;
  };

  _proto2.setSessionData = function setSessionData(session) {
    this.sessionData = session;
    return true;
  };

  _proto2.deleteSessionData = function deleteSessionData() {
    this.setSessionData(new SessionData({}));
    return true;
  };

  return InstanceDataStore;
}(SessionDataStore);
var LocalStorageStore = /*#__PURE__*/function (_SessionDataStore2) {
  _inheritsLoose(LocalStorageStore, _SessionDataStore2);

  function LocalStorageStore(sessionOptions) {
    var _this2;

    _this2 = _SessionDataStore2.call(this, sessionOptions) || this;

    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {
      _this2.key = sessionOptions.storeOptions.localStorageKey;
    } else {
      _this2.key = LOCALSTORAGE_SESSION_KEY;
    }

    var data = localStorage.getItem(_this2.key);

    if (!data) {
      var sessionData = new SessionData({});

      _this2.setSessionData(sessionData);
    }

    return _this2;
  }

  var _proto3 = LocalStorageStore.prototype;

  _proto3.getSessionData = function getSessionData() {
    var data = localStorage.getItem(this.key);

    if (!data) {
      throw new NoSessionDataError('No session data was found in localStorage');
    }

    var dataJSON = JSON.parse(data);
    return SessionData.fromJSON(dataJSON);
  };

  _proto3.setSessionData = function setSessionData(session) {
    localStorage.setItem(this.key, session.toString());
    return true;
  };

  _proto3.deleteSessionData = function deleteSessionData() {
    localStorage.removeItem(this.key);
    this.setSessionData(new SessionData({}));
    return true;
  };

  return LocalStorageStore;
}(SessionDataStore);

export { InstanceDataStore, LocalStorageStore, SessionDataStore };
//# sourceMappingURL=sessionStore.esm.js.map
