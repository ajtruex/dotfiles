{"version":3,"file":"provider.esm.js","sources":["../src/provider.ts"],"sourcesContent":["import * as queryString from 'query-string';\nimport { decodeToken } from 'jsontokens';\nimport { BLOCKSTACK_HANDLER, getGlobalObject, fetchPrivate } from '@stacks/common';\n\n/**\n * Retrieves the authentication request from the query string\n * @return {String|null} the authentication request or `null` if\n * the query string parameter `authRequest` is not found\n * @private\n * @ignore\n */\nexport function getAuthRequestFromURL() {\n  const location = getGlobalObject('location', {\n    throwIfUnavailable: true,\n    usageDesc: 'getAuthRequestFromURL',\n  });\n  if (location?.search) {\n    const queryDict = queryString.parse(location?.search);\n    if (queryDict.authRequest) {\n      return (queryDict.authRequest as string).split(`${BLOCKSTACK_HANDLER}:`).join('');\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Fetches the contents of the manifest file specified in the authentication request\n *\n * @param  {String} authRequest encoded and signed authentication request\n * @return {Promise<Object|String>} Returns a `Promise` that resolves to the JSON\n * object manifest file unless there's an error in which case rejects with an error\n * message.\n * @private\n * @ignore\n */\nexport async function fetchAppManifest(authRequest: string): Promise<any> {\n  if (!authRequest) {\n    throw new Error('Invalid auth request');\n  }\n  const payload = decodeToken(authRequest).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  const manifestURI = payload.manifest_uri as string;\n  try {\n    // Logger.debug(`Fetching manifest from ${manifestURI}`)\n    const response = await fetchPrivate(manifestURI);\n    const responseText = await response.text();\n    const responseJSON = JSON.parse(responseText);\n    return { ...responseJSON, manifestURI };\n  } catch (error) {\n    console.log(error);\n    throw new Error('Could not fetch manifest.json');\n  }\n}\n"],"names":["getAuthRequestFromURL","location","getGlobalObject","throwIfUnavailable","usageDesc","search","queryDict","queryString","authRequest","split","BLOCKSTACK_HANDLER","join","fetchAppManifest","Error","payload","decodeToken","manifestURI","manifest_uri","fetchPrivate","response","text","responseText","responseJSON","JSON","parse","console","log"],"mappings":";;;;;;SAWgBA;AACd,MAAMC,QAAQ,GAAGC,eAAe,CAAC,UAAD,EAAa;AAC3CC,IAAAA,kBAAkB,EAAE,IADuB;AAE3CC,IAAAA,SAAS,EAAE;AAFgC,GAAb,CAAhC;;AAIA,MAAIH,QAAJ,oBAAIA,QAAQ,CAAEI,MAAd,EAAsB;AACpB,QAAMC,SAAS,GAAGC,KAAA,CAAkBN,QAAlB,oBAAkBA,QAAQ,CAAEI,MAA5B,CAAlB;;AACA,QAAIC,SAAS,CAACE,WAAd,EAA2B;AACzB,aAAQF,SAAS,CAACE,WAAV,CAAiCC,KAAjC,CAA0CC,kBAA1C,QAAiEC,IAAjE,CAAsE,EAAtE,CAAR;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD,MAOO;AACL,WAAO,IAAP;AACD;AACF;SAYqBC,gBAAtB;AAAA;AAAA;;;qEAAO,iBAAgCJ,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,WADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIK,KAAJ,CAAU,sBAAV,CAFH;;AAAA;AAICC,YAAAA,OAJD,GAIWC,WAAW,CAACP,WAAD,CAAX,CAAyBM,OAJpC;;AAAA,kBAKD,OAAOA,OAAP,KAAmB,QALlB;AAAA;AAAA;AAAA;;AAAA,kBAMG,IAAID,KAAJ,CAAU,yCAAV,CANH;;AAAA;AAQCG,YAAAA,WARD,GAQeF,OAAO,CAACG,YARvB;AAAA;AAAA;AAAA,mBAWoBC,YAAY,CAACF,WAAD,CAXhC;;AAAA;AAWGG,YAAAA,QAXH;AAAA;AAAA,mBAYwBA,QAAQ,CAACC,IAAT,EAZxB;;AAAA;AAYGC,YAAAA,YAZH;AAaGC,YAAAA,YAbH,GAakBC,IAAI,CAACC,KAAL,CAAWH,YAAX,CAblB;AAAA,0DAcSC,YAdT;AAcuBN,cAAAA,WAAW,EAAXA;AAdvB;;AAAA;AAAA;AAAA;AAgBHS,YAAAA,OAAO,CAACC,GAAR;AAhBG,kBAiBG,IAAIb,KAAJ,CAAU,+BAAV,CAjBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;"}