import { ECPair, script, Transaction } from 'bitcoinjs-lib';
import { TokenSigner } from 'jsontokens';
import { ecPairToAddress, hexStringToECPair, getPublicKeyFromPrivate, randomBytes, hashSha256Sync, verifyECDSA, publicKeyToAddress, signECDSA, eciesGetJsonStringLength } from '@stacks/encryption';
import { Logger, fetchPrivate, ValidationError, megabytesToBytes, PayloadTooLargeError, PreconditionFailedError, ConflictError, DoesNotExist, BadPathError, NotEnoughProofError, getGlobalObject, SignatureVerificationError, InvalidStateError, BLOCKSTACK_DEFAULT_GAIA_HUB_URL } from '@stacks/common';
import { lookupProfile, NAME_LOOKUP_PATH } from '@stacks/auth';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = /*#__PURE__*/createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var runtime = function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.

    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }

    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function define(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.

      generator._invoke = makeInvokeMethod(innerFn, self, context);
      return generator;
    }

    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.

    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.


    var IteratorPrototype = {};

    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    exports.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }

      genFun.prototype = Object.create(Gp);
      return genFun;
    }; // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.


    exports.awrap = function (arg) {
      return {
        __await: arg
      };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;

          if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function (error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      } // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).


      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };

    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.

    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;
      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          } // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;
          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);
          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;
          var record = tryCatch(innerFn, self, context);

          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };
          } else if (record.type === "throw") {
            state = GenStateCompleted; // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.

            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    } // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.


    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (!info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

        context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.

        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }
      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      } // The delegate iterator is finished, so forget it and continue with
      // the outer generator.


      context.delegate = null;
      return ContinueSentinel;
    } // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.


    defineIteratorMethods(Gp);
    define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{
        tryLoc: "root"
      }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function (object) {
      var keys = [];

      for (var key in object) {
        keys.push(key);
      }

      keys.reverse(); // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.

      return function next() {
        while (keys.length) {
          var key = keys.pop();

          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        } // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.


        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];

        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;
            return next;
          };

          return next.next = next;
        }
      } // Return an iterator with no values.


      return {
        next: doneResult
      };
    }

    exports.values = values;

    function doneResult() {
      return {
        value: undefined$1,
        done: true
      };
    }

    Context.prototype = {
      constructor: Context,
      reset: function reset(skipTempReset) {
        this.prev = 0;
        this.next = 0; // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.

        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;
        this.method = "next";
        this.arg = undefined$1;
        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },
      stop: function stop() {
        this.done = true;
        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;

        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },
      dispatchException: function dispatchException(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;

        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },
      abrupt: function abrupt(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },
      complete: function complete(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },
      finish: function finish(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },
      "catch": function _catch(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        } // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.


        throw new Error("illegal catch attempt");
      },
      delegateYield: function delegateYield(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    }; // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.

    return exports;
  }( // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports );

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
});

var BLOCKSTACK_GAIA_HUB_LABEL = 'blockstack-gaia-hub-config';
function uploadToGaiaHub(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
  return _uploadToGaiaHub.apply(this, arguments);
}

function _uploadToGaiaHub() {
  _uploadToGaiaHub = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(filename, contents, hubConfig, contentType, newFile, etag, dangerouslyIgnoreEtag) {
    var headers, response, responseText;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (contentType === void 0) {
              contentType = 'application/octet-stream';
            }

            if (newFile === void 0) {
              newFile = true;
            }

            Logger.debug("uploadToGaiaHub: uploading " + filename + " to " + hubConfig.server);
            headers = {
              'Content-Type': contentType,
              Authorization: "bearer " + hubConfig.token
            };

            if (!dangerouslyIgnoreEtag) {
              if (newFile) {
                headers['If-None-Match'] = '*';
              } else if (etag) {
                headers['If-Match'] = etag;
              }
            }

            _context.next = 7;
            return fetchPrivate(hubConfig.server + "/store/" + hubConfig.address + "/" + filename, {
              method: 'POST',
              headers: headers,
              body: contents
            });

          case 7:
            response = _context.sent;

            if (response.ok) {
              _context.next = 12;
              break;
            }

            _context.next = 11;
            return getBlockstackErrorFromResponse(response, 'Error when uploading to Gaia hub.', hubConfig);

          case 11:
            throw _context.sent;

          case 12:
            _context.next = 14;
            return response.text();

          case 14:
            responseText = _context.sent;
            return _context.abrupt("return", JSON.parse(responseText));

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _uploadToGaiaHub.apply(this, arguments);
}

function deleteFromGaiaHub(_x8, _x9) {
  return _deleteFromGaiaHub.apply(this, arguments);
}

function _deleteFromGaiaHub() {
  _deleteFromGaiaHub = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(filename, hubConfig) {
    var response;
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            Logger.debug("deleteFromGaiaHub: deleting " + filename + " from " + hubConfig.server);
            _context2.next = 3;
            return fetchPrivate(hubConfig.server + "/delete/" + hubConfig.address + "/" + filename, {
              method: 'DELETE',
              headers: {
                Authorization: "bearer " + hubConfig.token
              }
            });

          case 3:
            response = _context2.sent;

            if (response.ok) {
              _context2.next = 8;
              break;
            }

            _context2.next = 7;
            return getBlockstackErrorFromResponse(response, 'Error deleting file from Gaia hub.', hubConfig);

          case 7:
            throw _context2.sent;

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _deleteFromGaiaHub.apply(this, arguments);
}

function getFullReadUrl(filename, hubConfig) {
  return Promise.resolve("" + hubConfig.url_prefix + hubConfig.address + "/" + filename);
}

function makeLegacyAuthToken(challengeText, signerKeyHex) {
  var parsedChallenge;

  try {
    parsedChallenge = JSON.parse(challengeText);
  } catch (err) {
    throw new Error('Failed in parsing legacy challenge text from the gaia hub.');
  }

  if (parsedChallenge[0] === 'gaiahub' && parsedChallenge[3] === 'blockstack_storage_please_sign') {
    var signer = hexStringToECPair(signerKeyHex + (signerKeyHex.length === 64 ? '01' : ''));
    var digest = hashSha256Sync(Buffer.from(challengeText));
    var signatureBuffer = signer.sign(digest);
    var signatureWithHash = script.signature.encode(signatureBuffer, Transaction.SIGHASH_NONE);
    var signature = signatureWithHash.toString('hex').slice(0, -2);
    var publickey = getPublicKeyFromPrivate(signerKeyHex);
    var token = Buffer.from(JSON.stringify({
      publickey: publickey,
      signature: signature
    })).toString('base64');
    return token;
  } else {
    throw new Error('Failed to connect to legacy gaia hub. If you operate this hub, please update.');
  }
}

function makeV1GaiaAuthToken(hubInfo, signerKeyHex, hubUrl, associationToken) {
  var challengeText = hubInfo.challenge_text;
  var handlesV1Auth = hubInfo.latest_auth_version && parseInt(hubInfo.latest_auth_version.slice(1), 10) >= 1;
  var iss = getPublicKeyFromPrivate(signerKeyHex);

  if (!handlesV1Auth) {
    return makeLegacyAuthToken(challengeText, signerKeyHex);
  }

  var salt = randomBytes(16).toString('hex');
  var payload = {
    gaiaChallenge: challengeText,
    hubUrl: hubUrl,
    iss: iss,
    salt: salt,
    associationToken: associationToken
  };
  var token = new TokenSigner('ES256K', signerKeyHex).sign(payload);
  return "v1:" + token;
}

function connectToGaiaHub(_x10, _x11, _x12) {
  return _connectToGaiaHub.apply(this, arguments);
}

function _connectToGaiaHub() {
  _connectToGaiaHub = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(gaiaHubUrl, challengeSignerHex, associationToken) {
    var response, hubInfo, readURL, token, address;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            Logger.debug("connectToGaiaHub: " + gaiaHubUrl + "/hub_info");
            _context3.next = 3;
            return fetchPrivate(gaiaHubUrl + "/hub_info");

          case 3:
            response = _context3.sent;
            _context3.next = 6;
            return response.json();

          case 6:
            hubInfo = _context3.sent;
            readURL = hubInfo.read_url_prefix;
            token = makeV1GaiaAuthToken(hubInfo, challengeSignerHex, gaiaHubUrl, associationToken);
            address = ecPairToAddress(hexStringToECPair(challengeSignerHex + (challengeSignerHex.length === 64 ? '01' : '')));
            return _context3.abrupt("return", {
              url_prefix: readURL,
              max_file_upload_size_megabytes: hubInfo.max_file_upload_size_megabytes,
              address: address,
              token: token,
              server: gaiaHubUrl
            });

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _connectToGaiaHub.apply(this, arguments);
}

function getBucketUrl(_x13, _x14) {
  return _getBucketUrl.apply(this, arguments);
}

function _getBucketUrl() {
  _getBucketUrl = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(gaiaHubUrl, appPrivateKey) {
    var challengeSigner, response, responseText, responseJSON, readURL, address, bucketUrl;
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            challengeSigner = ECPair.fromPrivateKey(Buffer.from(appPrivateKey, 'hex'));
            _context4.next = 3;
            return fetchPrivate(gaiaHubUrl + "/hub_info");

          case 3:
            response = _context4.sent;
            _context4.next = 6;
            return response.text();

          case 6:
            responseText = _context4.sent;
            responseJSON = JSON.parse(responseText);
            readURL = responseJSON.read_url_prefix;
            address = ecPairToAddress(challengeSigner);
            bucketUrl = "" + readURL + address + "/";
            return _context4.abrupt("return", bucketUrl);

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getBucketUrl.apply(this, arguments);
}

function getGaiaErrorResponse(_x15) {
  return _getGaiaErrorResponse.apply(this, arguments);
}

function _getGaiaErrorResponse() {
  _getGaiaErrorResponse = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(response) {
    var responseMsg, responseJson, status, statusText, body;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            responseMsg = '';
            _context5.prev = 1;
            _context5.next = 4;
            return response.text();

          case 4:
            responseMsg = _context5.sent;

            try {
              responseJson = JSON.parse(responseMsg);
            } catch (error) {}

            _context5.next = 11;
            break;

          case 8:
            _context5.prev = 8;
            _context5.t0 = _context5["catch"](1);
            Logger.debug("Error getting bad http response text: " + _context5.t0);

          case 11:
            status = response.status;
            statusText = response.statusText;
            body = responseJson || responseMsg;
            return _context5.abrupt("return", {
              status: status,
              statusText: statusText,
              body: body
            });

          case 15:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[1, 8]]);
  }));
  return _getGaiaErrorResponse.apply(this, arguments);
}

function getBlockstackErrorFromResponse(_x16, _x17, _x18) {
  return _getBlockstackErrorFromResponse.apply(this, arguments);
}

function _getBlockstackErrorFromResponse() {
  _getBlockstackErrorFromResponse = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(response, errorMsg, hubConfig) {
    var gaiaResponse, maxBytes;
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!response.ok) {
              _context6.next = 2;
              break;
            }

            throw new Error('Cannot get a BlockstackError from a valid response.');

          case 2:
            _context6.next = 4;
            return getGaiaErrorResponse(response);

          case 4:
            gaiaResponse = _context6.sent;

            if (!(gaiaResponse.status === 401)) {
              _context6.next = 9;
              break;
            }

            return _context6.abrupt("return", new ValidationError(errorMsg, gaiaResponse));

          case 9:
            if (!(gaiaResponse.status === 402)) {
              _context6.next = 13;
              break;
            }

            return _context6.abrupt("return", new NotEnoughProofError(errorMsg, gaiaResponse));

          case 13:
            if (!(gaiaResponse.status === 403)) {
              _context6.next = 17;
              break;
            }

            return _context6.abrupt("return", new BadPathError(errorMsg, gaiaResponse));

          case 17:
            if (!(gaiaResponse.status === 404)) {
              _context6.next = 21;
              break;
            }

            throw new DoesNotExist(errorMsg, gaiaResponse);

          case 21:
            if (!(gaiaResponse.status === 409)) {
              _context6.next = 25;
              break;
            }

            return _context6.abrupt("return", new ConflictError(errorMsg, gaiaResponse));

          case 25:
            if (!(gaiaResponse.status === 412)) {
              _context6.next = 29;
              break;
            }

            return _context6.abrupt("return", new PreconditionFailedError(errorMsg, gaiaResponse));

          case 29:
            if (!(gaiaResponse.status === 413)) {
              _context6.next = 34;
              break;
            }

            maxBytes = hubConfig && hubConfig.max_file_upload_size_megabytes ? megabytesToBytes(hubConfig.max_file_upload_size_megabytes) : 0;
            return _context6.abrupt("return", new PayloadTooLargeError(errorMsg, gaiaResponse, maxBytes));

          case 34:
            return _context6.abrupt("return", new Error(errorMsg));

          case 35:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getBlockstackErrorFromResponse.apply(this, arguments);
}

var FileContentLoader = /*#__PURE__*/function () {
  function FileContentLoader(content, contentType) {
    this.wasString = typeof content === 'string';
    this.content = FileContentLoader.normalizeContentDataType(content, contentType);
    this.contentType = contentType || this.detectContentType();
    this.contentByteLength = this.detectContentLength();
  }

  FileContentLoader.normalizeContentDataType = function normalizeContentDataType(content, contentType) {
    try {
      if (typeof content === 'string') {
        var charset = (contentType || '').toLowerCase().replace('-', '');

        if (charset.includes('charset') && !charset.includes('charset=utf8') && !charset.includes('charset=ascii')) {
          throw new Error("Unable to determine byte length with charset: " + contentType);
        }

        if (typeof TextEncoder !== 'undefined') {
          var encodedString = new TextEncoder().encode(content);
          return Buffer.from(encodedString.buffer);
        }

        return Buffer.from(content);
      } else if (Buffer.isBuffer(content)) {
        return content;
      } else if (ArrayBuffer.isView(content)) {
        return Buffer.from(content.buffer, content.byteOffset, content.byteLength);
      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {
        return content;
      } else if (typeof ArrayBuffer !== 'undefined' && content instanceof ArrayBuffer) {
        return Buffer.from(content);
      } else if (Array.isArray(content)) {
        if (content.length > 0 && (!Number.isInteger(content[0]) || content[0] < 0 || content[0] > 255)) {
          throw new Error("Unexpected array values provided as file data: value \"" + content[0] + "\" at index 0 is not an octet number. " + this.supportedTypesMsg);
        }

        return Buffer.from(content);
      } else {
        var typeName = Object.prototype.toString.call(content);
        throw new Error("Unexpected type provided as file data: " + typeName + ". " + this.supportedTypesMsg);
      }
    } catch (error) {
      console.error(error);
      throw new Error("Error processing data: " + error);
    }
  };

  var _proto = FileContentLoader.prototype;

  _proto.detectContentType = function detectContentType() {
    if (this.wasString) {
      return 'text/plain; charset=utf-8';
    } else if (typeof Blob !== 'undefined' && this.content instanceof Blob && this.content.type) {
      return this.content.type;
    } else {
      return 'application/octet-stream';
    }
  };

  _proto.detectContentLength = function detectContentLength() {
    if (ArrayBuffer.isView(this.content) || Buffer.isBuffer(this.content)) {
      return this.content.byteLength;
    } else if (typeof Blob !== 'undefined' && this.content instanceof Blob) {
      return this.content.size;
    }

    var typeName = Object.prototype.toString.call(this.content);
    var error = new Error("Unexpected type \"" + typeName + "\" while detecting content length");
    console.error(error);
    throw error;
  };

  _proto.loadContent = /*#__PURE__*/function () {
    var _loadContent = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var _this = this;

      var reader, readPromise, result, typeName, loadContentError;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!Buffer.isBuffer(this.content)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", this.content);

            case 5:
              if (!ArrayBuffer.isView(this.content)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt("return", Buffer.from(this.content.buffer, this.content.byteOffset, this.content.byteLength));

            case 9:
              if (!(typeof Blob !== 'undefined' && this.content instanceof Blob)) {
                _context.next = 18;
                break;
              }

              reader = new FileReader();
              readPromise = new Promise(function (resolve, reject) {
                reader.onerror = function (err) {
                  reject(err);
                };

                reader.onload = function () {
                  var arrayBuffer = reader.result;
                  resolve(Buffer.from(arrayBuffer));
                };

                reader.readAsArrayBuffer(_this.content);
              });
              _context.next = 14;
              return readPromise;

            case 14:
              result = _context.sent;
              return _context.abrupt("return", result);

            case 18:
              typeName = Object.prototype.toString.call(this.content);
              throw new Error("Unexpected type " + typeName);

            case 20:
              _context.next = 28;
              break;

            case 22:
              _context.prev = 22;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
              loadContentError = new Error("Error loading content: " + _context.t0);
              console.error(loadContentError);
              throw loadContentError;

            case 28:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 22]]);
    }));

    function loadContent() {
      return _loadContent.apply(this, arguments);
    }

    return loadContent;
  }();

  _proto.load = function load() {
    if (this.loadedData === undefined) {
      this.loadedData = this.loadContent();
    }

    return this.loadedData;
  };

  return FileContentLoader;
}();
FileContentLoader.supportedTypesMsg = 'Supported types are: `string` (to be UTF8 encoded), ' + '`Buffer`, `Blob`, `File`, `ArrayBuffer`, `UInt8Array` or any other typed array buffer. ';

var SIGNATURE_FILE_SUFFIX = '.sig';
var Storage = /*#__PURE__*/function () {
  function Storage(options) {
    this.userSession = options.userSession;
  }

  var _proto = Storage.prototype;

  _proto.getFile = /*#__PURE__*/function () {
    var _getFile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(path, options) {
      var defaults, opt, storedContents, decryptOpt, decryptionKey;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              defaults = {
                decrypt: true,
                verify: false,
                app: getGlobalObject('location', {
                  returnEmptyObject: true
                }).origin
              };
              opt = Object.assign({}, defaults, options);

              if (!(opt.verify && !opt.decrypt)) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", this.getFileSignedUnencrypted(path, opt));

            case 4:
              _context.next = 6;
              return this.getFileContents(path, opt.app, opt.username, opt.zoneFileLookupURL, !!opt.decrypt);

            case 6:
              storedContents = _context.sent;

              if (!(storedContents === null)) {
                _context.next = 11;
                break;
              }

              return _context.abrupt("return", storedContents);

            case 11:
              if (!(opt.decrypt && !opt.verify)) {
                _context.next = 22;
                break;
              }

              if (!(typeof storedContents !== 'string')) {
                _context.next = 14;
                break;
              }

              throw new Error('Expected to get back a string for the cipherText');

            case 14:
              if (!(typeof opt.decrypt === 'string')) {
                _context.next = 19;
                break;
              }

              decryptOpt = {
                privateKey: opt.decrypt
              };
              return _context.abrupt("return", this.userSession.decryptContent(storedContents, decryptOpt));

            case 19:
              return _context.abrupt("return", this.userSession.decryptContent(storedContents));

            case 20:
              _context.next = 34;
              break;

            case 22:
              if (!(opt.decrypt && opt.verify)) {
                _context.next = 29;
                break;
              }

              if (!(typeof storedContents !== 'string')) {
                _context.next = 25;
                break;
              }

              throw new Error('Expected to get back a string for the cipherText');

            case 25:
              if (typeof opt.decrypt === 'string') {
                decryptionKey = opt.decrypt;
              }

              return _context.abrupt("return", this.handleSignedEncryptedContents(path, storedContents, opt.app, decryptionKey, opt.username, opt.zoneFileLookupURL));

            case 29:
              if (!(!opt.verify && !opt.decrypt)) {
                _context.next = 33;
                break;
              }

              return _context.abrupt("return", storedContents);

            case 33:
              throw new Error('Should be unreachable.');

            case 34:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function getFile(_x, _x2) {
      return _getFile.apply(this, arguments);
    }

    return getFile;
  }();

  _proto.getUserAppFileUrl = /*#__PURE__*/function () {
    var _getUserAppFileUrl = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(path, username, appOrigin, zoneFileLookupURL) {
      var profile, bucketUrl, url, bucket;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return lookupProfile({
                username: username,
                zoneFileLookupURL: zoneFileLookupURL
              });

            case 2:
              profile = _context2.sent;

              if (profile.hasOwnProperty('apps')) {
                if (profile.apps.hasOwnProperty(appOrigin)) {
                  url = profile.apps[appOrigin];
                  bucket = url.replace(/\/?(\?|#|$)/, '/$1');
                  bucketUrl = "" + bucket + path;
                }
              }

              return _context2.abrupt("return", bucketUrl);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function getUserAppFileUrl(_x3, _x4, _x5, _x6) {
      return _getUserAppFileUrl.apply(this, arguments);
    }

    return getUserAppFileUrl;
  }();

  _proto.getGaiaAddress = /*#__PURE__*/function () {
    var _getGaiaAddress = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(app, username, zoneFileLookupURL) {
      var opts, fileUrl, gaiaHubConfig, matches;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              opts = normalizeOptions(this.userSession, {
                app: app,
                username: username,
                zoneFileLookupURL: zoneFileLookupURL
              });

              if (!username) {
                _context3.next = 7;
                break;
              }

              _context3.next = 4;
              return this.getUserAppFileUrl('/', opts.username, opts.app, opts.zoneFileLookupURL);

            case 4:
              fileUrl = _context3.sent;
              _context3.next = 13;
              break;

            case 7:
              _context3.next = 9;
              return this.getOrSetLocalGaiaHubConnection();

            case 9:
              gaiaHubConfig = _context3.sent;
              _context3.next = 12;
              return getFullReadUrl('/', gaiaHubConfig);

            case 12:
              fileUrl = _context3.sent;

            case 13:
              matches = fileUrl.match(/([13][a-km-zA-HJ-NP-Z0-9]{26,35})/);

              if (matches) {
                _context3.next = 16;
                break;
              }

              throw new Error('Failed to parse gaia address');

            case 16:
              return _context3.abrupt("return", matches[matches.length - 1]);

            case 17:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function getGaiaAddress(_x7, _x8, _x9) {
      return _getGaiaAddress.apply(this, arguments);
    }

    return getGaiaAddress;
  }();

  _proto.getFileUrl = /*#__PURE__*/function () {
    var _getFileUrl = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(path, options) {
      var opts, readUrl, gaiaHubConfig;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              opts = normalizeOptions(this.userSession, options);

              if (!opts.username) {
                _context4.next = 7;
                break;
              }

              _context4.next = 4;
              return this.getUserAppFileUrl(path, opts.username, opts.app, opts.zoneFileLookupURL);

            case 4:
              readUrl = _context4.sent;
              _context4.next = 13;
              break;

            case 7:
              _context4.next = 9;
              return this.getOrSetLocalGaiaHubConnection();

            case 9:
              gaiaHubConfig = _context4.sent;
              _context4.next = 12;
              return getFullReadUrl(path, gaiaHubConfig);

            case 12:
              readUrl = _context4.sent;

            case 13:
              if (readUrl) {
                _context4.next = 17;
                break;
              }

              throw new Error('Missing readURL');

            case 17:
              return _context4.abrupt("return", readUrl);

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    function getFileUrl(_x10, _x11) {
      return _getFileUrl.apply(this, arguments);
    }

    return getFileUrl;
  }();

  _proto.getFileContents = /*#__PURE__*/function () {
    var _getFileContents = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(path, app, username, zoneFileLookupURL, forceText) {
      var opts, readUrl, response, contentType, etag, sessionData;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              opts = {
                app: app,
                username: username,
                zoneFileLookupURL: zoneFileLookupURL
              };
              _context5.next = 3;
              return this.getFileUrl(path, opts);

            case 3:
              readUrl = _context5.sent;
              _context5.next = 6;
              return fetchPrivate(readUrl);

            case 6:
              response = _context5.sent;

              if (response.ok) {
                _context5.next = 11;
                break;
              }

              _context5.next = 10;
              return getBlockstackErrorFromResponse(response, "getFile " + path + " failed.", null);

            case 10:
              throw _context5.sent;

            case 11:
              contentType = response.headers.get('Content-Type');

              if (typeof contentType === 'string') {
                contentType = contentType.toLowerCase();
              }

              etag = response.headers.get('ETag');

              if (etag) {
                sessionData = this.userSession.store.getSessionData();
                sessionData.etags[path] = etag;
                this.userSession.store.setSessionData(sessionData);
              }

              if (!(forceText || contentType === null || contentType.startsWith('text') || contentType.startsWith('application/json'))) {
                _context5.next = 19;
                break;
              }

              return _context5.abrupt("return", response.text());

            case 19:
              return _context5.abrupt("return", response.arrayBuffer());

            case 20:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    function getFileContents(_x12, _x13, _x14, _x15, _x16) {
      return _getFileContents.apply(this, arguments);
    }

    return getFileContents;
  }();

  _proto.getFileSignedUnencrypted = /*#__PURE__*/function () {
    var _getFileSignedUnencrypted = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(path, opt) {
      var sigPath, _yield$Promise$all, fileContents, signatureContents, gaiaAddress, signature, publicKey, sigObject, signerAddress;

      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              sigPath = "" + path + SIGNATURE_FILE_SUFFIX;
              _context6.prev = 1;
              _context6.next = 4;
              return Promise.all([this.getFileContents(path, opt.app, opt.username, opt.zoneFileLookupURL, false), this.getFileContents(sigPath, opt.app, opt.username, opt.zoneFileLookupURL, true), this.getGaiaAddress(opt.app, opt.username, opt.zoneFileLookupURL)]);

            case 4:
              _yield$Promise$all = _context6.sent;
              fileContents = _yield$Promise$all[0];
              signatureContents = _yield$Promise$all[1];
              gaiaAddress = _yield$Promise$all[2];

              if (fileContents) {
                _context6.next = 10;
                break;
              }

              return _context6.abrupt("return", fileContents);

            case 10:
              if (gaiaAddress) {
                _context6.next = 12;
                break;
              }

              throw new SignatureVerificationError('Failed to get gaia address for verification of: ' + ("" + path));

            case 12:
              if (!(!signatureContents || typeof signatureContents !== 'string')) {
                _context6.next = 14;
                break;
              }

              throw new SignatureVerificationError('Failed to obtain signature for file: ' + (path + " -- looked in " + path + SIGNATURE_FILE_SUFFIX));

            case 14:
              _context6.prev = 14;
              sigObject = JSON.parse(signatureContents);
              signature = sigObject.signature;
              publicKey = sigObject.publicKey;
              _context6.next = 27;
              break;

            case 20:
              _context6.prev = 20;
              _context6.t0 = _context6["catch"](14);

              if (!(_context6.t0 instanceof SyntaxError)) {
                _context6.next = 26;
                break;
              }

              throw new Error('Failed to parse signature content JSON ' + ("(path: " + path + SIGNATURE_FILE_SUFFIX + ")") + ' The content may be corrupted.');

            case 26:
              throw _context6.t0;

            case 27:
              signerAddress = publicKeyToAddress(publicKey);

              if (!(gaiaAddress !== signerAddress)) {
                _context6.next = 32;
                break;
              }

              throw new SignatureVerificationError("Signer pubkey address (" + signerAddress + ") doesn't" + (" match gaia address (" + gaiaAddress + ")"));

            case 32:
              if (verifyECDSA(fileContents, publicKey, signature)) {
                _context6.next = 36;
                break;
              }

              throw new SignatureVerificationError('Contents do not match ECDSA signature: ' + ("path: " + path + ", signature: " + path + SIGNATURE_FILE_SUFFIX));

            case 36:
              return _context6.abrupt("return", fileContents);

            case 37:
              _context6.next = 46;
              break;

            case 39:
              _context6.prev = 39;
              _context6.t1 = _context6["catch"](1);

              if (!(_context6.t1 instanceof DoesNotExist && _context6.t1.message.indexOf(sigPath) >= 0)) {
                _context6.next = 45;
                break;
              }

              throw new SignatureVerificationError('Failed to obtain signature for file: ' + (path + " -- looked in " + path + SIGNATURE_FILE_SUFFIX));

            case 45:
              throw _context6.t1;

            case 46:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[1, 39], [14, 20]]);
    }));

    function getFileSignedUnencrypted(_x17, _x18) {
      return _getFileSignedUnencrypted.apply(this, arguments);
    }

    return getFileSignedUnencrypted;
  }();

  _proto.handleSignedEncryptedContents = /*#__PURE__*/function () {
    var _handleSignedEncryptedContents = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(path, storedContents, app, privateKey, username, zoneFileLookupURL) {
      var appPrivateKey, appPublicKey, address, sigObject, signature, signerPublicKey, cipherText, signerAddress, decryptOpt;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              appPrivateKey = privateKey || this.userSession.loadUserData().appPrivateKey;
              appPublicKey = getPublicKeyFromPrivate(appPrivateKey);

              if (!username) {
                _context7.next = 8;
                break;
              }

              _context7.next = 5;
              return this.getGaiaAddress(app, username, zoneFileLookupURL);

            case 5:
              address = _context7.sent;
              _context7.next = 9;
              break;

            case 8:
              address = publicKeyToAddress(appPublicKey);

            case 9:
              if (address) {
                _context7.next = 11;
                break;
              }

              throw new SignatureVerificationError('Failed to get gaia address for verification of: ' + ("" + path));

            case 11:
              _context7.prev = 11;
              sigObject = JSON.parse(storedContents);
              _context7.next = 22;
              break;

            case 15:
              _context7.prev = 15;
              _context7.t0 = _context7["catch"](11);

              if (!(_context7.t0 instanceof SyntaxError)) {
                _context7.next = 21;
                break;
              }

              throw new Error('Failed to parse encrypted, signed content JSON. The content may not ' + 'be encrypted. If using getFile, try passing' + ' { verify: false, decrypt: false }.');

            case 21:
              throw _context7.t0;

            case 22:
              signature = sigObject.signature;
              signerPublicKey = sigObject.publicKey;
              cipherText = sigObject.cipherText;
              signerAddress = publicKeyToAddress(signerPublicKey);

              if (!(!signerPublicKey || !cipherText || !signature)) {
                _context7.next = 30;
                break;
              }

              throw new SignatureVerificationError('Failed to get signature verification data from file:' + (" " + path));

            case 30:
              if (!(signerAddress !== address)) {
                _context7.next = 34;
                break;
              }

              throw new SignatureVerificationError("Signer pubkey address (" + signerAddress + ") doesn't" + (" match gaia address (" + address + ")"));

            case 34:
              if (verifyECDSA(cipherText, signerPublicKey, signature)) {
                _context7.next = 38;
                break;
              }

              throw new SignatureVerificationError('Contents do not match ECDSA signature in file:' + (" " + path));

            case 38:
              if (!(typeof privateKey === 'string')) {
                _context7.next = 43;
                break;
              }

              decryptOpt = {
                privateKey: privateKey
              };
              return _context7.abrupt("return", this.userSession.decryptContent(cipherText, decryptOpt));

            case 43:
              return _context7.abrupt("return", this.userSession.decryptContent(cipherText));

            case 44:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[11, 15]]);
    }));

    function handleSignedEncryptedContents(_x19, _x20, _x21, _x22, _x23, _x24) {
      return _handleSignedEncryptedContents.apply(this, arguments);
    }

    return handleSignedEncryptedContents;
  }();

  _proto.putFile = /*#__PURE__*/function () {
    var _putFile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(path, content, options) {
      var _this = this;

      var defaults, opt, gaiaHubConfig, maxUploadBytes, hasMaxUpload, contentLoader, contentType, sizeErrMsg, sizeErr, encryptedSize, _sizeErrMsg, _sizeErr, etag, newFile, sessionData, _sessionData$etags, _sessionData$etags2, uploadFn, contentData, privateKey, signatureObject, signatureContent, contentForUpload, publicKey, _contentData, freshHubConfig;

      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              defaults = {
                encrypt: true,
                sign: false,
                cipherTextEncoding: 'hex',
                dangerouslyIgnoreEtag: false
              };
              opt = Object.assign({}, defaults, options);
              _context10.next = 4;
              return this.getOrSetLocalGaiaHubConnection();

            case 4:
              gaiaHubConfig = _context10.sent;
              maxUploadBytes = megabytesToBytes(gaiaHubConfig.max_file_upload_size_megabytes);
              hasMaxUpload = maxUploadBytes > 0;
              contentLoader = new FileContentLoader(content, opt.contentType);
              contentType = contentLoader.contentType;

              if (!(!opt.encrypt && hasMaxUpload && contentLoader.contentByteLength > maxUploadBytes)) {
                _context10.next = 14;
                break;
              }

              sizeErrMsg = "The max file upload size for this hub is " + maxUploadBytes + " bytes, the given content is " + contentLoader.contentByteLength + " bytes";
              sizeErr = new PayloadTooLargeError(sizeErrMsg, null, maxUploadBytes);
              console.error(sizeErr);
              throw sizeErr;

            case 14:
              if (!(opt.encrypt && hasMaxUpload)) {
                _context10.next = 21;
                break;
              }

              encryptedSize = eciesGetJsonStringLength({
                contentLength: contentLoader.contentByteLength,
                wasString: contentLoader.wasString,
                sign: !!opt.sign,
                cipherTextEncoding: opt.cipherTextEncoding
              });

              if (!(encryptedSize > maxUploadBytes)) {
                _context10.next = 21;
                break;
              }

              _sizeErrMsg = "The max file upload size for this hub is " + maxUploadBytes + " bytes, the given content is " + encryptedSize + " bytes after encryption";
              _sizeErr = new PayloadTooLargeError(_sizeErrMsg, null, maxUploadBytes);
              console.error(_sizeErr);
              throw _sizeErr;

            case 21:
              newFile = true;
              sessionData = this.userSession.store.getSessionData();

              if (!opt.dangerouslyIgnoreEtag) {
                if ((_sessionData$etags = sessionData.etags) == null ? void 0 : _sessionData$etags[path]) {
                  newFile = false;
                  etag = (_sessionData$etags2 = sessionData.etags) == null ? void 0 : _sessionData$etags2[path];
                }
              }

              if (!(!opt.encrypt && opt.sign)) {
                _context10.next = 34;
                break;
              }

              _context10.next = 27;
              return contentLoader.load();

            case 27:
              contentData = _context10.sent;

              if (typeof opt.sign === 'string') {
                privateKey = opt.sign;
              } else {
                privateKey = this.userSession.loadUserData().appPrivateKey;
              }

              signatureObject = signECDSA(privateKey, contentData);
              signatureContent = JSON.stringify(signatureObject);

              uploadFn = /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(hubConfig) {
                  var writeResponse;
                  return runtime_1.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          _context8.next = 2;
                          return Promise.all([uploadToGaiaHub(path, contentData, hubConfig, contentType, newFile, etag, opt.dangerouslyIgnoreEtag), uploadToGaiaHub("" + path + SIGNATURE_FILE_SUFFIX, signatureContent, hubConfig, 'application/json')]);

                        case 2:
                          writeResponse = _context8.sent[0];

                          if (!opt.dangerouslyIgnoreEtag && writeResponse.etag) {
                            sessionData.etags[path] = writeResponse.etag;

                            _this.userSession.store.setSessionData(sessionData);
                          }

                          return _context8.abrupt("return", writeResponse.publicURL);

                        case 5:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));

                return function uploadFn(_x28) {
                  return _ref.apply(this, arguments);
                };
              }();

              _context10.next = 47;
              break;

            case 34:
              if (!(!opt.encrypt && !opt.sign)) {
                _context10.next = 38;
                break;
              }

              contentForUpload = contentLoader.content;
              _context10.next = 46;
              break;

            case 38:
              if (typeof opt.encrypt === 'string') {
                publicKey = opt.encrypt;
              } else if (typeof opt.sign === 'string') {
                publicKey = getPublicKeyFromPrivate(opt.sign);
              } else {
                publicKey = getPublicKeyFromPrivate(this.userSession.loadUserData().appPrivateKey);
              }

              _context10.next = 41;
              return contentLoader.load();

            case 41:
              _contentData = _context10.sent;
              _context10.next = 44;
              return this.userSession.encryptContent(_contentData, {
                publicKey: publicKey,
                wasString: contentLoader.wasString,
                cipherTextEncoding: opt.cipherTextEncoding,
                sign: opt.sign
              });

            case 44:
              contentForUpload = _context10.sent;
              contentType = 'application/json';

            case 46:
              uploadFn = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(hubConfig) {
                  var writeResponse;
                  return runtime_1.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          _context9.next = 2;
                          return uploadToGaiaHub(path, contentForUpload, hubConfig, contentType, newFile, etag, opt.dangerouslyIgnoreEtag);

                        case 2:
                          writeResponse = _context9.sent;

                          if (writeResponse.etag) {
                            sessionData.etags[path] = writeResponse.etag;

                            _this.userSession.store.setSessionData(sessionData);
                          }

                          return _context9.abrupt("return", writeResponse.publicURL);

                        case 5:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9);
                }));

                return function uploadFn(_x29) {
                  return _ref2.apply(this, arguments);
                };
              }();

            case 47:
              _context10.prev = 47;
              _context10.next = 50;
              return uploadFn(gaiaHubConfig);

            case 50:
              return _context10.abrupt("return", _context10.sent);

            case 53:
              _context10.prev = 53;
              _context10.t0 = _context10["catch"](47);

              if (!isRecoverableGaiaError(_context10.t0)) {
                _context10.next = 66;
                break;
              }

              console.error(_context10.t0);
              console.error('Possible recoverable error during Gaia upload, retrying...');
              _context10.next = 60;
              return this.setLocalGaiaHubConnection();

            case 60:
              freshHubConfig = _context10.sent;
              _context10.next = 63;
              return uploadFn(freshHubConfig);

            case 63:
              return _context10.abrupt("return", _context10.sent);

            case 66:
              throw _context10.t0;

            case 67:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[47, 53]]);
    }));

    function putFile(_x25, _x26, _x27) {
      return _putFile.apply(this, arguments);
    }

    return putFile;
  }();

  _proto.deleteFile = /*#__PURE__*/function () {
    var _deleteFile = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(path, options) {
      var gaiaHubConfig, opts, sessionData, freshHubConfig, _freshHubConfig;

      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return this.getOrSetLocalGaiaHubConnection();

            case 2:
              gaiaHubConfig = _context11.sent;
              opts = Object.assign({}, options);
              sessionData = this.userSession.store.getSessionData();

              if (!opts.wasSigned) {
                _context11.next = 28;
                break;
              }

              _context11.prev = 6;
              _context11.next = 9;
              return deleteFromGaiaHub(path, gaiaHubConfig);

            case 9:
              _context11.next = 11;
              return deleteFromGaiaHub("" + path + SIGNATURE_FILE_SUFFIX, gaiaHubConfig);

            case 11:
              delete sessionData.etags[path];
              this.userSession.store.setSessionData(sessionData);
              _context11.next = 26;
              break;

            case 15:
              _context11.prev = 15;
              _context11.t0 = _context11["catch"](6);
              _context11.next = 19;
              return this.setLocalGaiaHubConnection();

            case 19:
              freshHubConfig = _context11.sent;
              _context11.next = 22;
              return deleteFromGaiaHub(path, freshHubConfig);

            case 22:
              _context11.next = 24;
              return deleteFromGaiaHub("" + path + SIGNATURE_FILE_SUFFIX, gaiaHubConfig);

            case 24:
              delete sessionData.etags[path];
              this.userSession.store.setSessionData(sessionData);

            case 26:
              _context11.next = 44;
              break;

            case 28:
              _context11.prev = 28;
              _context11.next = 31;
              return deleteFromGaiaHub(path, gaiaHubConfig);

            case 31:
              delete sessionData.etags[path];
              this.userSession.store.setSessionData(sessionData);
              _context11.next = 44;
              break;

            case 35:
              _context11.prev = 35;
              _context11.t1 = _context11["catch"](28);
              _context11.next = 39;
              return this.setLocalGaiaHubConnection();

            case 39:
              _freshHubConfig = _context11.sent;
              _context11.next = 42;
              return deleteFromGaiaHub(path, _freshHubConfig);

            case 42:
              delete sessionData.etags[path];
              this.userSession.store.setSessionData(sessionData);

            case 44:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this, [[6, 15], [28, 35]]);
    }));

    function deleteFile(_x30, _x31) {
      return _deleteFile.apply(this, arguments);
    }

    return deleteFile;
  }();

  _proto.getAppBucketUrl = function getAppBucketUrl(gaiaHubUrl, appPrivateKey) {
    return getBucketUrl(gaiaHubUrl, appPrivateKey);
  };

  _proto.listFilesLoop = /*#__PURE__*/function () {
    var _listFilesLoop = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12(hubConfig, page, callCount, fileCount, callback) {
      var response, pageRequest, fetchOptions, freshHubConfig, responseText, responseJSON, entries, nextPage, entriesLength, i, rc;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              if (!(callCount > 65536)) {
                _context12.next = 2;
                break;
              }

              throw new Error('Too many entries to list');

            case 2:
              _context12.t0 = hubConfig;

              if (_context12.t0) {
                _context12.next = 7;
                break;
              }

              _context12.next = 6;
              return this.getOrSetLocalGaiaHubConnection();

            case 6:
              _context12.t0 = _context12.sent;

            case 7:
              hubConfig = _context12.t0;
              _context12.prev = 8;
              pageRequest = JSON.stringify({
                page: page
              });
              fetchOptions = {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': "" + pageRequest.length,
                  Authorization: "bearer " + hubConfig.token
                },
                body: pageRequest
              };
              _context12.next = 13;
              return fetchPrivate(hubConfig.server + "/list-files/" + hubConfig.address, fetchOptions);

            case 13:
              response = _context12.sent;

              if (response.ok) {
                _context12.next = 18;
                break;
              }

              _context12.next = 17;
              return getBlockstackErrorFromResponse(response, 'ListFiles failed.', hubConfig);

            case 17:
              throw _context12.sent;

            case 18:
              _context12.next = 28;
              break;

            case 20:
              _context12.prev = 20;
              _context12.t1 = _context12["catch"](8);

              if (!(callCount === 0)) {
                _context12.next = 27;
                break;
              }

              _context12.next = 25;
              return this.setLocalGaiaHubConnection();

            case 25:
              freshHubConfig = _context12.sent;
              return _context12.abrupt("return", this.listFilesLoop(freshHubConfig, page, callCount + 1, 0, callback));

            case 27:
              throw _context12.t1;

            case 28:
              _context12.next = 30;
              return response.text();

            case 30:
              responseText = _context12.sent;
              responseJSON = JSON.parse(responseText);
              entries = responseJSON.entries;
              nextPage = responseJSON.page;

              if (!(entries === null || entries === undefined)) {
                _context12.next = 36;
                break;
              }

              throw new Error('Bad listFiles response: no entries');

            case 36:
              entriesLength = 0;
              i = 0;

            case 38:
              if (!(i < entries.length)) {
                _context12.next = 47;
                break;
              }

              if (!(entries[i] !== null)) {
                _context12.next = 44;
                break;
              }

              entriesLength++;
              rc = callback(entries[i]);

              if (rc) {
                _context12.next = 44;
                break;
              }

              return _context12.abrupt("return", fileCount + i);

            case 44:
              i++;
              _context12.next = 38;
              break;

            case 47:
              if (!(nextPage && entries.length > 0)) {
                _context12.next = 51;
                break;
              }

              return _context12.abrupt("return", this.listFilesLoop(hubConfig, nextPage, callCount + 1, fileCount + entriesLength, callback));

            case 51:
              return _context12.abrupt("return", fileCount + entriesLength);

            case 52:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[8, 20]]);
    }));

    function listFilesLoop(_x32, _x33, _x34, _x35, _x36) {
      return _listFilesLoop.apply(this, arguments);
    }

    return listFilesLoop;
  }();

  _proto.listFiles = function listFiles(callback) {
    return this.listFilesLoop(null, null, 0, 0, callback);
  };

  _proto.getOrSetLocalGaiaHubConnection = /*#__PURE__*/function () {
    var _getOrSetLocalGaiaHubConnection = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
      var sessionData, userData, hubConfig;
      return runtime_1.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              sessionData = this.userSession.store.getSessionData();
              userData = sessionData.userData;

              if (userData) {
                _context13.next = 4;
                break;
              }

              throw new InvalidStateError('Missing userData');

            case 4:
              hubConfig = userData.gaiaHubConfig;

              if (!hubConfig) {
                _context13.next = 7;
                break;
              }

              return _context13.abrupt("return", Promise.resolve(hubConfig));

            case 7:
              return _context13.abrupt("return", this.setLocalGaiaHubConnection());

            case 8:
            case "end":
              return _context13.stop();
          }
        }
      }, _callee13, this);
    }));

    function getOrSetLocalGaiaHubConnection() {
      return _getOrSetLocalGaiaHubConnection.apply(this, arguments);
    }

    return getOrSetLocalGaiaHubConnection;
  }();

  _proto.setLocalGaiaHubConnection = /*#__PURE__*/function () {
    var _setLocalGaiaHubConnection = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
      var userData, gaiaConfig, sessionData;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              userData = this.userSession.loadUserData();

              if (userData) {
                _context14.next = 3;
                break;
              }

              throw new InvalidStateError('Missing userData');

            case 3:
              if (!userData.hubUrl) {
                userData.hubUrl = BLOCKSTACK_DEFAULT_GAIA_HUB_URL;
              }

              _context14.next = 6;
              return connectToGaiaHub(userData.hubUrl, userData.appPrivateKey, userData.gaiaAssociationToken);

            case 6:
              gaiaConfig = _context14.sent;
              userData.gaiaHubConfig = gaiaConfig;
              sessionData = this.userSession.store.getSessionData();
              sessionData.userData.gaiaHubConfig = gaiaConfig;
              this.userSession.store.setSessionData(sessionData);
              return _context14.abrupt("return", gaiaConfig);

            case 12:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this);
    }));

    function setLocalGaiaHubConnection() {
      return _setLocalGaiaHubConnection.apply(this, arguments);
    }

    return setLocalGaiaHubConnection;
  }();

  return Storage;
}();

function normalizeOptions(userSession, options) {
  var opts = Object.assign({}, options);

  if (opts.username) {
    if (!opts.app) {
      if (!userSession.appConfig) {
        throw new InvalidStateError('Missing AppConfig');
      }

      opts.app = userSession.appConfig.appDomain;
    }

    if (!opts.zoneFileLookupURL) {
      if (!userSession.appConfig) {
        throw new InvalidStateError('Missing AppConfig');
      }

      if (!userSession.store) {
        throw new InvalidStateError('Missing store UserSession');
      }

      var sessionData = userSession.store.getSessionData();
      var configuredCoreNode = sessionData.userData.coreNode || userSession.appConfig.coreNode;

      if (configuredCoreNode) {
        opts.zoneFileLookupURL = "" + configuredCoreNode + NAME_LOOKUP_PATH;
      }
    }
  }

  return opts;
}

function isRecoverableGaiaError(error) {
  if (!error || !error.hubError || !error.hubError.statusCode) {
    return false;
  }

  var statusCode = error.hubError.statusCode;

  if (statusCode === 401) {
    return true;
  }

  if (statusCode === 409) {
    return true;
  }

  if (statusCode >= 500 && statusCode <= 599) {
    return true;
  }

  return false;
}

export { BLOCKSTACK_GAIA_HUB_LABEL, Storage, connectToGaiaHub, deleteFromGaiaHub, getBucketUrl, getFullReadUrl, uploadToGaiaHub };
//# sourceMappingURL=storage.esm.js.map
