{"version":3,"file":"authorization.esm.js","sources":["../src/authorization.ts"],"sourcesContent":["import {\n  AuthType,\n  AddressHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray, txidFromData, leftPadHex, cloneDeep } from './utils';\n\nimport {\n  addressFromPublicKeys,\n  deserializeLPList,\n  createLPList,\n  serializeLPList,\n  createEmptyAddress,\n} from './types';\n\nimport {\n  StacksPublicKey,\n  StacksPrivateKey,\n  createStacksPublicKey,\n  isCompressed,\n  signWithKey,\n  getPublicKey,\n  serializePublicKey,\n  deserializePublicKey,\n  publicKeyFromSignature,\n} from './keys';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { SerializationError, DeserializationError, SigningError } from './errors';\n\nabstract class Deserializable {\n  abstract serialize(): Buffer;\n  abstract deserialize(bufferReader: BufferReader): void;\n  static deserialize<T extends Deserializable>(this: new () => T, bufferReader: BufferReader): T {\n    const message = new this();\n    message.deserialize(bufferReader);\n    return message;\n  }\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = Buffer.from(signature, 'hex').byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: Buffer.alloc(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, 0x00).toString('hex'),\n  };\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(messageSignature.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMessageSignature(bufferReader: BufferReader): MessageSignature {\n  return createMessageSignature(\n    bufferReader.readBuffer(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES).toString('hex')\n  );\n}\n\nenum AuthFieldType {\n  PublicKey = 0x00,\n  Signature = 0x02,\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      bufferArray.appendByte(AuthFieldType.PublicKey);\n      bufferArray.push(serializePublicKey(field.contents));\n      break;\n    case StacksMessageType.MessageSignature:\n      bufferArray.appendByte(AuthFieldType.Signature);\n      bufferArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeTransactionAuthField(bufferReader: BufferReader): TransactionAuthField {\n  const authFieldType = bufferReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKey:\n      return createTransactionAuthField(deserializePublicKey(bufferReader));\n    case AuthFieldType.Signature:\n      return createTransactionAuthField(deserializeMessageSignature(bufferReader));\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: BigNum,\n  fee: BigNum\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: BigNum,\n  fee: BigNum\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(condition: SpendingCondition): condition is SingleSigSpendingCondition {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingCondition): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = new BigNum(0);\n  cloned.fee = new BigNum(0);\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return cloned;\n}\n\nexport function serializeSingleSigSpendingCondition(condition: SingleSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n  bufferArray.appendByte(condition.keyEncoding);\n  bufferArray.push(serializeMessageSignature(condition.signature));\n  return bufferArray.concatBuffer();\n}\n\nexport function serializeMultiSigSpendingCondition(condition: MultiSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n\n  const fields = createLPList(condition.fields);\n  bufferArray.push(serializeLPList(fields));\n\n  const numSigs = Buffer.alloc(2);\n  numSigs.writeUInt16BE(condition.signaturesRequired, 0);\n  bufferArray.push(numSigs);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bufferReader: BufferReader\n): SingleSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const keyEncoding = bufferReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  const signature = deserializeMessageSignature(bufferReader);\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bufferReader: BufferReader\n): MultiSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const fields = deserializeLPList(bufferReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  const signaturesRequired = bufferReader.readUInt16BE();\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingCondition): Buffer {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  } else {\n    return serializeMultiSigSpendingCondition(condition);\n  }\n}\n\nexport function deserializeSpendingCondition(bufferReader: BufferReader): SpendingCondition {\n  const hashMode = bufferReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bufferReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bufferReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    Buffer.from([authType]).toString('hex') +\n    fee.toArrayLike(Buffer, 'be', 8).toString('hex') +\n    nonce.toArrayLike(Buffer, 'be', 8).toString('hex');\n\n  if (Buffer.from(sigHash, 'hex').byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  if (Buffer.from(sigHash, 'hex').byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const publicKeyEncoding = isCompressed(publicKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKeyEncoding, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  // @ts-ignore\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(publicKeyFromSignature(sigHashPreSign, signature));\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, PubKeyEncoding.Compressed, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    new BigNum(0),\n    new BigNum(0)\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(condition: SpendingCondition, initialSigHash: string, authType: AuthType): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    // TODO: verify multisig\n    return '';\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingCondition,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // TODO: verify pub key\n\n  return nextSigHash;\n}\n\nexport class Authorization extends Deserializable {\n  authType?: AuthType;\n  spendingCondition?: SpendingCondition;\n  sponsorSpendingCondition?: SpendingCondition;\n\n  constructor(\n    authType?: AuthType,\n    spendingConditions?: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    super();\n    this.authType = authType;\n    this.spendingCondition = spendingConditions;\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  intoInitialSighashAuth(): Authorization {\n    if (this.spendingCondition) {\n      switch (this.authType) {\n        case AuthType.Standard:\n          return new Authorization(AuthType.Standard, clearCondition(this.spendingCondition));\n        case AuthType.Sponsored:\n          return new Authorization(\n            AuthType.Sponsored,\n            clearCondition(this.spendingCondition),\n            newInitialSigHash()\n          );\n        default:\n          throw new SigningError('Unexpected authorization type for signing');\n      }\n    }\n\n    throw new Error('Authorization missing SpendingCondition');\n  }\n\n  setFee(amount: BigNum) {\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition!.fee = amount;\n        break;\n      case AuthType.Sponsored:\n        this.sponsorSpendingCondition!.fee = amount;\n        break;\n    }\n  }\n\n  getFee() {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return this.spendingCondition!.fee;\n      case AuthType.Sponsored:\n        return this.sponsorSpendingCondition!.fee;\n      default:\n        return 0;\n    }\n  }\n\n  setNonce(nonce: BigNum) {\n    this.spendingCondition!.nonce = nonce;\n  }\n\n  setSponsorNonce(nonce: BigNum) {\n    this.sponsorSpendingCondition!.nonce = nonce;\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  verifyOrigin(initialSigHash: string): string {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      case AuthType.Sponsored:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      default:\n        throw new SigningError('Invalid origin auth type');\n    }\n  }\n\n  serialize(): Buffer {\n    const bufferArray: BufferArray = new BufferArray();\n    if (this.authType === undefined) {\n      throw new SerializationError('\"authType\" is undefined');\n    }\n    bufferArray.appendByte(this.authType);\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        break;\n      case AuthType.Sponsored:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        if (this.sponsorSpendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        bufferArray.push(serializeSpendingCondition(this.sponsorSpendingCondition));\n        break;\n      default:\n        throw new SerializationError(\n          `Unexpected transaction AuthType while serializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n\n    return bufferArray.concatBuffer();\n  }\n\n  deserialize(bufferReader: BufferReader) {\n    this.authType = bufferReader.readUInt8Enum(AuthType, n => {\n      throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      case AuthType.Sponsored:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        this.sponsorSpendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      // throw new DeserializationError('Not yet implemented: deserializing sponsored transactions');\n      default:\n        throw new DeserializationError(\n          `Unexpected transaction AuthType while deserializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n  }\n}\n\nexport class StandardAuthorization extends Authorization {\n  constructor(spendingCondition: SpendingCondition) {\n    super(AuthType.Standard, spendingCondition);\n  }\n}\n\nexport class SponsoredAuthorization extends Authorization {\n  constructor(\n    originSpendingCondition: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    let sponsorSC = sponsorSpendingCondition;\n    if (!sponsorSC) {\n      sponsorSC = createSingleSigSpendingCondition(\n        AddressHashMode.SerializeP2PKH,\n        '0'.repeat(66),\n        new BigNum(0),\n        new BigNum(0)\n      );\n    }\n    super(AuthType.Sponsored, originSpendingCondition, sponsorSC);\n  }\n}\n"],"names":["Deserializable","deserialize","bufferReader","message","createMessageSignature","signature","length","Buffer","from","byteLength","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","Error","type","StacksMessageType","MessageSignature","data","emptyMessageSignature","alloc","toString","serializeMessageSignature","messageSignature","bufferArray","BufferArray","appendHexString","concatBuffer","deserializeMessageSignature","readBuffer","AuthFieldType","createTransactionAuthField","contents","TransactionAuthField","serializeTransactionAuthField","field","PublicKey","appendByte","push","serializePublicKey","Signature","deserializeTransactionAuthField","authFieldType","readUInt8Enum","n","DeserializationError","deserializePublicKey","JSON","stringify","createSingleSigSpendingCondition","hashMode","pubKey","nonce","fee","signer","addressFromPublicKeys","createStacksPublicKey","hash160","keyEncoding","isCompressed","PubKeyEncoding","Compressed","Uncompressed","createMultiSigSpendingCondition","numSigs","pubKeys","stacksPublicKeys","map","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","cloneDeep","BigNum","serializeSingleSigSpendingCondition","toArrayLike","serializeMultiSigSpendingCondition","createLPList","serializeLPList","writeUInt16BE","deserializeSingleSigSpendingCondition","deserializeMultiSigSpendingCondition","deserializeLPList","values","readUInt16BE","serializeSpendingCondition","deserializeSpendingCondition","AddressHashMode","SerializeP2PKH","SerializeP2WPKH","makeSigHashPreSign","curSigHash","authType","hashLength","sigHash","txidFromData","makeSigHashPostSign","pubKeyEncoding","leftPadHex","nextSignature","privateKey","sigHashPreSign","signWithKey","publicKey","getPublicKey","publicKeyEncoding","nextSigHash","nextSig","nextVerification","initialSigHash","publicKeyFromSignature","newInitialSigHash","spendingCondition","createEmptyAddress","verify","verifySingleSig","Authorization","spendingConditions","sponsorSpendingCondition","intoInitialSighashAuth","AuthType","Standard","Sponsored","SigningError","setFee","amount","getFee","setNonce","setSponsorNonce","setSponsor","verifyOrigin","serialize","undefined","SerializationError","StandardAuthorization","SponsoredAuthorization","originSpendingCondition","sponsorSC","repeat"],"mappings":"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"}