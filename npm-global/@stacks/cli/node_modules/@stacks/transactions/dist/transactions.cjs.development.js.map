{"version":3,"file":"transactions.cjs.development.js","sources":["../src/constants.ts","../../../node_modules/regenerator-runtime/runtime.js","../src/keys.ts","../src/errors.ts","../src/postcondition.ts","../src/payload.ts","../src/types.ts","../src/clarity/types/principalCV.ts","../src/clarity/clarityValue.ts","../src/clarity/types/booleanCV.ts","../src/clarity/types/intCV.ts","../src/clarity/types/bufferCV.ts","../src/clarity/types/optionalCV.ts","../src/clarity/types/responseCV.ts","../src/clarity/types/listCV.ts","../src/clarity/types/tupleCV.ts","../src/clarity/types/stringCV.ts","../src/clarity/serialize.ts","../src/bufferReader.ts","../src/clarity/deserialize.ts","../src/utils.ts","../src/authorization.ts","../src/transaction.ts","../src/signer.ts","../src/contract-abi.ts","../src/builders.ts"],"sourcesContent":["/**\n * Unsigned 32-bit integer\n */\nenum ChainID {\n  Testnet = 0x80000000,\n  Mainnet = 0x00000001,\n}\n\nconst DEFAULT_CHAIN_ID = ChainID.Mainnet;\nconst MAX_STRING_LENGTH_BYTES = 128;\nconst CLARITY_INT_SIZE = 128;\nconst COINBASE_BUFFER_LENGTH_BYTES = 32;\nconst RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;\nconst COMPRESSED_PUBKEY_LENGTH_BYTES = 32;\nconst UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;\nconst MEMO_MAX_LENGTH_BYTES = 34;\nconst DEFAULT_CORE_NODE_API_URL = 'https://stacks-node-api.mainnet.stacks.co';\n\nenum StacksMessageType {\n  Address,\n  Principal,\n  LengthPrefixedString,\n  MemoString,\n  AssetInfo,\n  PostCondition,\n  PublicKey,\n  LengthPrefixedList,\n  Payload,\n  MessageSignature,\n  TransactionAuthField,\n}\n\nenum PayloadType {\n  TokenTransfer = 0x00,\n  SmartContract = 0x01,\n  ContractCall = 0x02,\n  PoisonMicroblock = 0x03,\n  Coinbase = 0x04,\n}\n\nenum AnchorMode {\n  OnChainOnly = 0x01,\n  OffChainOnly = 0x02,\n  Any = 0x03,\n}\n\nenum TransactionVersion {\n  Mainnet = 0x00,\n  Testnet = 0x80,\n}\n\nconst DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;\n\nenum PostConditionMode {\n  Allow = 0x01,\n  Deny = 0x02,\n}\n\nenum PostConditionType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum AuthType {\n  Standard = 0x04,\n  Sponsored = 0x05,\n}\n\nenum AddressHashMode {\n  // serialization modes for public keys to addresses.\n  // We support four different modes due to legacy compatibility with Stacks v1 addresses:\n  /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */\n  SerializeP2PKH = 0x00,\n  /** MultiSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */\n  SerializeP2SH = 0x01,\n  /** SingleSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */\n  SerializeP2WPKH = 0x02,\n  /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */\n  SerializeP2WSH = 0x03,\n}\n\ntype SingleSigHashMode = AddressHashMode.SerializeP2PKH | AddressHashMode.SerializeP2WPKH;\ntype MultiSigHashMode = AddressHashMode.SerializeP2SH | AddressHashMode.SerializeP2WSH;\n\nenum AddressVersion {\n  MainnetSingleSig = 22,\n  MainnetMultiSig = 20,\n  TestnetSingleSig = 26,\n  TestnetMultiSig = 21,\n}\n\nenum PubKeyEncoding {\n  Compressed = 0x00,\n  Uncompressed = 0x01,\n}\n\nenum FungibleConditionCode {\n  Equal = 0x01,\n  Greater = 0x02,\n  GreaterEqual = 0x03,\n  Less = 0x04,\n  LessEqual = 0x05,\n}\n\nenum NonFungibleConditionCode {\n  DoesNotOwn = 0x10,\n  Owns = 0x11,\n}\n\nenum PostConditionPrincipalID {\n  Origin = 0x01,\n  Standard = 0x02,\n  Contract = 0x03,\n}\n\nenum AssetType {\n  STX = 0x00,\n  Fungible = 0x01,\n  NonFungible = 0x02,\n}\n\nenum TxRejectedReason {\n  Serialization = 'Serialization',\n  Deserialization = 'Deserialization',\n  SignatureValidation = 'SignatureValidation',\n  FeeTooLow = 'FeeTooLow',\n  BadNonce = 'BadNonce',\n  NotEnoughFunds = 'NotEnoughFunds',\n  NoSuchContract = 'NoSuchContract',\n  NoSuchPublicFunction = 'NoSuchPublicFunction',\n  BadFunctionArgument = 'BadFunctionArgument',\n  ContractAlreadyExists = 'ContractAlreadyExists',\n  PoisonMicroblocksDoNotConflict = 'PoisonMicroblocksDoNotConflict',\n  PoisonMicroblockHasUnknownPubKeyHash = 'PoisonMicroblockHasUnknownPubKeyHash',\n  PoisonMicroblockIsInvalid = 'PoisonMicroblockIsInvalid',\n  BadAddressVersionByte = 'BadAddressVersionByte',\n  NoCoinbaseViaMempool = 'NoCoinbaseViaMempool',\n  ServerFailureNoSuchChainTip = 'ServerFailureNoSuchChainTip',\n  ServerFailureDatabase = 'ServerFailureDatabase',\n  ServerFailureOther = 'ServerFailureOther',\n}\n\nexport {\n  MAX_STRING_LENGTH_BYTES,\n  CLARITY_INT_SIZE,\n  COINBASE_BUFFER_LENGTH_BYTES,\n  DEFAULT_CHAIN_ID,\n  DEFAULT_TRANSACTION_VERSION,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  DEFAULT_CORE_NODE_API_URL,\n  ChainID,\n  StacksMessageType,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  PostConditionMode,\n  PostConditionType,\n  PostConditionPrincipalID,\n  AuthType,\n  AddressHashMode,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  AddressVersion,\n  PubKeyEncoding,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  AssetType,\n  TxRejectedReason,\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  COMPRESSED_PUBKEY_LENGTH_BYTES,\n  UNCOMPRESSED_PUBKEY_LENGTH_BYTES,\n  StacksMessageType,\n  AddressHashMode,\n  TransactionVersion,\n} from './constants';\n\nimport {\n  BufferArray,\n  leftPadHexToLength,\n  intToHexString,\n  randomBytes,\n  hash160,\n  hashP2PKH,\n  hexStringToInt,\n} from './utils';\n\nimport { ec as EC } from 'elliptic';\n\nimport { MessageSignature, createMessageSignature } from './authorization';\nimport { BufferReader } from './bufferReader';\nimport { AddressVersion } from './constants';\nimport { c32address } from 'c32check';\nimport { addressHashModeToVersion, addressFromVersionHash, addressToString } from './types';\n\nexport interface StacksPublicKey {\n  readonly type: StacksMessageType.PublicKey;\n  readonly data: Buffer;\n}\n\n/** Creates a P2PKH address string from the given private key and tx version. */\nexport function getAddressFromPrivateKey(\n  /** Private key buffer or hex string */\n  privateKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  const pubKey = pubKeyfromPrivKey(privateKey);\n  return getAddressFromPublicKey(pubKey.data, transactionVersion);\n}\n\n/** Creates a P2PKH address string from the given public key and tx version. */\nexport function getAddressFromPublicKey(\n  /** Public key buffer or hex string */\n  publicKey: string | Buffer,\n  transactionVersion = TransactionVersion.Mainnet\n): string {\n  publicKey = typeof publicKey === 'string' ? publicKey : publicKey.toString('hex');\n  const addrVer = addressHashModeToVersion(AddressHashMode.SerializeP2PKH, transactionVersion);\n  const addr = addressFromVersionHash(addrVer, hashP2PKH(Buffer.from(publicKey, 'hex')));\n  const addrString = addressToString(addr);\n  return addrString;\n}\n\nexport function createStacksPublicKey(key: string): StacksPublicKey {\n  return {\n    type: StacksMessageType.PublicKey,\n    data: Buffer.from(key, 'hex'),\n  };\n}\n\nexport function publicKeyFromSignature(message: string, messageSignature: MessageSignature) {\n  const ec = new EC('secp256k1');\n  const messageBN = ec\n    .keyFromPrivate(message, 'hex')\n    .getPrivate()\n    .toString(10);\n\n  const parsedSignature = parseRecoverableSignature(messageSignature.data);\n\n  const publicKey = ec.recoverPubKey(\n    messageBN,\n    parsedSignature,\n    parsedSignature.recoveryParam,\n    'hex'\n  ) as { encodeCompressed: (enc: string) => string };\n\n  return publicKey.encodeCompressed('hex');\n}\n\nexport function publicKeyFromBuffer(data: Buffer): StacksPublicKey {\n  return { type: StacksMessageType.PublicKey, data };\n}\n\nexport function isCompressed(key: StacksPublicKey): boolean {\n  return !key.data.toString('hex').startsWith('04');\n}\n\nexport function publicKeyToString(key: StacksPublicKey): string {\n  return key.data.toString('hex');\n}\n\nexport function serializePublicKey(key: StacksPublicKey): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(key.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function pubKeyfromPrivKey(privateKey: string | Buffer): StacksPublicKey {\n  const privKey = createStacksPrivateKey(privateKey);\n  const ec = new EC('secp256k1');\n  const keyPair = ec.keyFromPrivate(privKey.data.toString('hex').slice(0, 64), 'hex');\n  const pubKey = keyPair.getPublic(privKey.compressed, 'hex');\n  return createStacksPublicKey(pubKey);\n}\n\nexport function deserializePublicKey(bufferReader: BufferReader): StacksPublicKey {\n  const fieldId = bufferReader.readUInt8();\n  const keyLength =\n    fieldId !== 4 ? COMPRESSED_PUBKEY_LENGTH_BYTES : UNCOMPRESSED_PUBKEY_LENGTH_BYTES;\n  return publicKeyFromBuffer(\n    Buffer.concat([Buffer.from([fieldId]), bufferReader.readBuffer(keyLength)])\n  );\n}\n\nexport interface StacksPrivateKey {\n  data: Buffer;\n  compressed: boolean;\n}\n\nexport function createStacksPrivateKey(key: string | Buffer): StacksPrivateKey {\n  const data = typeof key === 'string' ? Buffer.from(key, 'hex') : key;\n  let compressed: boolean;\n  if (data.length === 33) {\n    if (data[data.length - 1] !== 1) {\n      throw new Error(\n        'Improperly formatted private-key. 33 byte length usually ' +\n          'indicates compressed key, but last byte must be == 0x01'\n      );\n    }\n    compressed = true;\n  } else if (data.length === 32) {\n    compressed = false;\n  } else {\n    throw new Error(\n      `Improperly formatted private-key hex string: length should be 32 or 33 bytes, provided with length ${data.length}`\n    );\n  }\n  return { data, compressed };\n}\n\nexport function makeRandomPrivKey(entropy?: Buffer): StacksPrivateKey {\n  const ec = new EC('secp256k1');\n  const options = { entropy: entropy || randomBytes(32) };\n  const keyPair = ec.genKeyPair(options);\n  const privateKey = keyPair.getPrivate().toString('hex', 32);\n  return createStacksPrivateKey(privateKey);\n}\n\nexport function signWithKey(privateKey: StacksPrivateKey, input: string): MessageSignature {\n  const ec = new EC('secp256k1');\n  const key = ec.keyFromPrivate(privateKey.data.toString('hex').slice(0, 64), 'hex');\n  const signature = key.sign(input, 'hex', { canonical: true });\n  const coordinateValueBytes = 32;\n  const r = leftPadHexToLength(signature.r.toString('hex'), coordinateValueBytes * 2);\n  const s = leftPadHexToLength(signature.s.toString('hex'), coordinateValueBytes * 2);\n  if (signature.recoveryParam === undefined || signature.recoveryParam === null) {\n    throw new Error('\"signature.recoveryParam\" is not set');\n  }\n  const recoveryParam = intToHexString(signature.recoveryParam, 1);\n  const recoverableSignatureString = recoveryParam + r + s;\n  const recoverableSignature = createMessageSignature(recoverableSignatureString);\n  return recoverableSignature;\n}\n\nexport function getSignatureRecoveryParam(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  return hexStringToInt(recoveryParamHex);\n}\n\nexport function parseRecoverableSignature(signature: string) {\n  const coordinateValueBytes = 32;\n  if (signature.length < coordinateValueBytes * 2 * 2 + 1) {\n    throw new Error('Invalid signature');\n  }\n  const recoveryParamHex = signature.substr(0, 2);\n  const r = signature.substr(2, coordinateValueBytes * 2);\n  const s = signature.substr(2 + coordinateValueBytes * 2, coordinateValueBytes * 2);\n  return {\n    recoveryParam: hexStringToInt(recoveryParamHex),\n    r,\n    s,\n  };\n}\n\nexport function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey {\n  return pubKeyfromPrivKey(privateKey.data);\n}\n\nexport function privateKeyToString(privateKey: StacksPrivateKey): string {\n  return privateKey.data.toString('hex');\n}\n\nexport function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string {\n  return c32address(version, hash160(publicKey.data).toString('hex'));\n}\n","export class StacksTransactionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SerializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class DeserializationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class NotImplementedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class SigningError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nexport class VerificationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = this.constructor.name;\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n","import {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  AssetInfo,\n  serializeAssetInfo,\n  deserializeAssetInfo,\n  PostConditionPrincipal,\n  serializePrincipal,\n  deserializePrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n} from './types';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity';\nimport { DeserializationError } from './errors';\n\nexport type PostCondition = STXPostCondition | FungiblePostCondition | NonFungiblePostCondition;\n\nexport interface STXPostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.STX;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n}\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount,\n  };\n}\n\nexport interface FungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.Fungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: FungibleConditionCode;\n  readonly amount: BigNum;\n  readonly assetInfo: AssetInfo;\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount,\n    assetInfo,\n  };\n}\n\nexport interface NonFungiblePostCondition {\n  readonly type: StacksMessageType.PostCondition;\n  readonly conditionType: PostConditionType.NonFungible;\n  readonly principal: PostConditionPrincipal;\n  readonly conditionCode: NonFungibleConditionCode;\n  /** Structure that identifies the token type. */\n  readonly assetInfo: AssetInfo;\n  /** The Clarity value that names the token instance. */\n  readonly assetName: ClarityValue;\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n\nexport function serializePostCondition(postCondition: PostCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(postCondition.conditionType);\n  bufferArray.push(serializePrincipal(postCondition.principal));\n\n  if (\n    postCondition.conditionType === PostConditionType.Fungible ||\n    postCondition.conditionType === PostConditionType.NonFungible\n  ) {\n    bufferArray.push(serializeAssetInfo(postCondition.assetInfo));\n  }\n\n  if (postCondition.conditionType === PostConditionType.NonFungible) {\n    bufferArray.push(serializeCV(postCondition.assetName));\n  }\n\n  bufferArray.appendByte(postCondition.conditionCode);\n\n  if (\n    postCondition.conditionType === PostConditionType.STX ||\n    postCondition.conditionType === PostConditionType.Fungible\n  ) {\n    bufferArray.push(postCondition.amount.toArrayLike(Buffer, 'be', 8));\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePostCondition(bufferReader: BufferReader): PostCondition {\n  const postConditionType = bufferReader.readUInt8Enum(PostConditionType, n => {\n    throw new DeserializationError(`Could not read ${n} as PostConditionType`);\n  });\n\n  const principal = deserializePrincipal(bufferReader);\n\n  let conditionCode;\n  let assetInfo;\n  let amount;\n  switch (postConditionType) {\n    case PostConditionType.STX:\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.STX,\n        principal,\n        conditionCode,\n        amount,\n      };\n    case PostConditionType.Fungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(FungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      amount = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.Fungible,\n        principal,\n        conditionCode,\n        amount,\n        assetInfo,\n      };\n    case PostConditionType.NonFungible:\n      assetInfo = deserializeAssetInfo(bufferReader);\n      const assetName = deserializeCV(bufferReader);\n      conditionCode = bufferReader.readUInt8Enum(NonFungibleConditionCode, n => {\n        throw new DeserializationError(`Could not read ${n} as FungibleConditionCode`);\n      });\n      return {\n        type: StacksMessageType.PostCondition,\n        conditionType: PostConditionType.NonFungible,\n        principal,\n        conditionCode,\n        assetInfo,\n        assetName,\n      };\n  }\n}\n","import { COINBASE_BUFFER_LENGTH_BYTES, PayloadType, StacksMessageType } from './constants';\n\nimport { BufferArray } from './utils';\n\nimport {\n  Address,\n  MemoString,\n  createAddress,\n  createMemoString,\n  LengthPrefixedString,\n  createLPString,\n  serializeStacksMessage,\n  deserializeAddress,\n  deserializeLPString,\n  deserializeMemoString,\n  codeBodyString,\n} from './types';\n\nimport { ClarityValue, serializeCV, deserializeCV } from './clarity/';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { PrincipalCV, principalCV } from './clarity/types/principalCV';\n\nexport type Payload =\n  | TokenTransferPayload\n  | ContractCallPayload\n  | SmartContractPayload\n  | PoisonPayload\n  | CoinbasePayload;\n\nexport interface TokenTransferPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.TokenTransfer;\n  readonly recipient: PrincipalCV;\n  readonly amount: BigNum;\n  readonly memo: MemoString;\n}\n\nexport function createTokenTransferPayload(\n  recipient: string | PrincipalCV,\n  amount: BigNum,\n  memo?: string | MemoString\n): TokenTransferPayload {\n  if (typeof recipient === 'string') {\n    recipient = principalCV(recipient);\n  }\n  if (typeof memo === 'string') {\n    memo = createMemoString(memo);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.TokenTransfer,\n    recipient,\n    amount,\n    memo: memo ?? createMemoString(''),\n  };\n}\n\nexport interface ContractCallPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.ContractCall;\n  readonly contractAddress: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly functionName: LengthPrefixedString;\n  readonly functionArgs: ClarityValue[];\n}\n\nexport function createContractCallPayload(\n  contractAddress: string | Address,\n  contractName: string | LengthPrefixedString,\n  functionName: string | LengthPrefixedString,\n  functionArgs: ClarityValue[]\n): ContractCallPayload {\n  if (typeof contractAddress === 'string') {\n    contractAddress = createAddress(contractAddress);\n  }\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof functionName === 'string') {\n    functionName = createLPString(functionName);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.ContractCall,\n    contractAddress,\n    contractName,\n    functionName,\n    functionArgs,\n  };\n}\n\nexport interface SmartContractPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.SmartContract;\n  readonly contractName: LengthPrefixedString;\n  readonly codeBody: LengthPrefixedString;\n}\n\nexport function createSmartContractPayload(\n  contractName: string | LengthPrefixedString,\n  codeBody: string | LengthPrefixedString\n): SmartContractPayload {\n  if (typeof contractName === 'string') {\n    contractName = createLPString(contractName);\n  }\n  if (typeof codeBody === 'string') {\n    codeBody = codeBodyString(codeBody);\n  }\n\n  return {\n    type: StacksMessageType.Payload,\n    payloadType: PayloadType.SmartContract,\n    contractName,\n    codeBody,\n  };\n}\n\nexport interface PoisonPayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.PoisonMicroblock;\n}\n\nexport function createPoisonPayload(): PoisonPayload {\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.PoisonMicroblock };\n}\n\nexport interface CoinbasePayload {\n  readonly type: StacksMessageType.Payload;\n  readonly payloadType: PayloadType.Coinbase;\n  readonly coinbaseBuffer: Buffer;\n}\n\nexport function createCoinbasePayload(coinbaseBuffer: Buffer): CoinbasePayload {\n  if (coinbaseBuffer.byteLength != COINBASE_BUFFER_LENGTH_BYTES) {\n    throw Error(`Coinbase buffer size must be ${COINBASE_BUFFER_LENGTH_BYTES} bytes`);\n  }\n  return { type: StacksMessageType.Payload, payloadType: PayloadType.Coinbase, coinbaseBuffer };\n}\n\nexport function serializePayload(payload: Payload): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(payload.payloadType);\n\n  switch (payload.payloadType) {\n    case PayloadType.TokenTransfer:\n      bufferArray.push(serializeCV(payload.recipient));\n      bufferArray.push(payload.amount.toArrayLike(Buffer, 'be', 8));\n      bufferArray.push(serializeStacksMessage(payload.memo));\n      break;\n    case PayloadType.ContractCall:\n      bufferArray.push(serializeStacksMessage(payload.contractAddress));\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.functionName));\n      const numArgs = Buffer.alloc(4);\n      numArgs.writeUInt32BE(payload.functionArgs.length, 0);\n      bufferArray.push(numArgs);\n      payload.functionArgs.forEach(arg => {\n        bufferArray.push(serializeCV(arg));\n      });\n      break;\n    case PayloadType.SmartContract:\n      bufferArray.push(serializeStacksMessage(payload.contractName));\n      bufferArray.push(serializeStacksMessage(payload.codeBody));\n      break;\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      break;\n    case PayloadType.Coinbase:\n      bufferArray.push(payload.coinbaseBuffer);\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePayload(bufferReader: BufferReader): Payload {\n  const payloadType = bufferReader.readUInt8Enum(PayloadType, n => {\n    throw new Error(`Cannot recognize PayloadType: ${n}`);\n  });\n\n  switch (payloadType) {\n    case PayloadType.TokenTransfer:\n      const recipient = deserializeCV(bufferReader) as PrincipalCV;\n      const amount = new BigNum(bufferReader.readBuffer(8));\n      const memo = deserializeMemoString(bufferReader);\n      return createTokenTransferPayload(recipient, amount, memo);\n    case PayloadType.ContractCall:\n      const contractAddress = deserializeAddress(bufferReader);\n      const contractCallName = deserializeLPString(bufferReader);\n      const functionName = deserializeLPString(bufferReader);\n      const functionArgs = [];\n      const numberOfArgs = bufferReader.readUInt32BE();\n      for (let i = 0; i < numberOfArgs; i++) {\n        const clarityValue = deserializeCV(bufferReader);\n        functionArgs.push(clarityValue);\n      }\n      return createContractCallPayload(\n        contractAddress,\n        contractCallName,\n        functionName,\n        functionArgs\n      );\n    case PayloadType.SmartContract:\n      const smartContractName = deserializeLPString(bufferReader);\n      const codeBody = deserializeLPString(bufferReader, 4, 100000);\n      return createSmartContractPayload(smartContractName, codeBody);\n    case PayloadType.PoisonMicroblock:\n      // TODO: implement\n      return createPoisonPayload();\n    case PayloadType.Coinbase:\n      const coinbaseBuffer = bufferReader.readBuffer(COINBASE_BUFFER_LENGTH_BYTES);\n      return createCoinbasePayload(coinbaseBuffer);\n  }\n}\n","import {\n  MAX_STRING_LENGTH_BYTES,\n  MEMO_MAX_LENGTH_BYTES,\n  AddressHashMode,\n  AddressVersion,\n  TransactionVersion,\n  StacksMessageType,\n  PostConditionPrincipalID,\n} from './constants';\n\nimport { StacksPublicKey, serializePublicKey, deserializePublicKey, isCompressed } from './keys';\n\nimport {\n  BufferArray,\n  intToHexString,\n  hexStringToInt,\n  exceedsMaxLengthBytes,\n  hashP2PKH,\n  rightPadHexToLength,\n  hashP2SH,\n} from './utils';\n\nimport { c32addressDecode, c32address } from 'c32check';\nimport { BufferReader } from './bufferReader';\nimport { PostCondition, serializePostCondition, deserializePostCondition } from './postcondition';\nimport { Payload, deserializePayload, serializePayload } from './payload';\nimport { DeserializationError } from './errors';\nimport {\n  deserializeTransactionAuthField,\n  deserializeMessageSignature,\n  MessageSignature,\n  serializeMessageSignature,\n  serializeTransactionAuthField,\n  TransactionAuthField,\n} from './authorization';\n\nexport type StacksMessage =\n  | Address\n  | PostConditionPrincipal\n  | LengthPrefixedString\n  | LengthPrefixedList\n  | Payload\n  | MemoString\n  | AssetInfo\n  | PostCondition\n  | StacksPublicKey\n  | TransactionAuthField\n  | MessageSignature;\n\nexport function serializeStacksMessage(message: StacksMessage): Buffer {\n  switch (message.type) {\n    case StacksMessageType.Address:\n      return serializeAddress(message);\n    case StacksMessageType.Principal:\n      return serializePrincipal(message);\n    case StacksMessageType.LengthPrefixedString:\n      return serializeLPString(message);\n    case StacksMessageType.MemoString:\n      return serializeMemoString(message);\n    case StacksMessageType.AssetInfo:\n      return serializeAssetInfo(message);\n    case StacksMessageType.PostCondition:\n      return serializePostCondition(message);\n    case StacksMessageType.PublicKey:\n      return serializePublicKey(message);\n    case StacksMessageType.LengthPrefixedList:\n      return serializeLPList(message);\n    case StacksMessageType.Payload:\n      return serializePayload(message);\n    case StacksMessageType.TransactionAuthField:\n      return serializeTransactionAuthField(message);\n    case StacksMessageType.MessageSignature:\n      return serializeMessageSignature(message);\n  }\n}\n\nexport function deserializeStacksMessage(\n  bufferReader: BufferReader,\n  type: StacksMessageType,\n  listType?: StacksMessageType\n): StacksMessage {\n  switch (type) {\n    case StacksMessageType.Address:\n      return deserializeAddress(bufferReader);\n    case StacksMessageType.Principal:\n      return deserializePrincipal(bufferReader);\n    case StacksMessageType.LengthPrefixedString:\n      return deserializeLPString(bufferReader);\n    case StacksMessageType.MemoString:\n      return deserializeMemoString(bufferReader);\n    case StacksMessageType.AssetInfo:\n      return deserializeAssetInfo(bufferReader);\n    case StacksMessageType.PostCondition:\n      return deserializePostCondition(bufferReader);\n    case StacksMessageType.PublicKey:\n      return deserializePublicKey(bufferReader);\n    case StacksMessageType.Payload:\n      return deserializePayload(bufferReader);\n    case StacksMessageType.LengthPrefixedList:\n      if (!listType) {\n        throw new DeserializationError('No List Type specified');\n      }\n      return deserializeLPList(bufferReader, listType);\n    case StacksMessageType.MessageSignature:\n      return deserializeMessageSignature(bufferReader);\n    default:\n      throw new Error('Could not recognize StacksMessageType');\n  }\n}\n\nexport interface Address {\n  readonly type: StacksMessageType.Address;\n  readonly version: AddressVersion;\n  readonly hash160: string;\n}\n\nexport function createAddress(c32AddressString: string): Address {\n  const addressData = c32addressDecode(c32AddressString);\n  return {\n    type: StacksMessageType.Address,\n    version: addressData[0],\n    hash160: addressData[1],\n  };\n}\n\nexport function createEmptyAddress(): Address {\n  return {\n    type: StacksMessageType.Address,\n    version: AddressVersion.MainnetSingleSig,\n    hash160: '0'.repeat(40),\n  };\n}\n\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\n  return { type: StacksMessageType.Address, version, hash160: hash };\n}\n\n/**\n * Translates the tx auth hash mode to the corresponding address version.\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\n */\nexport function addressHashModeToVersion(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion\n): AddressVersion {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\n          );\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\n\nexport function addressFromHashMode(\n  hashMode: AddressHashMode,\n  txVersion: TransactionVersion,\n  data: string\n): Address {\n  const version = addressHashModeToVersion(hashMode, txVersion);\n  return addressFromVersionHash(version, data);\n}\n\nexport function addressFromPublicKeys(\n  version: AddressVersion,\n  hashMode: AddressHashMode,\n  numSigs: number,\n  publicKeys: StacksPublicKey[]\n): Address {\n  if (publicKeys.length === 0) {\n    throw Error('Invalid number of public keys');\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    if (publicKeys.length !== 1 || numSigs !== 1) {\n      throw Error('Invalid number of public keys or signatures');\n    }\n  }\n\n  if (hashMode === AddressHashMode.SerializeP2WPKH || hashMode === AddressHashMode.SerializeP2WSH) {\n    for (let i = 0; i < publicKeys.length; i++) {\n      if (!isCompressed(publicKeys[i])) {\n        throw Error('Public keys must be compressed for segwit');\n      }\n    }\n  }\n\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      return addressFromVersionHash(version, hashP2PKH(publicKeys[0].data));\n    case AddressHashMode.SerializeP2SH:\n      return addressFromVersionHash(version, hashP2SH(numSigs, publicKeys.map(serializePublicKey)));\n    default:\n      throw Error(\n        `Not yet implemented: address construction using public keys for hash mode: ${hashMode}`\n      );\n  }\n}\n\nexport function addressToString(address: Address): string {\n  return c32address(address.version, address.hash160).toString();\n}\n\nexport function serializeAddress(address: Address): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(intToHexString(address.version, 1));\n  bufferArray.appendHexString(address.hash160);\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeAddress(bufferReader: BufferReader): Address {\n  const version = hexStringToInt(bufferReader.readBuffer(1).toString('hex'));\n  const data = bufferReader.readBuffer(20).toString('hex');\n\n  return { type: StacksMessageType.Address, version, hash160: data };\n}\n\nexport type PostConditionPrincipal = StandardPrincipal | ContractPrincipal;\n\nexport interface StandardPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Standard;\n  readonly address: Address;\n}\n\nexport interface ContractPrincipal {\n  readonly type: StacksMessageType.Principal;\n  readonly prefix: PostConditionPrincipalID.Contract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\n/**\n * Parses a principal string for either a standard principal or contract principal.\n * @param principalString - String in the format `{address}.{contractName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract\"\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G\"\n */\nexport function parsePrincipalString(\n  principalString: string\n): StandardPrincipal | ContractPrincipal {\n  if (principalString.includes('.')) {\n    const [address, contractName] = principalString.split('.');\n    return createContractPrincipal(address, contractName);\n  } else {\n    return createStandardPrincipal(principalString);\n  }\n}\n\nexport function createStandardPrincipal(addressString: string): StandardPrincipal {\n  const addr = createAddress(addressString);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Standard,\n    address: addr,\n  };\n}\n\nexport function createContractPrincipal(\n  addressString: string,\n  contractName: string\n): ContractPrincipal {\n  const addr = createAddress(addressString);\n  const name = createLPString(contractName);\n  return {\n    type: StacksMessageType.Principal,\n    prefix: PostConditionPrincipalID.Contract,\n    address: addr,\n    contractName: name,\n  };\n}\n\nexport function serializePrincipal(principal: PostConditionPrincipal): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(Buffer.from([principal.prefix]));\n  bufferArray.push(serializeAddress(principal.address));\n  if (principal.prefix === PostConditionPrincipalID.Contract) {\n    bufferArray.push(serializeLPString(principal.contractName));\n  }\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializePrincipal(bufferReader: BufferReader): PostConditionPrincipal {\n  const prefix = bufferReader.readUInt8Enum(PostConditionPrincipalID, _ => {\n    throw new DeserializationError('Unexpected Principal payload type: ${n}');\n  });\n  const address = deserializeAddress(bufferReader);\n  if (prefix === PostConditionPrincipalID.Standard) {\n    return { type: StacksMessageType.Principal, prefix, address } as StandardPrincipal;\n  }\n  const contractName = deserializeLPString(bufferReader);\n  return {\n    type: StacksMessageType.Principal,\n    prefix,\n    address,\n    contractName,\n  } as ContractPrincipal;\n}\n\nexport interface LengthPrefixedString {\n  readonly type: StacksMessageType.LengthPrefixedString;\n  readonly content: string;\n  readonly lengthPrefixBytes: number;\n  readonly maxLengthBytes: number;\n}\n\nexport function createLPString(content: string): LengthPrefixedString;\nexport function createLPString(content: string, lengthPrefixBytes: number): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes: number,\n  maxLengthBytes: number\n): LengthPrefixedString;\nexport function createLPString(\n  content: string,\n  lengthPrefixBytes?: number,\n  maxLengthBytes?: number\n): LengthPrefixedString {\n  const prefixLength = lengthPrefixBytes || 1;\n  const maxLength = maxLengthBytes || MAX_STRING_LENGTH_BYTES;\n  if (exceedsMaxLengthBytes(content, maxLength)) {\n    throw new Error(`String length exceeds maximum bytes ${maxLength.toString()}`);\n  }\n  return {\n    type: StacksMessageType.LengthPrefixedString,\n    content,\n    lengthPrefixBytes: prefixLength,\n    maxLengthBytes: maxLength,\n  };\n}\n\nexport function serializeLPString(lps: LengthPrefixedString) {\n  const bufferArray: BufferArray = new BufferArray();\n  const contentBuffer = Buffer.from(lps.content);\n  const length = contentBuffer.byteLength;\n  bufferArray.appendHexString(intToHexString(length, lps.lengthPrefixBytes));\n  bufferArray.push(contentBuffer);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeLPString(\n  bufferReader: BufferReader,\n  prefixBytes?: number,\n  maxLength?: number\n): LengthPrefixedString {\n  prefixBytes = prefixBytes ? prefixBytes : 1;\n  const length = hexStringToInt(bufferReader.readBuffer(prefixBytes).toString('hex'));\n  const content = bufferReader.readBuffer(length).toString();\n  return createLPString(content, prefixBytes, maxLength ?? 128);\n}\n\nexport function codeBodyString(content: string): LengthPrefixedString {\n  return createLPString(content, 4, 100000);\n}\n\nexport interface MemoString {\n  readonly type: StacksMessageType.MemoString;\n  readonly content: string;\n}\n\nexport function createMemoString(content: string): MemoString {\n  if (content && exceedsMaxLengthBytes(content, MEMO_MAX_LENGTH_BYTES)) {\n    throw new Error(`Memo exceeds maximum length of ${MEMO_MAX_LENGTH_BYTES.toString()} bytes`);\n  }\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport function serializeMemoString(memoString: MemoString): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  const contentBuffer = Buffer.from(memoString.content);\n  const paddedContent = rightPadHexToLength(\n    contentBuffer.toString('hex'),\n    MEMO_MAX_LENGTH_BYTES * 2\n  );\n  bufferArray.push(Buffer.from(paddedContent, 'hex'));\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMemoString(bufferReader: BufferReader): MemoString {\n  const content = bufferReader.readBuffer(MEMO_MAX_LENGTH_BYTES).toString();\n  return { type: StacksMessageType.MemoString, content };\n}\n\nexport interface AssetInfo {\n  readonly type: StacksMessageType.AssetInfo;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n  readonly assetName: LengthPrefixedString;\n}\n\n/**\n * Parse a fully qualified string that identifies the token type.\n * @param id - String in the format `{address}.{contractName}::{assetName}`\n * @example \"SP13N5TE1FBBGRZD1FCM49QDGN32WAXM2E5F8WT2G.example-contract::example-token\"\n */\nexport function parseAssetInfoString(id: string): AssetInfo {\n  const [assetAddress, assetContractName, assetTokenName] = id.split(/\\.|::/);\n  const assetInfo = createAssetInfo(assetAddress, assetContractName, assetTokenName);\n  return assetInfo;\n}\n\nexport function createAssetInfo(\n  addressString: string,\n  contractName: string,\n  assetName: string\n): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: createAddress(addressString),\n    contractName: createLPString(contractName),\n    assetName: createLPString(assetName),\n  };\n}\n\nexport function serializeAssetInfo(info: AssetInfo): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.push(serializeAddress(info.address));\n  bufferArray.push(serializeLPString(info.contractName));\n  bufferArray.push(serializeLPString(info.assetName));\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeAssetInfo(bufferReader: BufferReader): AssetInfo {\n  return {\n    type: StacksMessageType.AssetInfo,\n    address: deserializeAddress(bufferReader),\n    contractName: deserializeLPString(bufferReader),\n    assetName: deserializeLPString(bufferReader),\n  };\n}\n\nexport interface LengthPrefixedList {\n  readonly type: StacksMessageType.LengthPrefixedList;\n  readonly lengthPrefixBytes: number;\n  readonly values: StacksMessage[];\n}\n\nexport function createLPList<T extends StacksMessage>(\n  values: T[],\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  return {\n    type: StacksMessageType.LengthPrefixedList,\n    lengthPrefixBytes: lengthPrefixBytes || 4,\n    values,\n  };\n}\n\nexport function serializeLPList(lpList: LengthPrefixedList): Buffer {\n  const list = lpList.values;\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(intToHexString(list.length, lpList.lengthPrefixBytes));\n  for (let index = 0; index < list.length; index++) {\n    bufferArray.push(serializeStacksMessage(list[index]));\n  }\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeLPList(\n  bufferReader: BufferReader,\n  type: StacksMessageType,\n  lengthPrefixBytes?: number\n): LengthPrefixedList {\n  const length = hexStringToInt(bufferReader.readBuffer(lengthPrefixBytes || 4).toString('hex'));\n  const l: StacksMessage[] = [];\n  for (let index = 0; index < length; index++) {\n    switch (type) {\n      case StacksMessageType.Address:\n        l.push(deserializeAddress(bufferReader));\n        break;\n      case StacksMessageType.LengthPrefixedString:\n        l.push(deserializeLPString(bufferReader));\n        break;\n      case StacksMessageType.MemoString:\n        l.push(deserializeMemoString(bufferReader));\n        break;\n      case StacksMessageType.AssetInfo:\n        l.push(deserializeAssetInfo(bufferReader));\n        break;\n      case StacksMessageType.PostCondition:\n        l.push(deserializePostCondition(bufferReader));\n        break;\n      case StacksMessageType.PublicKey:\n        l.push(deserializePublicKey(bufferReader));\n        break;\n      case StacksMessageType.TransactionAuthField:\n        l.push(deserializeTransactionAuthField(bufferReader));\n        break;\n    }\n  }\n  return createLPList(l, lengthPrefixBytes);\n}\n","import {\n  Address,\n  LengthPrefixedString,\n  createAddress,\n  createLPString,\n  addressToString,\n} from '../../types';\nimport { ClarityType } from '../clarityValue';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (Buffer.byteLength(contractName.content) >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n","import {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseErrorCV,\n  ResponseOkCV,\n  ListCV,\n  TupleCV,\n  StringAsciiCV,\n  StringUtf8CV,\n} from '.';\n\nimport { principalToString } from './types/principalCV';\nimport { CLARITY_INT_SIZE } from '../constants';\n\n/**\n * Type IDs corresponding to each of the Clarity value types as described here:\n * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}\n */\nexport enum ClarityType {\n  Int = 0x00,\n  UInt = 0x01,\n  Buffer = 0x02,\n  BoolTrue = 0x03,\n  BoolFalse = 0x04,\n  PrincipalStandard = 0x05,\n  PrincipalContract = 0x06,\n  ResponseOk = 0x07,\n  ResponseErr = 0x08,\n  OptionalNone = 0x09,\n  OptionalSome = 0x0a,\n  List = 0x0b,\n  Tuple = 0x0c,\n  StringASCII = 0x0d,\n  StringUTF8 = 0x0e,\n}\n\nexport type ClarityValue =\n  | BooleanCV\n  | OptionalCV\n  | BufferCV\n  | IntCV\n  | UIntCV\n  | StandardPrincipalCV\n  | ContractPrincipalCV\n  | ResponseErrorCV\n  | ResponseOkCV\n  | ListCV\n  | TupleCV\n  | StringAsciiCV\n  | StringUtf8CV;\n\nexport function cvToString(val: ClarityValue, encoding: 'tryAscii' | 'hex' = 'hex'): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return 'true';\n    case ClarityType.BoolFalse:\n      return 'false';\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toString();\n    case ClarityType.UInt:\n      return `u${val.value.toString()}`;\n    case ClarityType.Buffer:\n      if (encoding === 'tryAscii') {\n        const str = val.buffer.toString('ascii');\n        if (/[ -~]/.test(str)) {\n          return JSON.stringify(str);\n        }\n      }\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return 'none';\n    case ClarityType.OptionalSome:\n      return `(some ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseErr:\n      return `(err ${cvToString(val.value, encoding)})`;\n    case ClarityType.ResponseOk:\n      return `(ok ${cvToString(val.value, encoding)})`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return `(list ${val.list.map(v => cvToString(v, encoding)).join(' ')})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${cvToString(val.data[key], encoding)})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `\"${val.data}\"`;\n    case ClarityType.StringUTF8:\n      return `u\"${val.data}\"`;\n  }\n}\n\nfunction cvToValue(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n      return true;\n    case ClarityType.BoolFalse:\n      return false;\n    case ClarityType.Int:\n      return val.value.fromTwos(CLARITY_INT_SIZE).toNumber();\n    case ClarityType.UInt:\n      return val.value.toNumber();\n    case ClarityType.Buffer:\n      return `0x${val.buffer.toString('hex')}`;\n    case ClarityType.OptionalNone:\n      return null;\n    case ClarityType.OptionalSome:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseErr:\n      return cvToJSON(val.value);\n    case ClarityType.ResponseOk:\n      return cvToJSON(val.value);\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return principalToString(val);\n    case ClarityType.List:\n      return val.list.map(v => cvToJSON(v));\n    case ClarityType.Tuple:\n      const result: { [key: string]: any } = {};\n      Object.keys(val.data).forEach(key => {\n        result[key] = cvToJSON(val.data[key]);\n      });\n      return result;\n    case ClarityType.StringASCII:\n      return val.data;\n    case ClarityType.StringUTF8:\n      return val.data;\n  }\n}\n\nexport function cvToJSON(val: ClarityValue): any {\n  switch (val.type) {\n    case ClarityType.ResponseErr:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: false };\n    case ClarityType.ResponseOk:\n      return { type: getCVTypeString(val), value: cvToValue(val), success: true };\n    default:\n      return { type: getCVTypeString(val), value: cvToValue(val) };\n  }\n}\n\nexport function getCVTypeString(val: ClarityValue): string {\n  switch (val.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return 'bool';\n    case ClarityType.Int:\n      return 'int';\n    case ClarityType.UInt:\n      return 'uint';\n    case ClarityType.Buffer:\n      return `(buff ${val.buffer.length})`;\n    case ClarityType.OptionalNone:\n      return '(optional none)';\n    case ClarityType.OptionalSome:\n      return `(optional ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseErr:\n      return `(response UnknownType ${getCVTypeString(val.value)})`;\n    case ClarityType.ResponseOk:\n      return `(response ${getCVTypeString(val.value)} UnknownType)`;\n    case ClarityType.PrincipalStandard:\n    case ClarityType.PrincipalContract:\n      return 'principal';\n    case ClarityType.List:\n      return `(list ${val.list.length} ${getCVTypeString(val.list[0])})`;\n    case ClarityType.Tuple:\n      return `(tuple ${Object.keys(val.data)\n        .map(key => `(${key} ${getCVTypeString(val.data[key])})`)\n        .join(' ')})`;\n    case ClarityType.StringASCII:\n      return `(string-ascii ${Buffer.from(val.data, 'ascii').length})`;\n    case ClarityType.StringUTF8:\n      return `(string-utf8 ${Buffer.from(val.data, 'utf8').length})`;\n  }\n}\n","import { ClarityType } from '../clarityValue';\n\ntype BooleanCV = TrueCV | FalseCV;\n\ninterface TrueCV {\n  type: ClarityType.BoolTrue;\n}\n\ninterface FalseCV {\n  type: ClarityType.BoolFalse;\n}\n\nconst trueCV = (): BooleanCV => ({ type: ClarityType.BoolTrue });\nconst falseCV = (): BooleanCV => ({ type: ClarityType.BoolFalse });\n\nexport { BooleanCV, TrueCV, FalseCV, trueCV, falseCV };\n","import BigNum from 'bn.js';\nimport { CLARITY_INT_SIZE } from '../../constants';\nimport { ClarityType } from '../clarityValue';\n\ninterface IntCV {\n  readonly type: ClarityType.Int;\n  readonly value: BigNum;\n}\n\nconst intCV = (value: number | string | Buffer): IntCV => {\n  const bn = new BigNum(value);\n  const twos = bn.toTwos(CLARITY_INT_SIZE);\n\n  if (twos.bitLength() > CLARITY_INT_SIZE) {\n    throw new Error('Cannot construct clarity integer from value greater than INT_SIZE bits');\n  }\n\n  return { type: ClarityType.Int, value: twos };\n};\n\ninterface UIntCV {\n  readonly type: ClarityType.UInt;\n  readonly value: BigNum;\n}\n\nconst uintCV = (value: number | string | Buffer): UIntCV => {\n  const bn = new BigNum(value);\n  const twos = bn.toTwos(CLARITY_INT_SIZE);\n\n  if (twos.isNeg()) {\n    throw new Error('Cannot construct unsigned clarity integer from negative value');\n  } else if (twos.bitLength() > CLARITY_INT_SIZE) {\n    throw new Error('Cannot construct unsigned clarity integer from value greater than 128 bits');\n  }\n\n  return { type: ClarityType.UInt, value: twos };\n};\n\nexport { IntCV, UIntCV, intCV, uintCV };\n","import { ClarityType } from '../clarityValue';\n\ninterface BufferCV {\n  readonly type: ClarityType.Buffer;\n  readonly buffer: Buffer;\n}\n\nconst bufferCV = (buffer: Buffer): BufferCV => {\n  if (buffer.length > 1000000) {\n    throw new Error('Cannot construct clarity buffer that is greater than 1MB');\n  }\n\n  return { type: ClarityType.Buffer, buffer };\n};\n\nconst bufferCVFromString = (str: string): BufferCV => bufferCV(Buffer.from(str));\n\nexport { BufferCV, bufferCV, bufferCVFromString };\n","import { ClarityType, ClarityValue } from '../clarityValue';\n\ntype OptionalCV = NoneCV | SomeCV;\n\ninterface NoneCV {\n  readonly type: ClarityType.OptionalNone;\n}\n\ninterface SomeCV {\n  readonly type: ClarityType.OptionalSome;\n  readonly value: ClarityValue;\n}\n\nconst noneCV = (): OptionalCV => ({ type: ClarityType.OptionalNone });\nconst someCV = (value: ClarityValue): OptionalCV => ({ type: ClarityType.OptionalSome, value });\nconst optionalCVOf = (value?: ClarityValue): OptionalCV => {\n  if (value) {\n    return someCV(value);\n  } else {\n    return noneCV();\n  }\n};\n\nexport { OptionalCV, NoneCV, SomeCV, noneCV, someCV, optionalCVOf };\n","import { ClarityType, ClarityValue } from '../clarityValue';\n\ntype ResponseCV = ResponseErrorCV | ResponseOkCV;\n\ninterface ResponseErrorCV {\n  readonly type: ClarityType.ResponseErr;\n  readonly value: ClarityValue;\n}\n\ninterface ResponseOkCV {\n  readonly type: ClarityType.ResponseOk;\n  readonly value: ClarityValue;\n}\n\nfunction responseErrorCV(value: ClarityValue): ResponseErrorCV {\n  return { type: ClarityType.ResponseErr, value };\n}\n\nfunction responseOkCV(value: ClarityValue): ResponseOkCV {\n  return { type: ClarityType.ResponseOk, value };\n}\n\nexport { ResponseCV, ResponseErrorCV, ResponseOkCV, responseErrorCV, responseOkCV };\n","import { ClarityValue, ClarityType } from '../clarityValue';\n\ninterface ListCV {\n  type: ClarityType.List;\n  list: ClarityValue[];\n}\n\nfunction listCV<T extends ClarityValue>(values: T[]): ListCV {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n","import { ClarityType, ClarityValue } from '../clarityValue';\nimport { isClarityName } from '../../utils';\n\ntype TupleData = { [key: string]: ClarityValue };\n\ninterface TupleCV {\n  type: ClarityType.Tuple;\n  data: TupleData;\n}\n\nfunction tupleCV(data: TupleData): TupleCV {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return { type: ClarityType.Tuple, data };\n}\n\nexport { TupleCV, tupleCV };\n","import { ClarityType } from '../clarityValue';\n\ninterface StringAsciiCV {\n  readonly type: ClarityType.StringASCII;\n  readonly data: string;\n}\n\ninterface StringUtf8CV {\n  readonly type: ClarityType.StringUTF8;\n  readonly data: string;\n}\n\nconst stringAsciiCV = (data: string): StringAsciiCV => {\n  return { type: ClarityType.StringASCII, data };\n};\n\nconst stringUtf8CV = (data: string): StringUtf8CV => {\n  return { type: ClarityType.StringUTF8, data };\n};\n\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringAsciiCV(data);\n  }\n};\n\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\n","import { serializeAddress, serializeLPString, createLPString } from '../types';\nimport {\n  BooleanCV,\n  OptionalCV,\n  BufferCV,\n  IntCV,\n  UIntCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  ResponseCV,\n  ListCV,\n  TupleCV,\n  ClarityType,\n  ClarityValue,\n} from '.';\nimport { BufferArray } from '../utils';\nimport { SerializationError } from '../errors';\nimport { StringAsciiCV, StringUtf8CV } from './types/stringCV';\n\nfunction bufferWithTypeID(typeId: ClarityType, buffer: Buffer): Buffer {\n  const id = Buffer.from([typeId]);\n  return Buffer.concat([id, buffer]);\n}\n\nfunction serializeBoolCV(value: BooleanCV): Buffer {\n  return Buffer.from([value.type]);\n}\n\nfunction serializeOptionalCV(cv: OptionalCV): Buffer {\n  if (cv.type === ClarityType.OptionalNone) {\n    return Buffer.from([cv.type]);\n  } else {\n    return bufferWithTypeID(cv.type, serializeCV(cv.value));\n  }\n}\n\nfunction serializeBufferCV(cv: BufferCV): Buffer {\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.buffer.length, 0);\n  return bufferWithTypeID(cv.type, Buffer.concat([length, cv.buffer]));\n}\n\nfunction serializeIntCV(cv: IntCV | UIntCV): Buffer {\n  const buffer = cv.value.toArrayLike(Buffer, 'be', 16);\n  return bufferWithTypeID(cv.type, buffer);\n}\n\nfunction serializeStandardPrincipalCV(cv: StandardPrincipalCV): Buffer {\n  return bufferWithTypeID(cv.type, serializeAddress(cv.address));\n}\n\nfunction serializeContractPrincipalCV(cv: ContractPrincipalCV): Buffer {\n  return bufferWithTypeID(\n    cv.type,\n    Buffer.concat([serializeAddress(cv.address), serializeLPString(cv.contractName)])\n  );\n}\n\nfunction serializeResponseCV(cv: ResponseCV) {\n  return bufferWithTypeID(cv.type, serializeCV(cv.value));\n}\n\nfunction serializeListCV(cv: ListCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(cv.list.length, 0);\n  buffers.push(length);\n\n  for (const value of cv.list) {\n    const serializedValue = serializeCV(value);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeTupleCV(cv: TupleCV) {\n  const buffers = new BufferArray();\n\n  const length = Buffer.alloc(4);\n  length.writeUInt32BE(Object.keys(cv.data).length, 0);\n  buffers.push(length);\n\n  const lexicographicOrder = Object.keys(cv.data).sort((a, b) => {\n    const bufA = Buffer.from(a);\n    const bufB = Buffer.from(b);\n    return bufA.compare(bufB);\n  });\n\n  for (const key of lexicographicOrder) {\n    const nameWithLength = createLPString(key);\n    buffers.push(serializeLPString(nameWithLength));\n\n    const serializedValue = serializeCV(cv.data[key]);\n    buffers.push(serializedValue);\n  }\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringCV(cv: StringAsciiCV | StringUtf8CV, encoding: 'ascii' | 'utf8') {\n  const buffers = new BufferArray();\n\n  const str = Buffer.from(cv.data, encoding);\n  const len = Buffer.alloc(4);\n  len.writeUInt32BE(str.length, 0);\n\n  buffers.push(len);\n  buffers.push(str);\n\n  return bufferWithTypeID(cv.type, buffers.concatBuffer());\n}\n\nfunction serializeStringAsciiCV(cv: StringAsciiCV) {\n  return serializeStringCV(cv, 'ascii');\n}\n\nfunction serializeStringUtf8CV(cv: StringUtf8CV) {\n  return serializeStringCV(cv, 'utf8');\n}\n\nexport function serializeCV(value: ClarityValue): Buffer {\n  switch (value.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return serializeBoolCV(value);\n    case ClarityType.OptionalNone:\n    case ClarityType.OptionalSome:\n      return serializeOptionalCV(value);\n    case ClarityType.Buffer:\n      return serializeBufferCV(value);\n    case ClarityType.Int:\n    case ClarityType.UInt:\n      return serializeIntCV(value);\n    case ClarityType.PrincipalStandard:\n      return serializeStandardPrincipalCV(value);\n    case ClarityType.PrincipalContract:\n      return serializeContractPrincipalCV(value);\n    case ClarityType.ResponseOk:\n    case ClarityType.ResponseErr:\n      return serializeResponseCV(value);\n    case ClarityType.List:\n      return serializeListCV(value);\n    case ClarityType.Tuple:\n      return serializeTupleCV(value);\n    case ClarityType.StringASCII:\n      return serializeStringAsciiCV(value);\n    case ClarityType.StringUTF8:\n      return serializeStringUtf8CV(value);\n    default:\n      throw new SerializationError('Unable to serialize. Invalid Clarity Value.');\n  }\n}\n","import { SmartBuffer, SmartBufferOptions } from 'smart-buffer';\n\nfunction createEnumChecker<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue }\n): (value: number) => value is TEnumValue {\n  // Create a set of valid enum number values.\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set<number>(enumValues);\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\n\n/**\n * Type guard to check if a given value is a valid enum value.\n * @param enumVariable - Literal `enum` type.\n * @param value - A value to check against the enum's values.\n * @example\n * ```ts\n * enum Color {\n *   Purple = 3,\n *   Orange = 5\n * }\n * const val: number = 3;\n * if (isEnum(Color, val)) {\n *   // `val` is known as enum type `Color`, e.g.:\n *   const colorVal: Color = val;\n * }\n * ```\n */\nexport function isEnum<T extends string, TEnumValue extends number>(\n  enumVariable: { [key in T]: TEnumValue },\n  value: number\n): value is TEnumValue {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\n\nexport class BufferReader {\n  smartBuffer: SmartBuffer;\n\n  static fromBuffer(buffer: Buffer): BufferReader {\n    return new BufferReader({ buff: buffer });\n  }\n\n  constructor(options?: SmartBufferOptions | Buffer) {\n    if (Buffer.isBuffer(options)) {\n      this.smartBuffer = new SmartBuffer({ buff: options });\n    } else {\n      this.smartBuffer = new SmartBuffer(options);\n    }\n  }\n\n  readBuffer(length: number): Buffer {\n    return this.smartBuffer.readBuffer(length);\n  }\n\n  readUInt32BE(offset?: number): number {\n    return this.smartBuffer.readUInt32BE(offset);\n  }\n\n  readUInt8(): number {\n    return this.smartBuffer.readUInt8();\n  }\n\n  readUInt16BE(): number {\n    return this.smartBuffer.readUInt16BE();\n  }\n\n  readBigUIntLE(length: number): bigint {\n    const buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n    const hex = buffer.toString();\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUIntBE(length: number): bigint {\n    const buffer = this.smartBuffer.readBuffer(length);\n    const hex = buffer.toString('hex');\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUInt64BE(): bigint {\n    return this.smartBuffer.readBigUInt64BE();\n  }\n\n  readString(arg?: number | BufferEncoding, encoding?: BufferEncoding): string {\n    return this.smartBuffer.readString(arg, encoding);\n  }\n\n  get readOffset(): number {\n    return this.smartBuffer.readOffset;\n  }\n\n  set readOffset(val: number) {\n    this.smartBuffer.readOffset = val;\n  }\n\n  get internalBuffer(): Buffer {\n    return this.smartBuffer.internalBuffer;\n  }\n\n  readUInt8Enum<T extends string, TEnumValue extends number>(\n    enumVariable: { [key in T]: TEnumValue },\n    invalidEnumErrorFormatter: (val: number) => Error\n  ): TEnumValue {\n    const num = this.smartBuffer.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    } else {\n      throw invalidEnumErrorFormatter(num);\n    }\n  }\n}\n","import {\n  ClarityType,\n  ClarityValue,\n  intCV,\n  uintCV,\n  bufferCV,\n  trueCV,\n  falseCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCVFromAddress,\n  responseOkCV,\n  responseErrorCV,\n  noneCV,\n  someCV,\n  listCV,\n  tupleCV,\n} from '.';\nimport { BufferReader } from '../bufferReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\n\nexport default function deserializeCV(buffer: BufferReader | Buffer): ClarityValue {\n  const bufferReader = Buffer.isBuffer(buffer) ? new BufferReader(buffer) : buffer;\n  const type = bufferReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bufferReader.readBuffer(16));\n\n    case ClarityType.UInt:\n      return uintCV(bufferReader.readBuffer(16));\n\n    case ClarityType.Buffer:\n      const bufferLength = bufferReader.readUInt32BE();\n      return bufferCV(bufferReader.readBuffer(bufferLength));\n\n    case ClarityType.BoolTrue:\n      return trueCV();\n\n    case ClarityType.BoolFalse:\n      return falseCV();\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bufferReader);\n      return standardPrincipalCVFromAddress(sAddress);\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bufferReader);\n      const contractName = deserializeLPString(bufferReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName);\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bufferReader));\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bufferReader));\n\n    case ClarityType.OptionalNone:\n      return noneCV();\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bufferReader));\n\n    case ClarityType.List:\n      const listLength = bufferReader.readUInt32BE();\n      const listContents: ClarityValue[] = [];\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bufferReader));\n      }\n      return listCV(listContents);\n\n    case ClarityType.Tuple:\n      const tupleLength = bufferReader.readUInt32BE();\n      const tupleContents: { [key: string]: ClarityValue } = {};\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bufferReader).content;\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n        tupleContents[clarityName] = deserializeCV(bufferReader);\n      }\n      return tupleCV(tupleContents);\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bufferReader.readUInt32BE();\n      const asciiStr = bufferReader.readBuffer(asciiStrLen).toString('ascii');\n      return stringAsciiCV(asciiStr);\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bufferReader.readUInt32BE();\n      const utf8Str = bufferReader.readBuffer(utf8StrLen).toString('utf8');\n      return stringUtf8CV(utf8Str);\n\n    default:\n      throw new DeserializationError(\n        'Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.'\n      );\n  }\n}\n","import { sha256, sha512 } from 'sha.js';\nimport { ClarityValue, serializeCV } from './clarity';\nimport RIPEMD160 from 'ripemd160-min';\nimport randombytes from 'randombytes';\nimport { deserializeCV } from './clarity';\nimport fetch from 'cross-fetch';\nimport { c32addressDecode } from 'c32check';\nimport lodashCloneDeep from 'lodash/cloneDeep';\n\nexport { randombytes as randomBytes };\n\nexport class BufferArray {\n  _value: Buffer[] = [];\n  get value() {\n    return this._value;\n  }\n  appendHexString(hexString: string) {\n    this.value.push(Buffer.from(hexString, 'hex'));\n  }\n\n  push(buffer: Buffer) {\n    return this._value.push(buffer);\n  }\n  appendByte(octet: number) {\n    if (!Number.isInteger(octet) || octet < 0 || octet > 255) {\n      throw new Error(`Value ${octet} is not a valid byte`);\n    }\n    this.value.push(Buffer.from([octet]));\n  }\n\n  concatBuffer(): Buffer {\n    return Buffer.concat(this.value);\n  }\n}\n\nexport const leftPadHex = (hexString: string): string =>\n  hexString.length % 2 == 0 ? hexString : `0${hexString}`;\n\nexport const leftPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padStart(length, '0');\n\nexport const rightPadHexToLength = (hexString: string, length: number): string =>\n  hexString.padEnd(length, '0');\n\nexport const intToHexString = (integer: number, lengthBytes = 8): string =>\n  integer.toString(16).padStart(lengthBytes * 2, '0');\n\nexport const hexStringToInt = (hexString: string): number => parseInt(hexString, 16);\n\nexport const exceedsMaxLengthBytes = (string: string, maxLengthBytes: number): boolean =>\n  string ? Buffer.from(string).length > maxLengthBytes : false;\n\nexport function cloneDeep<T>(obj: T): T {\n  return lodashCloneDeep(obj);\n}\n\nexport function omit<T, K extends keyof any>(obj: T, prop: K): Omit<T, K> {\n  const clone = cloneDeep(obj);\n  // @ts-expect-error\n  delete clone[prop];\n  return clone;\n}\n\nexport class sha512_256 extends sha512 {\n  constructor() {\n    super();\n    // set the \"SHA-512/256\" initialization vector\n    // see https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\n    Object.assign(this, {\n      _ah: 0x22312194,\n      _al: 0xfc2bf72c,\n      _bh: 0x9f555fa3,\n      _bl: 0xc84c64c2,\n      _ch: 0x2393b86b,\n      _cl: 0x6f53b151,\n      _dh: 0x96387719,\n      _dl: 0x5940eabd,\n      _eh: 0x96283ee2,\n      _el: 0xa88effe3,\n      _fh: 0xbe5e1e25,\n      _fl: 0x53863992,\n      _gh: 0x2b0199fc,\n      _gl: 0x2c85b8aa,\n      _hh: 0x0eb72ddc,\n      _hl: 0x81c52ca2,\n    });\n  }\n  digest(): Buffer;\n  digest(encoding: import('crypto').HexBase64Latin1Encoding): string;\n  digest(encoding?: import('crypto').HexBase64Latin1Encoding): string | Buffer {\n    // \"SHA-512/256\" truncates the digest to 32 bytes\n    const buff = super.digest().slice(0, 32);\n    return encoding ? buff.toString(encoding) : buff;\n  }\n}\n\nexport const txidFromData = (data: Buffer): string => new sha512_256().update(data).digest('hex');\n\nexport const hash160 = (input: Buffer): Buffer => {\n  const sha256Result = new sha256().update(input).digest();\n  return Buffer.from(new RIPEMD160().update(sha256Result).digest());\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// single-sig address (p2pkh)\nexport const hashP2PKH = (input: Buffer): string => {\n  return hash160(input).toString('hex');\n};\n\n// Internally, the Stacks blockchain encodes address the same as Bitcoin\n// multi-sig address (p2sh)\nexport const hashP2SH = (numSigs: number, pubKeys: Buffer[]): string => {\n  if (numSigs > 15 || pubKeys.length > 15) {\n    throw Error('P2SH multisig address can only contain up to 15 public keys');\n  }\n\n  // construct P2SH script\n  const bufferArray = new BufferArray();\n  // OP_n\n  bufferArray.appendByte(80 + numSigs);\n  // public keys prepended by their length\n  pubKeys.forEach(pubKey => {\n    bufferArray.appendByte(pubKey.length);\n    bufferArray.push(pubKey);\n  });\n  // OP_m\n  bufferArray.appendByte(80 + pubKeys.length);\n  // OP_CHECKMULTISIG\n  bufferArray.appendByte(174);\n\n  const redeemScript = bufferArray.concatBuffer();\n  const redeemScriptHash = hash160(redeemScript);\n  return redeemScriptHash.toString('hex');\n};\n\nexport function isClarityName(name: string) {\n  const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;\n  return regex.test(name) && name.length < 128;\n}\n\n/** @ignore */\nexport async function fetchPrivate(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const defaultFetchOpts: RequestInit = {\n    referrer: 'no-referrer',\n    referrerPolicy: 'no-referrer',\n  };\n  const fetchOpts = Object.assign(defaultFetchOpts, init);\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n/**\n * Converts a clarity value to a hex encoded string with `0x` prefix\n * @param {ClarityValue} cv  - the clarity value to convert\n */\nexport function cvToHex(cv: ClarityValue) {\n  const serialized = serializeCV(cv);\n  return `0x${serialized.toString('hex')}`;\n}\n\n/**\n * Converts a hex encoded string to a clarity value\n * @param {string} hex - the hex encoded string with or without `0x` prefix\n */\nexport function hexToCV(hex: string) {\n  const hexWithoutPrefix = hex.startsWith('0x') ? hex.slice(2) : hex;\n  const bufferCV = Buffer.from(hexWithoutPrefix, 'hex');\n  return deserializeCV(bufferCV);\n}\n/**\n * Read only function response object\n *\n * @param {Boolean} okay - the status of the response\n * @param {string} result - serialized hex clarity value\n */\n\nexport interface ReadOnlyFunctionResponse {\n  okay: boolean;\n  result: string;\n}\n\n/**\n * Converts the response of a read-only function call into its Clarity Value\n * @param param\n */\nexport const parseReadOnlyResponse = ({ result }: ReadOnlyFunctionResponse): ClarityValue => {\n  return hexToCV(result);\n};\n\nexport const validateStacksAddress = (stacksAddress: string): boolean => {\n  try {\n    c32addressDecode(stacksAddress);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n","import {\n  AuthType,\n  AddressHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  MultiSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { BufferArray, txidFromData, leftPadHex, cloneDeep } from './utils';\n\nimport {\n  addressFromPublicKeys,\n  deserializeLPList,\n  createLPList,\n  serializeLPList,\n  createEmptyAddress,\n} from './types';\n\nimport {\n  StacksPublicKey,\n  StacksPrivateKey,\n  createStacksPublicKey,\n  isCompressed,\n  signWithKey,\n  getPublicKey,\n  serializePublicKey,\n  deserializePublicKey,\n  publicKeyFromSignature,\n} from './keys';\n\nimport BigNum from 'bn.js';\nimport { BufferReader } from './bufferReader';\nimport { SerializationError, DeserializationError, SigningError } from './errors';\n\nabstract class Deserializable {\n  abstract serialize(): Buffer;\n  abstract deserialize(bufferReader: BufferReader): void;\n  static deserialize<T extends Deserializable>(this: new () => T, bufferReader: BufferReader): T {\n    const message = new this();\n    message.deserialize(bufferReader);\n    return message;\n  }\n}\n\nexport interface MessageSignature {\n  readonly type: StacksMessageType.MessageSignature;\n  data: string;\n}\n\nexport function createMessageSignature(signature: string): MessageSignature {\n  const length = Buffer.from(signature, 'hex').byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature,\n  };\n}\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: Buffer.alloc(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, 0x00).toString('hex'),\n  };\n}\n\nexport function serializeMessageSignature(messageSignature: MessageSignature): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendHexString(messageSignature.data);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeMessageSignature(bufferReader: BufferReader): MessageSignature {\n  return createMessageSignature(\n    bufferReader.readBuffer(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES).toString('hex')\n  );\n}\n\nenum AuthFieldType {\n  PublicKey = 0x00,\n  Signature = 0x02,\n}\n\nexport type TransactionAuthFieldContents = StacksPublicKey | MessageSignature;\n\nexport interface TransactionAuthField {\n  type: StacksMessageType.TransactionAuthField;\n  contents: TransactionAuthFieldContents;\n}\n\nexport function createTransactionAuthField(\n  contents: TransactionAuthFieldContents\n): TransactionAuthField {\n  return {\n    type: StacksMessageType.TransactionAuthField,\n    contents,\n  };\n}\n\nexport function serializeTransactionAuthField(field: TransactionAuthField): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n\n  switch (field.contents.type) {\n    case StacksMessageType.PublicKey:\n      bufferArray.appendByte(AuthFieldType.PublicKey);\n      bufferArray.push(serializePublicKey(field.contents));\n      break;\n    case StacksMessageType.MessageSignature:\n      bufferArray.appendByte(AuthFieldType.Signature);\n      bufferArray.push(serializeMessageSignature(field.contents));\n      break;\n  }\n\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeTransactionAuthField(bufferReader: BufferReader): TransactionAuthField {\n  const authFieldType = bufferReader.readUInt8Enum(AuthFieldType, n => {\n    throw new DeserializationError(`Could not read ${n} as AuthFieldType`);\n  });\n\n  switch (authFieldType) {\n    case AuthFieldType.PublicKey:\n      return createTransactionAuthField(deserializePublicKey(bufferReader));\n    case AuthFieldType.Signature:\n      return createTransactionAuthField(deserializeMessageSignature(bufferReader));\n    default:\n      throw new Error(`Unknown auth field type: ${JSON.stringify(authFieldType)}`);\n  }\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: BigNum;\n  fee: BigNum;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: BigNum,\n  fee: BigNum\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: BigNum,\n  fee: BigNum\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(condition: SpendingCondition): condition is SingleSigSpendingCondition {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingCondition): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = new BigNum(0);\n  cloned.fee = new BigNum(0);\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return cloned;\n}\n\nexport function serializeSingleSigSpendingCondition(condition: SingleSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n  bufferArray.appendByte(condition.keyEncoding);\n  bufferArray.push(serializeMessageSignature(condition.signature));\n  return bufferArray.concatBuffer();\n}\n\nexport function serializeMultiSigSpendingCondition(condition: MultiSigSpendingCondition): Buffer {\n  const bufferArray: BufferArray = new BufferArray();\n  bufferArray.appendByte(condition.hashMode);\n  bufferArray.appendHexString(condition.signer);\n  bufferArray.push(condition.nonce.toArrayLike(Buffer, 'be', 8));\n  bufferArray.push(condition.fee.toArrayLike(Buffer, 'be', 8));\n\n  const fields = createLPList(condition.fields);\n  bufferArray.push(serializeLPList(fields));\n\n  const numSigs = Buffer.alloc(2);\n  numSigs.writeUInt16BE(condition.signaturesRequired, 0);\n  bufferArray.push(numSigs);\n  return bufferArray.concatBuffer();\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bufferReader: BufferReader\n): SingleSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const keyEncoding = bufferReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  const signature = deserializeMessageSignature(bufferReader);\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bufferReader: BufferReader\n): MultiSigSpendingCondition {\n  const signer = bufferReader.readBuffer(20).toString('hex');\n  const nonce = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n  const fee = new BigNum(bufferReader.readBuffer(8).toString('hex'), 16);\n\n  const fields = deserializeLPList(bufferReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  const signaturesRequired = bufferReader.readUInt16BE();\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingCondition): Buffer {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  } else {\n    return serializeMultiSigSpendingCondition(condition);\n  }\n}\n\nexport function deserializeSpendingCondition(bufferReader: BufferReader): SpendingCondition {\n  const hashMode = bufferReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bufferReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bufferReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    Buffer.from([authType]).toString('hex') +\n    fee.toArrayLike(Buffer, 'be', 8).toString('hex') +\n    nonce.toArrayLike(Buffer, 'be', 8).toString('hex');\n\n  if (Buffer.from(sigHash, 'hex').byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  if (Buffer.from(sigHash, 'hex').byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(Buffer.from(sigHash, 'hex'));\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const publicKeyEncoding = isCompressed(publicKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKeyEncoding, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: BigNum,\n  nonce: BigNum,\n  // @ts-ignore\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(publicKeyFromSignature(sigHashPreSign, signature));\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, PubKeyEncoding.Compressed, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    new BigNum(0),\n    new BigNum(0)\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(condition: SpendingCondition, initialSigHash: string, authType: AuthType): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    // TODO: verify multisig\n    return '';\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingCondition,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // TODO: verify pub key\n\n  return nextSigHash;\n}\n\nexport class Authorization extends Deserializable {\n  authType?: AuthType;\n  spendingCondition?: SpendingCondition;\n  sponsorSpendingCondition?: SpendingCondition;\n\n  constructor(\n    authType?: AuthType,\n    spendingConditions?: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    super();\n    this.authType = authType;\n    this.spendingCondition = spendingConditions;\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  intoInitialSighashAuth(): Authorization {\n    if (this.spendingCondition) {\n      switch (this.authType) {\n        case AuthType.Standard:\n          return new Authorization(AuthType.Standard, clearCondition(this.spendingCondition));\n        case AuthType.Sponsored:\n          return new Authorization(\n            AuthType.Sponsored,\n            clearCondition(this.spendingCondition),\n            newInitialSigHash()\n          );\n        default:\n          throw new SigningError('Unexpected authorization type for signing');\n      }\n    }\n\n    throw new Error('Authorization missing SpendingCondition');\n  }\n\n  setFee(amount: BigNum) {\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition!.fee = amount;\n        break;\n      case AuthType.Sponsored:\n        this.sponsorSpendingCondition!.fee = amount;\n        break;\n    }\n  }\n\n  getFee() {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return this.spendingCondition!.fee;\n      case AuthType.Sponsored:\n        return this.sponsorSpendingCondition!.fee;\n      default:\n        return 0;\n    }\n  }\n\n  setNonce(nonce: BigNum) {\n    this.spendingCondition!.nonce = nonce;\n  }\n\n  setSponsorNonce(nonce: BigNum) {\n    this.sponsorSpendingCondition!.nonce = nonce;\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    this.sponsorSpendingCondition = sponsorSpendingCondition;\n  }\n\n  verifyOrigin(initialSigHash: string): string {\n    switch (this.authType) {\n      case AuthType.Standard:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      case AuthType.Sponsored:\n        return verify(this.spendingCondition!, initialSigHash, AuthType.Standard);\n      default:\n        throw new SigningError('Invalid origin auth type');\n    }\n  }\n\n  serialize(): Buffer {\n    const bufferArray: BufferArray = new BufferArray();\n    if (this.authType === undefined) {\n      throw new SerializationError('\"authType\" is undefined');\n    }\n    bufferArray.appendByte(this.authType);\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        break;\n      case AuthType.Sponsored:\n        if (this.spendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        if (this.sponsorSpendingCondition === undefined) {\n          throw new SerializationError('\"spendingCondition\" is undefined');\n        }\n        bufferArray.push(serializeSpendingCondition(this.spendingCondition));\n        bufferArray.push(serializeSpendingCondition(this.sponsorSpendingCondition));\n        break;\n      default:\n        throw new SerializationError(\n          `Unexpected transaction AuthType while serializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n\n    return bufferArray.concatBuffer();\n  }\n\n  deserialize(bufferReader: BufferReader) {\n    this.authType = bufferReader.readUInt8Enum(AuthType, n => {\n      throw new DeserializationError(`Could not parse ${n} as AuthType`);\n    });\n\n    switch (this.authType) {\n      case AuthType.Standard:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      case AuthType.Sponsored:\n        this.spendingCondition = deserializeSpendingCondition(bufferReader);\n        this.sponsorSpendingCondition = deserializeSpendingCondition(bufferReader);\n        break;\n      // throw new DeserializationError('Not yet implemented: deserializing sponsored transactions');\n      default:\n        throw new DeserializationError(\n          `Unexpected transaction AuthType while deserializing: ${JSON.stringify(this.authType)}`\n        );\n    }\n  }\n}\n\nexport class StandardAuthorization extends Authorization {\n  constructor(spendingCondition: SpendingCondition) {\n    super(AuthType.Standard, spendingCondition);\n  }\n}\n\nexport class SponsoredAuthorization extends Authorization {\n  constructor(\n    originSpendingCondition: SpendingCondition,\n    sponsorSpendingCondition?: SpendingCondition\n  ) {\n    let sponsorSC = sponsorSpendingCondition;\n    if (!sponsorSC) {\n      sponsorSC = createSingleSigSpendingCondition(\n        AddressHashMode.SerializeP2PKH,\n        '0'.repeat(66),\n        new BigNum(0),\n        new BigNum(0)\n      );\n    }\n    super(AuthType.Sponsored, originSpendingCondition, sponsorSC);\n  }\n}\n","import {\n  DEFAULT_CHAIN_ID,\n  TransactionVersion,\n  PayloadType,\n  AnchorMode,\n  PostConditionMode,\n  AuthType,\n  StacksMessageType,\n  ChainID,\n} from './constants';\n\nimport {\n  Authorization,\n  SpendingCondition,\n  nextSignature,\n  isSingleSig,\n  SingleSigSpendingCondition,\n  createTransactionAuthField,\n  createMessageSignature,\n} from './authorization';\n\nimport { BufferArray, txidFromData, cloneDeep } from './utils';\n\nimport { Payload, serializePayload, deserializePayload } from './payload';\n\nimport { LengthPrefixedList, serializeLPList, deserializeLPList, createLPList } from './types';\n\nimport { StacksPrivateKey, StacksPublicKey } from './keys';\n\nimport { BufferReader } from './bufferReader';\n\nimport BigNum from 'bn.js';\nimport { SerializationError, SigningError } from './errors';\n\nexport class StacksTransaction {\n  version: TransactionVersion;\n  chainId: ChainID;\n  auth: Authorization;\n  anchorMode: AnchorMode;\n  payload: Payload;\n  postConditionMode: PostConditionMode;\n  postConditions: LengthPrefixedList;\n\n  constructor(\n    version: TransactionVersion,\n    auth: Authorization,\n    payload: Payload,\n    postConditions?: LengthPrefixedList,\n    postConditionMode?: PostConditionMode,\n    anchorMode?: AnchorMode,\n    chainId?: ChainID\n  ) {\n    this.version = version;\n    this.auth = auth;\n    this.payload = payload;\n    this.chainId = chainId ?? DEFAULT_CHAIN_ID;\n    this.postConditionMode = postConditionMode ?? PostConditionMode.Deny;\n    this.postConditions = postConditions ?? createLPList([]);\n\n    if (anchorMode) {\n      this.anchorMode = anchorMode;\n    } else {\n      switch (payload.payloadType) {\n        case PayloadType.Coinbase:\n        case PayloadType.PoisonMicroblock: {\n          this.anchorMode = AnchorMode.OnChainOnly;\n          break;\n        }\n        case PayloadType.ContractCall:\n        case PayloadType.SmartContract:\n        case PayloadType.TokenTransfer: {\n          this.anchorMode = AnchorMode.Any;\n          break;\n        }\n      }\n    }\n  }\n\n  signBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  verifyBegin() {\n    const tx = cloneDeep(this);\n    tx.auth = tx.auth.intoInitialSighashAuth();\n    return tx.txid();\n  }\n\n  createTxWithSignature(signature: string | Buffer): StacksTransaction {\n    const parsedSig = typeof signature === 'string' ? signature : signature.toString('hex');\n    const tx = cloneDeep(this);\n    if (!tx.auth.spendingCondition) {\n      throw new Error('Cannot set signature on transaction without spending condition');\n    }\n    (tx.auth.spendingCondition as SingleSigSpendingCondition).signature = createMessageSignature(\n      parsedSig\n    );\n    return tx;\n  }\n\n  verifyOrigin(): string {\n    return this.auth.verifyOrigin(this.verifyBegin());\n  }\n\n  signNextOrigin(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.spendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(this.auth.spendingCondition, sigHash, AuthType.Standard, privateKey);\n  }\n\n  signNextSponsor(sigHash: string, privateKey: StacksPrivateKey): string {\n    if (this.auth.sponsorSpendingCondition === undefined) {\n      throw new Error('\"auth.spendingCondition\" is undefined');\n    }\n    if (this.auth.authType === undefined) {\n      throw new Error('\"auth.authType\" is undefined');\n    }\n    return this.signAndAppend(\n      this.auth.sponsorSpendingCondition,\n      sigHash,\n      AuthType.Sponsored,\n      privateKey\n    );\n  }\n\n  appendPubkey(publicKey: StacksPublicKey) {\n    const cond = this.auth.spendingCondition;\n    if (cond && !isSingleSig(cond)) {\n      cond.fields.push(createTransactionAuthField(publicKey));\n    } else {\n      throw new Error(`Can't append public key to a singlesig condition`);\n    }\n  }\n\n  signAndAppend(\n    condition: SpendingCondition,\n    curSigHash: string,\n    authType: AuthType,\n    privateKey: StacksPrivateKey\n  ): string {\n    const { nextSig, nextSigHash } = nextSignature(\n      curSigHash,\n      authType,\n      condition.fee,\n      condition.nonce,\n      privateKey\n    );\n    if (isSingleSig(condition)) {\n      condition.signature = nextSig;\n    } else {\n      condition.fields.push(createTransactionAuthField(nextSig));\n    }\n\n    return nextSigHash;\n  }\n\n  txid(): string {\n    const serialized = this.serialize();\n    return txidFromData(serialized);\n  }\n\n  setSponsor(sponsorSpendingCondition: SpendingCondition) {\n    if (this.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot sponsor sign a non-sponsored transaction');\n    }\n\n    this.auth.setSponsor(sponsorSpendingCondition);\n  }\n\n  /**\n   * Set the total fee to be paid for this transaction\n   *\n   * @param {BigNum} fee - the fee amount in microstacks\n   */\n  setFee(amount: BigNum) {\n    this.auth.setFee(amount);\n  }\n\n  /**\n   * Set the transaction nonce\n   *\n   * @param {BigNum} nonce - the nonce value\n   */\n  setNonce(nonce: BigNum) {\n    this.auth.setNonce(nonce);\n  }\n\n  /**\n   * Set the transaction sponsor nonce\n   *\n   * @param {BigNum} nonce - the sponsor nonce value\n   */\n  setSponsorNonce(nonce: BigNum) {\n    this.auth.setSponsorNonce(nonce);\n  }\n\n  serialize(): Buffer {\n    if (this.version === undefined) {\n      throw new SerializationError('\"version\" is undefined');\n    }\n    if (this.chainId === undefined) {\n      throw new SerializationError('\"chainId\" is undefined');\n    }\n    if (this.auth === undefined) {\n      throw new SerializationError('\"auth\" is undefined');\n    }\n    if (this.anchorMode === undefined) {\n      throw new SerializationError('\"anchorMode\" is undefined');\n    }\n    if (this.payload === undefined) {\n      throw new SerializationError('\"payload\" is undefined');\n    }\n\n    const bufferArray: BufferArray = new BufferArray();\n\n    bufferArray.appendByte(this.version);\n    const chainIdBuffer = Buffer.alloc(4);\n    chainIdBuffer.writeUInt32BE(this.chainId, 0);\n    bufferArray.push(chainIdBuffer);\n    bufferArray.push(this.auth.serialize());\n    bufferArray.appendByte(this.anchorMode);\n    bufferArray.appendByte(this.postConditionMode);\n    bufferArray.push(serializeLPList(this.postConditions));\n    bufferArray.push(serializePayload(this.payload));\n\n    return bufferArray.concatBuffer();\n  }\n}\n\nexport function deserializeTransaction(bufferReader: BufferReader) {\n  const version = bufferReader.readUInt8Enum(TransactionVersion, n => {\n    throw new Error(`Could not parse ${n} as TransactionVersion`);\n  });\n  const chainId = bufferReader.readUInt32BE();\n  const auth = Authorization.deserialize(bufferReader);\n  const anchorMode = bufferReader.readUInt8Enum(AnchorMode, n => {\n    throw new Error(`Could not parse ${n} as AnchorMode`);\n  });\n  const postConditionMode = bufferReader.readUInt8Enum(PostConditionMode, n => {\n    throw new Error(`Could not parse ${n} as PostConditionMode`);\n  });\n  const postConditions = deserializeLPList(bufferReader, StacksMessageType.PostCondition);\n  const payload = deserializePayload(bufferReader);\n\n  return new StacksTransaction(\n    version,\n    auth,\n    payload,\n    postConditions,\n    postConditionMode,\n    anchorMode,\n    chainId\n  );\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksPrivateKey, StacksPublicKey } from './keys';\nimport { isSingleSig } from './authorization';\nimport { cloneDeep } from './utils';\nimport { SpendingCondition } from './authorization';\nimport { AuthType } from './constants';\nimport { SigningError } from './errors';\n\nexport class TransactionSigner {\n  transaction: StacksTransaction;\n  sigHash: string;\n  originDone: boolean;\n  checkOversign: boolean;\n  checkOverlap: boolean;\n\n  constructor(transaction: StacksTransaction) {\n    this.transaction = transaction;\n    this.sigHash = transaction.signBegin();\n    this.originDone = false;\n    this.checkOversign = true;\n    this.checkOverlap = true;\n  }\n\n  static createSponsorSigner(transaction: StacksTransaction, spendingCondition: SpendingCondition) {\n    if (transaction.auth.authType != AuthType.Sponsored) {\n      throw new SigningError('Cannot add sponsor to non-sponsored transaction');\n    }\n\n    const tx: StacksTransaction = cloneDeep(transaction);\n    tx.setSponsor(spendingCondition);\n    const originSigHash = tx.verifyOrigin();\n    const signer = new this(tx);\n    signer.originDone = true;\n    signer.sigHash = originSigHash;\n    signer.checkOversign = true;\n    signer.checkOverlap = true;\n    return signer;\n  }\n\n  signOrigin(privateKey: StacksPrivateKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw new SigningError('Cannot sign origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    if (!isSingleSig(this.transaction.auth.spendingCondition)) {\n      const spendingCondition = this.transaction.auth.spendingCondition;\n      if (\n        this.checkOversign &&\n        spendingCondition.fields.length >= spendingCondition.signaturesRequired\n      ) {\n        throw new Error('Origin would have too many signatures');\n      }\n    }\n\n    const nextSighash = this.transaction.signNextOrigin(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n  }\n\n  appendOrigin(publicKey: StacksPublicKey) {\n    if (this.checkOverlap && this.originDone) {\n      throw Error('Cannot append public key to origin after sponsor key');\n    }\n\n    if (this.transaction.auth === undefined) {\n      throw new Error('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.spendingCondition === undefined) {\n      throw new Error('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    this.transaction.appendPubkey(publicKey);\n  }\n\n  signSponsor(privateKey: StacksPrivateKey) {\n    if (this.transaction.auth === undefined) {\n      throw new SigningError('\"transaction.auth\" is undefined');\n    }\n    if (this.transaction.auth.sponsorSpendingCondition === undefined) {\n      throw new SigningError('\"transaction.auth.spendingCondition\" is undefined');\n    }\n\n    const nextSighash = this.transaction.signNextSponsor(this.sigHash, privateKey);\n    this.sigHash = nextSighash;\n    this.originDone = true;\n  }\n\n  getTxInComplete(): StacksTransaction {\n    return cloneDeep(this.transaction);\n  }\n\n  resume(transaction: StacksTransaction) {\n    this.transaction = cloneDeep(transaction);\n    this.sigHash = transaction.signBegin();\n  }\n}\n","import { cloneDeep } from './utils';\nimport {\n  ClarityValue,\n  uintCV,\n  intCV,\n  contractPrincipalCV,\n  standardPrincipalCV,\n  noneCV,\n  bufferCV,\n  falseCV,\n  trueCV,\n  ClarityType,\n  getCVTypeString,\n  bufferCVFromString,\n} from './clarity';\nimport { ContractCallPayload } from './payload';\nimport { NotImplementedError } from './errors';\nimport { stringAsciiCV, stringUtf8CV } from './clarity/types/stringCV';\n\n// From https://github.com/blockstack/stacks-blockchain-sidecar/blob/master/src/event-stream/contract-abi.ts\n\nexport type ClarityAbiTypeBuffer = { buffer: { length: number } };\nexport type ClarityAbiTypeStringAscii = { 'string-ascii': { length: number } };\nexport type ClarityAbiTypeStringUtf8 = { 'string-utf8': { length: number } };\nexport type ClarityAbiTypeResponse = { response: { ok: ClarityAbiType; error: ClarityAbiType } };\nexport type ClarityAbiTypeOptional = { optional: ClarityAbiType };\nexport type ClarityAbiTypeTuple = { tuple: { name: string; type: ClarityAbiType }[] };\nexport type ClarityAbiTypeList = { list: { type: ClarityAbiType; length: number } };\n\nexport type ClarityAbiTypeUInt128 = 'uint128';\nexport type ClarityAbiTypeInt128 = 'int128';\nexport type ClarityAbiTypeBool = 'bool';\nexport type ClarityAbiTypePrincipal = 'principal';\nexport type ClarityAbiTypeTraitReference = 'trait_reference';\nexport type ClarityAbiTypeNone = 'none';\n\nexport type ClarityAbiTypePrimitive =\n  | ClarityAbiTypeUInt128\n  | ClarityAbiTypeInt128\n  | ClarityAbiTypeBool\n  | ClarityAbiTypePrincipal\n  | ClarityAbiTypeTraitReference\n  | ClarityAbiTypeNone;\n\nexport type ClarityAbiType =\n  | ClarityAbiTypePrimitive\n  | ClarityAbiTypeBuffer\n  | ClarityAbiTypeResponse\n  | ClarityAbiTypeOptional\n  | ClarityAbiTypeTuple\n  | ClarityAbiTypeList\n  | ClarityAbiTypeStringAscii\n  | ClarityAbiTypeStringUtf8\n  | ClarityAbiTypeTraitReference;\n\nexport enum ClarityAbiTypeId {\n  ClarityAbiTypeUInt128 = 1,\n  ClarityAbiTypeInt128 = 2,\n  ClarityAbiTypeBool = 3,\n  ClarityAbiTypePrincipal = 4,\n  ClarityAbiTypeNone = 5,\n  ClarityAbiTypeBuffer = 6,\n  ClarityAbiTypeResponse = 7,\n  ClarityAbiTypeOptional = 8,\n  ClarityAbiTypeTuple = 9,\n  ClarityAbiTypeList = 10,\n  ClarityAbiTypeStringAscii = 11,\n  ClarityAbiTypeStringUtf8 = 12,\n  ClarityAbiTypeTraitReference = 13,\n}\n\nexport const isClarityAbiPrimitive = (val: ClarityAbiType): val is ClarityAbiTypePrimitive =>\n  typeof val === 'string';\nexport const isClarityAbiBuffer = (val: ClarityAbiType): val is ClarityAbiTypeBuffer =>\n  (val as ClarityAbiTypeBuffer).buffer !== undefined;\nexport const isClarityAbiStringAscii = (val: ClarityAbiType): val is ClarityAbiTypeStringAscii =>\n  (val as ClarityAbiTypeStringAscii)['string-ascii'] !== undefined;\nexport const isClarityAbiStringUtf8 = (val: ClarityAbiType): val is ClarityAbiTypeStringUtf8 =>\n  (val as ClarityAbiTypeStringUtf8)['string-utf8'] !== undefined;\nexport const isClarityAbiResponse = (val: ClarityAbiType): val is ClarityAbiTypeResponse =>\n  (val as ClarityAbiTypeResponse).response !== undefined;\nexport const isClarityAbiOptional = (val: ClarityAbiType): val is ClarityAbiTypeOptional =>\n  (val as ClarityAbiTypeOptional).optional !== undefined;\nexport const isClarityAbiTuple = (val: ClarityAbiType): val is ClarityAbiTypeTuple =>\n  (val as ClarityAbiTypeTuple).tuple !== undefined;\nexport const isClarityAbiList = (val: ClarityAbiType): val is ClarityAbiTypeList =>\n  (val as ClarityAbiTypeList).list !== undefined;\n\nexport type ClarityAbiTypeUnion =\n  | { id: ClarityAbiTypeId.ClarityAbiTypeUInt128; type: ClarityAbiTypeUInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeInt128; type: ClarityAbiTypeInt128 }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBool; type: ClarityAbiTypeBool }\n  | { id: ClarityAbiTypeId.ClarityAbiTypePrincipal; type: ClarityAbiTypePrincipal }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference; type: ClarityAbiTypeTraitReference }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeNone; type: ClarityAbiTypeNone }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeBuffer; type: ClarityAbiTypeBuffer }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeResponse; type: ClarityAbiTypeResponse }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeOptional; type: ClarityAbiTypeOptional }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeTuple; type: ClarityAbiTypeTuple }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeList; type: ClarityAbiTypeList }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii; type: ClarityAbiTypeStringAscii }\n  | { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8; type: ClarityAbiTypeStringUtf8 };\n\nexport function getTypeUnion(val: ClarityAbiType): ClarityAbiTypeUnion {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'uint128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeUInt128, type: val };\n    } else if (val === 'int128') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeInt128, type: val };\n    } else if (val === 'bool') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeBool, type: val };\n    } else if (val === 'principal') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypePrincipal, type: val };\n    } else if (val === 'trait_reference') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeTraitReference, type: val };\n    } else if (val === 'none') {\n      return { id: ClarityAbiTypeId.ClarityAbiTypeNone, type: val };\n    } else {\n      throw new Error(`Unexpected Clarity ABI type primitive: ${JSON.stringify(val)}`);\n    }\n  } else if (isClarityAbiBuffer(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeBuffer, type: val };\n  } else if (isClarityAbiResponse(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeResponse, type: val };\n  } else if (isClarityAbiOptional(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeOptional, type: val };\n  } else if (isClarityAbiTuple(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeTuple, type: val };\n  } else if (isClarityAbiList(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeList, type: val };\n  } else if (isClarityAbiStringAscii(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringAscii, type: val };\n  } else if (isClarityAbiStringUtf8(val)) {\n    return { id: ClarityAbiTypeId.ClarityAbiTypeStringUtf8, type: val };\n  } else {\n    throw new Error(`Unexpected Clarity ABI type: ${JSON.stringify(val)}`);\n  }\n}\n\nfunction encodeClarityValue(type: ClarityAbiType, val: string): ClarityValue;\nfunction encodeClarityValue(type: ClarityAbiTypeUnion, val: string): ClarityValue;\nfunction encodeClarityValue(\n  input: ClarityAbiTypeUnion | ClarityAbiType,\n  val: string\n): ClarityValue {\n  let union: ClarityAbiTypeUnion;\n  if ((input as ClarityAbiTypeUnion).id !== undefined) {\n    union = input as ClarityAbiTypeUnion;\n  } else {\n    union = getTypeUnion(input as ClarityAbiType);\n  }\n  switch (union.id) {\n    case ClarityAbiTypeId.ClarityAbiTypeUInt128:\n      return uintCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeInt128:\n      return intCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeBool:\n      if (val === 'false' || val === '0') return falseCV();\n      else if (val === 'true' || val === '1') return trueCV();\n      else throw new Error(`Unexpected Clarity bool value: ${JSON.stringify(val)}`);\n    case ClarityAbiTypeId.ClarityAbiTypePrincipal:\n      if (val.includes('.')) {\n        const [addr, name] = val.split('.');\n        return contractPrincipalCV(addr, name);\n      } else {\n        return standardPrincipalCV(val);\n      }\n    case ClarityAbiTypeId.ClarityAbiTypeTraitReference:\n      const [addr, name] = val.split('.');\n      return contractPrincipalCV(addr, name);\n    case ClarityAbiTypeId.ClarityAbiTypeNone:\n      return noneCV();\n    case ClarityAbiTypeId.ClarityAbiTypeBuffer:\n      return bufferCV(Buffer.from(val, 'utf8'));\n    case ClarityAbiTypeId.ClarityAbiTypeStringAscii:\n      return stringAsciiCV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeStringUtf8:\n      return stringUtf8CV(val);\n    case ClarityAbiTypeId.ClarityAbiTypeResponse:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeOptional:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeTuple:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    case ClarityAbiTypeId.ClarityAbiTypeList:\n      throw new NotImplementedError(`Unsupported encoding for Clarity type: ${union.id}`);\n    default:\n      throw new Error(`Unexpected Clarity type ID: ${JSON.stringify(union)}`);\n  }\n}\nexport { encodeClarityValue };\n\nexport function getTypeString(val: ClarityAbiType): string {\n  if (isClarityAbiPrimitive(val)) {\n    if (val === 'int128') {\n      return 'int';\n    } else if (val === 'uint128') {\n      return 'uint';\n    }\n    return val;\n  } else if (isClarityAbiBuffer(val)) {\n    return `(buff ${val.buffer.length})`;\n  } else if (isClarityAbiStringAscii(val)) {\n    return `(string-ascii ${val['string-ascii'].length})`;\n  } else if (isClarityAbiStringUtf8(val)) {\n    return `(string-utf8 ${val['string-utf8'].length})`;\n  } else if (isClarityAbiResponse(val)) {\n    return `(response ${getTypeString(val.response.ok)} ${getTypeString(val.response.error)})`;\n  } else if (isClarityAbiOptional(val)) {\n    return `(optional ${getTypeString(val.optional)})`;\n  } else if (isClarityAbiTuple(val)) {\n    return `(tuple ${val.tuple.map(t => `(${t.name} ${getTypeString(t.type)})`).join(' ')})`;\n  } else if (isClarityAbiList(val)) {\n    return `(list ${val.list.length} ${getTypeString(val.list.type)})`;\n  } else {\n    throw new Error(`Type string unsupported for Clarity type: ${JSON.stringify(val)}`);\n  }\n}\n\nexport interface ClarityAbiFunction {\n  name: string;\n  access: 'private' | 'public' | 'read_only';\n  args: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  outputs: {\n    type: ClarityAbiType;\n  };\n}\n\nexport function abiFunctionToString(func: ClarityAbiFunction): string {\n  const access = func.access === 'read_only' ? 'read-only' : func.access;\n  return `(define-${access} (${func.name} ${func.args\n    .map(arg => `(${arg.name} ${getTypeString(arg.type)})`)\n    .join(' ')}))`;\n}\n\nexport interface ClarityAbiVariable {\n  name: string;\n  access: 'variable' | 'constant';\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbiMap {\n  name: string;\n  key: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n  value: {\n    name: string;\n    type: ClarityAbiType;\n  }[];\n}\n\nexport interface ClarityAbiTypeFungibleToken {\n  name: string;\n}\n\nexport interface ClarityAbiTypeNonFungibleToken {\n  name: string;\n  type: ClarityAbiType;\n}\n\nexport interface ClarityAbi {\n  functions: ClarityAbiFunction[];\n  variables: ClarityAbiVariable[];\n  maps: ClarityAbiMap[];\n  fungible_tokens: ClarityAbiTypeFungibleToken[];\n  non_fungible_tokens: ClarityAbiTypeNonFungibleToken[];\n}\n\nfunction matchType(cv: ClarityValue, abiType: ClarityAbiType): boolean {\n  const union = getTypeUnion(abiType);\n\n  switch (cv.type) {\n    case ClarityType.BoolTrue:\n    case ClarityType.BoolFalse:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeBool;\n    case ClarityType.Int:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeInt128;\n    case ClarityType.UInt:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypeUInt128;\n    case ClarityType.Buffer:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeBuffer &&\n        union.type.buffer.length >= cv.buffer.length\n      );\n    case ClarityType.StringASCII:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringAscii &&\n        union.type['string-ascii'].length >= cv.data.length\n      );\n    case ClarityType.StringUTF8:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeStringUtf8 &&\n        union.type['string-utf8'].length >= cv.data.length\n      );\n    case ClarityType.OptionalNone:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeNone ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional\n      );\n    case ClarityType.OptionalSome:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeOptional &&\n        matchType(cv.value, union.type.optional)\n      );\n    case ClarityType.ResponseErr:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.error)\n      );\n    case ClarityType.ResponseOk:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypeResponse &&\n        matchType(cv.value, union.type.response.ok)\n      );\n    case ClarityType.PrincipalContract:\n      return (\n        union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal ||\n        union.id === ClarityAbiTypeId.ClarityAbiTypeTraitReference\n      );\n    case ClarityType.PrincipalStandard:\n      return union.id === ClarityAbiTypeId.ClarityAbiTypePrincipal;\n    case ClarityType.List:\n      return (\n        union.id == ClarityAbiTypeId.ClarityAbiTypeList &&\n        union.type.list.length === cv.list.length &&\n        cv.list.every(val => matchType(val, union.type.list.type))\n      );\n    case ClarityType.Tuple:\n      if (union.id == ClarityAbiTypeId.ClarityAbiTypeTuple) {\n        const tuple = cloneDeep(cv.data);\n        for (let i = 0; i < union.type.tuple.length; i++) {\n          const abiTupleEntry = union.type.tuple[i];\n          const key = abiTupleEntry.name;\n          const val = tuple[key];\n\n          // if key exists in cv tuple, check if its type matches the abi\n          // return false if key doesn't exist\n          if (val) {\n            if (!matchType(val, abiTupleEntry.type)) {\n              return false;\n            }\n            delete tuple[key];\n          } else {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/**\n * Validates a contract-call payload with a contract ABI\n *\n * @param {ContractCallPayload} payload - a contract-call payload\n * @param {ClarityAbi} abi - a contract ABI\n *\n * @returns {boolean} true if the payloads functionArgs type check against those in the ABI\n */\nexport function validateContractCall(payload: ContractCallPayload, abi: ClarityAbi): boolean {\n  const filtered = abi.functions.filter(fn => fn.name === payload.functionName.content);\n  if (filtered.length === 1) {\n    const abiFunc = filtered[0];\n    const abiArgs = abiFunc.args;\n\n    if (payload.functionArgs.length !== abiArgs.length) {\n      throw new Error(\n        `Clarity function expects ${abiArgs.length} argument(s) but received ${payload.functionArgs.length}`\n      );\n    }\n\n    for (let i = 0; i < payload.functionArgs.length; i++) {\n      const payloadArg = payload.functionArgs[i];\n      const abiArg = abiArgs[i];\n\n      if (!matchType(payloadArg, abiArg.type)) {\n        const argNum = i + 1;\n        throw new Error(\n          `Clarity function \\`${\n            payload.functionName.content\n          }\\` expects argument ${argNum} to be of type ${getTypeString(\n            abiArg.type\n          )}, not ${getCVTypeString(payloadArg)}`\n        );\n      }\n    }\n\n    return true;\n  } else if (filtered.length === 0) {\n    throw new Error(`ABI doesn't contain a function with the name ${payload.functionName.content}`);\n  } else {\n    throw new Error(\n      `Malformed ABI. Contains multiple functions with the name ${payload.functionName.content}`\n    );\n  }\n}\n\n/**\n * Convert string input to Clarity value based on contract ABI data. Only handles Clarity\n * primitives and buffers. Responses, optionals, tuples and lists are not supported.\n *\n * @param {string} input - string to be parsed into Clarity value\n * @param {ClarityAbiType} type - the contract function argument object\n *\n * @returns {ClarityValue} returns a Clarity value\n */\nexport function parseToCV(input: string, type: ClarityAbiType): ClarityValue {\n  const typeString = getTypeString(type);\n  if (isClarityAbiPrimitive(type)) {\n    if (type === 'uint128') {\n      return uintCV(input);\n    } else if (type === 'int128') {\n      return intCV(input);\n    } else if (type === 'bool') {\n      if (input.toLowerCase() === 'true') {\n        return trueCV();\n      } else if (input.toLowerCase() === 'false') {\n        return falseCV();\n      } else {\n        throw new Error(`Invalid bool value: ${input}`);\n      }\n    } else if (type === 'principal') {\n      if (input.includes('.')) {\n        const [address, contractName] = input.split('.');\n        return contractPrincipalCV(address, contractName);\n      } else {\n        return standardPrincipalCV(input);\n      }\n    } else {\n      throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n    }\n  } else if (isClarityAbiBuffer(type)) {\n    const inputLength = Buffer.from(input).byteLength;\n    if (inputLength > type.buffer.length) {\n      throw new Error(`Input exceeds specified buffer length limit of ${type.buffer.length}`);\n    }\n    return bufferCVFromString(input);\n  } else if (isClarityAbiResponse(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiOptional(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiTuple(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else if (isClarityAbiList(type)) {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  } else {\n    throw new Error(`Contract function contains unsupported Clarity ABI type: ${typeString}`);\n  }\n}\n","import { StacksTransaction } from './transaction';\n\nimport { StacksNetwork, StacksMainnet, StacksTestnet } from '@stacks/network';\n\nimport {\n  createTokenTransferPayload,\n  createSmartContractPayload,\n  createContractCallPayload,\n} from './payload';\n\nimport {\n  StandardAuthorization,\n  SponsoredAuthorization,\n  createSingleSigSpendingCondition,\n  createMultiSigSpendingCondition,\n} from './authorization';\n\nimport {\n  publicKeyToString,\n  createStacksPrivateKey,\n  getPublicKey,\n  publicKeyToAddress,\n  pubKeyfromPrivKey,\n  publicKeyFromBuffer,\n} from './keys';\n\nimport { TransactionSigner } from './signer';\n\nimport {\n  PostCondition,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n  createSTXPostCondition,\n  createFungiblePostCondition,\n  createNonFungiblePostCondition,\n} from './postcondition';\n\nimport {\n  AddressHashMode,\n  AddressVersion,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  PostConditionMode,\n  PayloadType,\n  AnchorMode,\n  TransactionVersion,\n  TxRejectedReason,\n  SingleSigHashMode,\n} from './constants';\n\nimport { AssetInfo, createLPList, createStandardPrincipal, createContractPrincipal } from './types';\n\nimport { cvToHex, parseReadOnlyResponse, omit } from './utils';\n\nimport { fetchPrivate } from '@stacks/common';\n\nimport BigNum from 'bn.js';\nimport { ClarityValue, PrincipalCV } from './clarity';\nimport { validateContractCall, ClarityAbi } from './contract-abi';\nimport { c32address } from 'c32check';\n\n/**\n * Lookup the nonce for an address from a core node\n *\n * @param {string} address - the c32check address to look up\n * @param {StacksNetwork} network - the Stacks network to look up address on\n *\n * @return a promise that resolves to an integer\n */\nexport async function getNonce(address: string, network?: StacksNetwork): Promise<BigNum> {\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getAccountApiUrl(address)\n    : defaultNetwork.getAccountApiUrl(address);\n\n  const response = await fetchPrivate(url);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching nonce. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const result = (await response.json()) as { nonce: string };\n  return new BigNum(result.nonce);\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a token transfer\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateTransfer(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.TokenTransfer) {\n    throw new Error(\n      `Transaction fee estimation only possible with ${\n        PayloadType[PayloadType.TokenTransfer]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating transaction fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\nexport type TxBroadcastResultOk = string;\nexport type TxBroadcastResultRejected = {\n  error: string;\n  reason: TxRejectedReason;\n  reason_data: any;\n  txid: string;\n};\nexport type TxBroadcastResult = TxBroadcastResultOk | TxBroadcastResultRejected;\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to broadcast\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastTransaction(\n  transaction: StacksTransaction,\n  network: StacksNetwork\n): Promise<TxBroadcastResult> {\n  const rawTx = transaction.serialize();\n  const url = network.getBroadcastApiUrl();\n\n  return broadcastRawTransaction(rawTx, url);\n}\n\n/**\n * Broadcast the signed transaction to a core node\n *\n * @param {Buffer} rawTx - the raw serialized transaction buffer to broadcast\n * @param {string} url - the broadcast endpoint URL\n *\n * @returns {Promise} that resolves to a response if the operation succeeds\n */\nexport async function broadcastRawTransaction(\n  rawTx: Buffer,\n  url: string\n): Promise<TxBroadcastResult> {\n  const requestHeaders = {\n    'Content-Type': 'application/octet-stream',\n  };\n\n  const options = {\n    method: 'POST',\n    headers: requestHeaders,\n    body: rawTx,\n  };\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    try {\n      return (await response.json()) as TxBroadcastResult;\n    } catch (e) {\n      throw Error(`Failed to broadcast transaction: ${(e as Error).message}`);\n    }\n  }\n\n  const text = await response.text();\n  try {\n    return JSON.parse(text) as TxBroadcastResult;\n  } catch (e) {\n    return text;\n  }\n}\n\n/**\n * Fetch a contract's ABI\n *\n * @param {string} address - the contracts address\n * @param {string} contractName - the contracts name\n * @param {StacksNetwork} network - the Stacks network to broadcast transaction to\n *\n * @returns {Promise} that resolves to a ClarityAbi if the operation succeeds\n */\nexport async function getAbi(\n  address: string,\n  contractName: string,\n  network: StacksNetwork\n): Promise<ClarityAbi> {\n  const options = {\n    method: 'GET',\n  };\n\n  const url = network.getAbiApiUrl(address, contractName);\n\n  const response = await fetchPrivate(url, options);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error fetching contract ABI for contract \"${contractName}\" at address ${address}. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return JSON.parse(await response.text()) as ClarityAbi;\n}\n\nexport interface MultiSigOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys?: string[];\n}\n\n/**\n * STX token transfer transaction options\n *\n * @param  {String|PrincipalCV} recipientAddress - the c32check address of the recipient or a\n *                                                  principal clarity value\n * @param  {BigNum} amount - number of tokens to transfer in microstacks\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {String} memo - an arbitrary string to include with the transaction, must be less than\n *                          34 bytes\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface TokenTransferOptions {\n  recipient: string | PrincipalCV;\n  amount: BigNum;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  memo?: string;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\nexport interface UnsignedTokenTransferOptions extends TokenTransferOptions {\n  publicKey: string;\n}\n\nexport interface SignedTokenTransferOptions extends TokenTransferOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigTokenTransferOptions extends TokenTransferOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Generates an unsigned Stacks token transfer transaction\n *\n * Returns a Stacks token transfer transaction.\n *\n * @param  {UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {Promis<StacksTransaction>}\n */\nexport async function makeUnsignedSTXTokenTransfer(\n  txOptions: UnsignedTokenTransferOptions | UnsignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    memo: '',\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createTokenTransferPayload(options.recipient, options.amount, options.memo);\n\n  let authorization = null;\n  let spendingCondition = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    defaultOptions.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateTransfer(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a signed Stacks token transfer transaction\n *\n * Returns a signed Stacks token transfer transaction.\n *\n * @param  {SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions} txOptions - an options object for the token transfer\n *\n * @return {StacksTransaction}\n */\nexport async function makeSTXTokenTransfer(\n  txOptions: SignedTokenTransferOptions | SignedMultiSigTokenTransferOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedSTXTokenTransfer({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedSTXTokenTransfer(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Contract deploy transaction options\n *\n * @param  {String} contractName - the contract name\n * @param  {String} codeBody - the code body string\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractDeployOptions {\n  contractName: string;\n  codeBody: string;\n  senderKey: string;\n  fee?: BigNum;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  sponsored?: boolean;\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract deploy\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractDeploy(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.SmartContract) {\n    throw new Error(\n      `Contract deploy fee estimation only possible with ${\n        PayloadType[PayloadType.SmartContract]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract deploy fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract deploy fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates a Clarity smart contract deploy transaction\n *\n * @param  {ContractDeployOptions} txOptions - an options object for the contract deploy\n *\n * Returns a signed Stacks smart contract deploy transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractDeploy(\n  txOptions: ContractDeployOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createSmartContractPayload(options.contractName, options.codeBody);\n\n  const addressHashMode = AddressHashMode.SerializeP2PKH;\n  const privKey = createStacksPrivateKey(options.senderKey);\n  const pubKey = getPublicKey(privKey);\n\n  let authorization = null;\n\n  const spendingCondition = createSingleSigSpendingCondition(\n    addressHashMode,\n    publicKeyToString(pubKey),\n    options.nonce,\n    options.fee\n  );\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractDeploy(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = publicKeyToAddress(addressVersion, pubKey);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  if (options.senderKey) {\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n  }\n\n  return transaction;\n}\n\n/**\n * Contract function call transaction options\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {String} senderKey - hex string sender private key used to sign transaction\n * @param  {BigNum} fee - transaction fee in microstacks\n * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {anchorMode} anchorMode - identify how the the transaction should be mined\n * @param  {PostConditionMode} postConditionMode - whether post conditions must fully cover all\n *                                                 transferred assets\n * @param  {PostCondition[]} postConditions - an array of post conditions to add to the\n *                                                  transaction\n * @param  {Boolean} sponsored - true if another account is sponsoring the transaction fees\n */\nexport interface ContractCallOptions {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  fee?: BigNum;\n  feeEstimateApiUrl?: string;\n  nonce?: BigNum;\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  postConditionMode?: PostConditionMode;\n  postConditions?: PostCondition[];\n  validateWithAbi?: boolean | ClarityAbi;\n  sponsored?: boolean;\n}\n\nexport interface UnsignedContractCallOptions extends ContractCallOptions {\n  publicKey: string;\n}\n\nexport interface SignedContractCallOptions extends ContractCallOptions {\n  senderKey: string;\n}\n\nexport interface UnsignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n}\n\nexport interface SignedMultiSigContractCallOptions extends ContractCallOptions {\n  numSignatures: number;\n  publicKeys: string[];\n  signerKeys: string[];\n}\n\n/**\n * Estimate the total transaction fee in microstacks for a contract function call\n *\n * @param {StacksTransaction} transaction - the token transfer transaction to estimate fees for\n * @param {StacksNetwork} network - the Stacks network to estimate transaction for\n *\n * @return a promise that resolves to number of microstacks per byte\n */\nexport async function estimateContractFunctionCall(\n  transaction: StacksTransaction,\n  network?: StacksNetwork\n): Promise<BigNum> {\n  if (transaction.payload.payloadType !== PayloadType.ContractCall) {\n    throw new Error(\n      `Contract call fee estimation only possible with ${\n        PayloadType[PayloadType.ContractCall]\n      } transactions. Invoked with: ${PayloadType[transaction.payload.payloadType]}`\n    );\n  }\n\n  const requestHeaders = {\n    Accept: 'application/text',\n  };\n\n  const fetchOptions = {\n    method: 'GET',\n    headers: requestHeaders,\n  };\n\n  // Place holder estimate until contract call fee estimation is fully implemented on Stacks\n  // blockchain core\n  const defaultNetwork = new StacksMainnet();\n  const url = network\n    ? network.getTransferFeeEstimateApiUrl()\n    : defaultNetwork.getTransferFeeEstimateApiUrl();\n\n  const response = await fetchPrivate(url, fetchOptions);\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error estimating contract call fee. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n  const feeRateResult = await response.text();\n  const txBytes = new BigNum(transaction.serialize().byteLength);\n  const feeRate = new BigNum(feeRateResult);\n  return feeRate.mul(txBytes);\n}\n\n/**\n * Generates an unsigned Clarity smart contract function call transaction\n *\n * @param {UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions} txOptions - an options object for the contract call\n *\n * @returns {Promise<StacksTransaction>}\n */\nexport async function makeUnsignedContractCall(\n  txOptions: UnsignedContractCallOptions | UnsignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    nonce: new BigNum(0),\n    network: new StacksMainnet(),\n    anchorMode: AnchorMode.Any,\n    postConditionMode: PostConditionMode.Deny,\n    sponsored: false,\n  };\n\n  const options = Object.assign(defaultOptions, txOptions);\n\n  const payload = createContractCallPayload(\n    options.contractAddress,\n    options.contractName,\n    options.functionName,\n    options.functionArgs\n  );\n\n  if (options?.validateWithAbi) {\n    let abi: ClarityAbi;\n    if (typeof options.validateWithAbi === 'boolean') {\n      if (options?.network) {\n        abi = await getAbi(options.contractAddress, options.contractName, options.network);\n      } else {\n        throw new Error('Network option must be provided in order to validate with ABI');\n      }\n    } else {\n      abi = options.validateWithAbi;\n    }\n\n    validateContractCall(payload, abi);\n  }\n\n  let spendingCondition = null;\n  let authorization = null;\n\n  if ('publicKey' in options) {\n    // single-sig\n    spendingCondition = createSingleSigSpendingCondition(\n      AddressHashMode.SerializeP2PKH,\n      options.publicKey,\n      options.nonce,\n      options.fee\n    );\n  } else {\n    // multi-sig\n    spendingCondition = createMultiSigSpendingCondition(\n      AddressHashMode.SerializeP2SH,\n      options.numSignatures,\n      options.publicKeys,\n      options.nonce,\n      options.fee\n    );\n  }\n\n  if (options.sponsored) {\n    authorization = new SponsoredAuthorization(spendingCondition);\n  } else {\n    authorization = new StandardAuthorization(spendingCondition);\n  }\n\n  const postConditions: PostCondition[] = [];\n  if (options.postConditions && options.postConditions.length > 0) {\n    options.postConditions.forEach(postCondition => {\n      postConditions.push(postCondition);\n    });\n  }\n\n  const lpPostConditions = createLPList(postConditions);\n  const transaction = new StacksTransaction(\n    options.network.version,\n    authorization,\n    payload,\n    lpPostConditions,\n    options.postConditionMode,\n    options.anchorMode,\n    options.network.chainId\n  );\n\n  if (!txOptions.fee) {\n    const txFee = await estimateContractFunctionCall(transaction, options.network);\n    transaction.setFee(txFee);\n  }\n\n  if (!txOptions.nonce) {\n    const addressVersion =\n      options.network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n    const senderAddress = c32address(addressVersion, transaction.auth.spendingCondition!.signer);\n    const txNonce = await getNonce(senderAddress, options.network);\n    transaction.setNonce(txNonce);\n  }\n\n  return transaction;\n}\n\n/**\n * Generates a Clarity smart contract function call transaction\n *\n * @param  {SignedContractCallOptions | SignedMultiSigContractCallOptions} txOptions - an options object for the contract function call\n *\n * Returns a signed Stacks smart contract function call transaction.\n *\n * @return {StacksTransaction}\n */\nexport async function makeContractCall(\n  txOptions: SignedContractCallOptions | SignedMultiSigContractCallOptions\n): Promise<StacksTransaction> {\n  if ('senderKey' in txOptions) {\n    const publicKey = publicKeyToString(getPublicKey(createStacksPrivateKey(txOptions.senderKey)));\n    const options = omit(txOptions, 'senderKey');\n    const transaction = await makeUnsignedContractCall({ publicKey, ...options });\n\n    const privKey = createStacksPrivateKey(txOptions.senderKey);\n    const signer = new TransactionSigner(transaction);\n    signer.signOrigin(privKey);\n\n    return transaction;\n  } else {\n    const options = omit(txOptions, 'signerKeys');\n    const transaction = await makeUnsignedContractCall(options);\n\n    const signer = new TransactionSigner(transaction);\n    let pubKeys = txOptions.publicKeys;\n    for (const key of txOptions.signerKeys) {\n      const pubKey = pubKeyfromPrivKey(key);\n      pubKeys = pubKeys.filter(pk => pk !== pubKey.data.toString('hex'));\n      signer.signOrigin(createStacksPrivateKey(key));\n    }\n\n    for (const key of pubKeys) {\n      signer.appendOrigin(publicKeyFromBuffer(Buffer.from(key, 'hex')));\n    }\n\n    return transaction;\n  }\n}\n\n/**\n * Generates a STX post condition with a standard principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeStandardSTXPostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(createStandardPrincipal(address), conditionCode, amount);\n}\n\n/**\n * Generates a STX post condition with a contract principal\n *\n * Returns a STX post condition object\n *\n * @param  {String} address - the c32check address of the contract\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of STX tokens\n *\n * @return {STXPostCondition}\n */\nexport function makeContractSTXPostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum\n): STXPostCondition {\n  return createSTXPostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount\n  );\n}\n\n/**\n * Generates a fungible token post condition with a standard principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeStandardFungiblePostCondition(\n  address: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a fungible token post condition with a contract principal\n *\n * Returns a fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {BigNum} amount - the amount of fungible tokens\n * @param  {AssetInfo} assetInfo - asset info describing the fungible token\n *\n * @return {FungiblePostCondition}\n */\nexport function makeContractFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: FungibleConditionCode,\n  amount: BigNum,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  return createFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    amount,\n    assetInfo\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a standard principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeStandardNonFungiblePostCondition(\n  address: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createStandardPrincipal(address),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Generates a non-fungible token post condition with a contract principal\n *\n * Returns a non-fungible token post condition object\n *\n * @param  {String} address - the c32check address\n * @param  {String} contractName - the name of the contract\n * @param  {FungibleConditionCode} conditionCode - the condition code\n * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token\n * @param  {ClarityValue} assetName - asset name describing the non-fungible token\n *\n * @return {NonFungiblePostCondition}\n */\nexport function makeContractNonFungiblePostCondition(\n  address: string,\n  contractName: string,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  return createNonFungiblePostCondition(\n    createContractPrincipal(address, contractName),\n    conditionCode,\n    assetInfo,\n    assetName\n  );\n}\n\n/**\n * Read only function options\n *\n * @param  {String} contractAddress - the c32check address of the contract\n * @param  {String} contractName - the contract name\n * @param  {String} functionName - name of the function to be called\n * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n * @param  {String} senderAddress - the c32check address of the sender\n */\n\nexport interface ReadOnlyFunctionOptions {\n  contractName: string;\n  contractAddress: string;\n  functionName: string;\n  functionArgs: ClarityValue[];\n  network?: StacksNetwork;\n  senderAddress: string;\n}\n\n/**\n * Calls a read only function from a contract interface\n *\n * @param  {ReadOnlyFunctionOptions} readOnlyFunctionOptions - the options object\n *\n * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.\n *\n * @return {ClarityValue}\n */\nexport async function callReadOnlyFunction(\n  readOnlyFunctionOptions: ReadOnlyFunctionOptions\n): Promise<ClarityValue> {\n  const defaultOptions = {\n    network: new StacksMainnet(),\n  };\n\n  const options = Object.assign(defaultOptions, readOnlyFunctionOptions);\n\n  const {\n    contractName,\n    contractAddress,\n    functionName,\n    functionArgs,\n    network,\n    senderAddress,\n  } = options;\n\n  const url = network.getReadOnlyFunctionCallApiUrl(contractAddress, contractName, functionName);\n\n  const args = functionArgs.map(arg => cvToHex(arg));\n\n  const body = JSON.stringify({\n    sender: senderAddress,\n    arguments: args,\n  });\n\n  const response = await fetchPrivate(url, {\n    method: 'POST',\n    body,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  if (!response.ok) {\n    let msg = '';\n    try {\n      msg = await response.text();\n    } catch (error) {}\n    throw new Error(\n      `Error calling read-only function. Response ${response.status}: ${response.statusText}. Attempted to fetch ${url} and failed with the message: \"${msg}\"`\n    );\n  }\n\n  return response.json().then(responseJson => parseReadOnlyResponse(responseJson));\n}\n\n/**\n * Sponsored transaction options\n *\n * @param  {StacksTransaction} transaction - the origin-signed transaction to sponsor\n * @param  {String} sponsorPrivateKey - the sponsor's private key\n * @param  {BigNum} fee - the transaction fee amount to sponsor\n * @param  {BigNum} sponsorNonce - the nonce of the sponsor account\n * @param  {AddressHashMode} sponsorAddressHashmode - the sponsor address hashmode\n * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for\n */\nexport interface SponsorOptions {\n  transaction: StacksTransaction;\n  sponsorPrivateKey: string;\n  fee?: BigNum;\n  sponsorNonce?: BigNum;\n  sponsorAddressHashmode?: AddressHashMode;\n  network?: StacksNetwork;\n}\n\n/**\n * Constructs and signs a sponsored transaction as the sponsor\n *\n * @param  {SponsorOptions} sponsorOptions - the sponsor options object\n *\n * Returns a signed sponsored transaction.\n *\n * @return {ClarityValue}\n */\nexport async function sponsorTransaction(\n  sponsorOptions: SponsorOptions\n): Promise<StacksTransaction> {\n  const defaultOptions = {\n    fee: new BigNum(0),\n    sponsorNonce: new BigNum(0),\n    sponsorAddressHashmode: AddressHashMode.SerializeP2PKH as SingleSigHashMode,\n  };\n\n  const options = Object.assign(defaultOptions, sponsorOptions);\n  const network =\n    sponsorOptions.network ??\n    (options.transaction.version === TransactionVersion.Mainnet\n      ? new StacksMainnet()\n      : new StacksTestnet());\n  const sponsorPubKey = pubKeyfromPrivKey(options.sponsorPrivateKey);\n\n  if (!sponsorOptions.fee) {\n    let txFee = new BigNum(0);\n    switch (options.transaction.payload.payloadType) {\n      case PayloadType.TokenTransfer:\n        txFee = await estimateTransfer(options.transaction, network);\n        break;\n      case PayloadType.SmartContract:\n        txFee = await estimateContractDeploy(options.transaction, network);\n        break;\n      case PayloadType.ContractCall:\n        txFee = await estimateContractFunctionCall(options.transaction, network);\n        break;\n      default:\n        throw new Error(\n          `Spnsored transactions not supported for transaction type ${\n            PayloadType[options.transaction.payload.payloadType]\n          }`\n        );\n    }\n    options.transaction.setFee(txFee);\n    options.fee = txFee;\n  }\n\n  if (!sponsorOptions.sponsorNonce) {\n    const addressVersion =\n      network.version === TransactionVersion.Mainnet\n        ? AddressVersion.MainnetSingleSig\n        : AddressVersion.TestnetSingleSig;\n\n    const senderAddress = publicKeyToAddress(addressVersion, sponsorPubKey);\n    const sponsorNonce = await getNonce(senderAddress, network);\n    options.sponsorNonce = sponsorNonce;\n  }\n\n  const sponsorSpendingCondition = createSingleSigSpendingCondition(\n    options.sponsorAddressHashmode,\n    publicKeyToString(sponsorPubKey),\n    options.sponsorNonce,\n    options.fee\n  );\n\n  options.transaction.setSponsor(sponsorSpendingCondition);\n\n  const privKey = createStacksPrivateKey(options.sponsorPrivateKey);\n  const signer = TransactionSigner.createSponsorSigner(\n    options.transaction,\n    sponsorSpendingCondition\n  );\n  signer.signSponsor(privKey);\n\n  return options.transaction;\n}\n"],"names":["ChainID","DEFAULT_CHAIN_ID","Mainnet","MAX_STRING_LENGTH_BYTES","CLARITY_INT_SIZE","COINBASE_BUFFER_LENGTH_BYTES","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","COMPRESSED_PUBKEY_LENGTH_BYTES","UNCOMPRESSED_PUBKEY_LENGTH_BYTES","MEMO_MAX_LENGTH_BYTES","DEFAULT_CORE_NODE_API_URL","StacksMessageType","PayloadType","AnchorMode","TransactionVersion","DEFAULT_TRANSACTION_VERSION","PostConditionMode","PostConditionType","AuthType","AddressHashMode","AddressVersion","PubKeyEncoding","FungibleConditionCode","NonFungibleConditionCode","PostConditionPrincipalID","AssetType","TxRejectedReason","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","undefined","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","arg","type","call","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","constructor","displayName","defineIteratorMethods","forEach","method","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","__await","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","then","unwrapped","error","previousPromise","enqueue","callInvokeWithMethodAndArg","async","Promise","iter","next","done","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","info","resultName","nextLoc","toString","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","keys","object","reverse","length","pop","iterable","iteratorMethod","isNaN","i","skipTempReset","prev","charAt","slice","stop","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","Function","getAddressFromPrivateKey","privateKey","transactionVersion","pubKey","pubKeyfromPrivKey","getAddressFromPublicKey","data","publicKey","addrVer","addressHashModeToVersion","SerializeP2PKH","addr","addressFromVersionHash","hashP2PKH","Buffer","from","addrString","addressToString","createStacksPublicKey","PublicKey","publicKeyFromSignature","message","messageSignature","ec","EC","messageBN","keyFromPrivate","getPrivate","parsedSignature","parseRecoverableSignature","recoverPubKey","recoveryParam","encodeCompressed","publicKeyFromBuffer","isCompressed","startsWith","publicKeyToString","serializePublicKey","bufferArray","BufferArray","concatBuffer","privKey","createStacksPrivateKey","keyPair","getPublic","compressed","deserializePublicKey","bufferReader","fieldId","readUInt8","keyLength","concat","readBuffer","makeRandomPrivKey","entropy","options","randomBytes","genKeyPair","signWithKey","input","signature","sign","canonical","coordinateValueBytes","r","leftPadHexToLength","s","intToHexString","recoverableSignatureString","recoverableSignature","createMessageSignature","getSignatureRecoveryParam","recoveryParamHex","substr","hexStringToInt","getPublicKey","privateKeyToString","publicKeyToAddress","version","c32address","hash160","SerializationError","captureStackTrace","DeserializationError","NotImplementedError","SigningError","createSTXPostCondition","principal","conditionCode","amount","parsePrincipalString","PostCondition","conditionType","STX","createFungiblePostCondition","assetInfo","parseAssetInfoString","Fungible","createNonFungiblePostCondition","assetName","NonFungible","serializePostCondition","postCondition","appendByte","serializePrincipal","serializeAssetInfo","serializeCV","toArrayLike","deserializePostCondition","postConditionType","readUInt8Enum","n","deserializePrincipal","BigNum","deserializeAssetInfo","deserializeCV","createTokenTransferPayload","recipient","memo","principalCV","createMemoString","Payload","payloadType","TokenTransfer","createContractCallPayload","contractAddress","contractName","functionName","functionArgs","createAddress","createLPString","ContractCall","createSmartContractPayload","codeBody","codeBodyString","SmartContract","createPoisonPayload","PoisonMicroblock","createCoinbasePayload","coinbaseBuffer","byteLength","Coinbase","serializePayload","payload","serializeStacksMessage","numArgs","alloc","writeUInt32BE","deserializePayload","deserializeMemoString","deserializeAddress","contractCallName","deserializeLPString","numberOfArgs","readUInt32BE","clarityValue","smartContractName","Address","serializeAddress","Principal","LengthPrefixedString","serializeLPString","MemoString","serializeMemoString","AssetInfo","LengthPrefixedList","serializeLPList","TransactionAuthField","serializeTransactionAuthField","MessageSignature","serializeMessageSignature","deserializeStacksMessage","listType","deserializeLPList","deserializeMessageSignature","c32AddressString","addressData","c32addressDecode","createEmptyAddress","MainnetSingleSig","repeat","hash","hashMode","txVersion","Testnet","TestnetSingleSig","JSON","stringify","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","addressFromHashMode","addressFromPublicKeys","numSigs","publicKeys","hashP2SH","map","address","appendHexString","principalString","includes","split","createContractPrincipal","createStandardPrincipal","addressString","prefix","Standard","Contract","_","content","lengthPrefixBytes","maxLengthBytes","prefixLength","maxLength","exceedsMaxLengthBytes","lps","contentBuffer","prefixBytes","memoString","paddedContent","rightPadHexToLength","id","assetAddress","assetContractName","assetTokenName","createAssetInfo","createLPList","lpList","list","index","l","deserializeTransactionAuthField","principalToString","ClarityType","PrincipalStandard","PrincipalContract","contractPrincipalCV","standardPrincipalCV","standardPrincipalCVFromAddress","lengthPrefixedContractName","contractPrincipalCVFromAddress","contractPrincipalCVFromStandard","sp","cvToString","val","encoding","BoolTrue","BoolFalse","Int","fromTwos","UInt","str","buffer","test","OptionalNone","OptionalSome","ResponseErr","ResponseOk","List","v","join","Tuple","StringASCII","StringUTF8","cvToValue","toNumber","cvToJSON","getCVTypeString","success","trueCV","falseCV","intCV","bn","twos","toTwos","bitLength","uintCV","isNeg","bufferCV","bufferCVFromString","noneCV","someCV","responseErrorCV","responseOkCV","listCV","tupleCV","isClarityName","stringAsciiCV","stringUtf8CV","bufferWithTypeID","typeId","serializeBoolCV","serializeOptionalCV","cv","serializeBufferCV","serializeIntCV","serializeStandardPrincipalCV","serializeContractPrincipalCV","serializeResponseCV","serializeListCV","buffers","serializedValue","serializeTupleCV","lexicographicOrder","sort","a","b","bufA","bufB","compare","nameWithLength","serializeStringCV","len","serializeStringAsciiCV","serializeStringUtf8CV","createEnumChecker","enumVariable","enumValues","filter","enumValueSet","Set","has","enumCheckFunctions","Map","isEnum","checker","get","newChecker","set","BufferReader","isBuffer","smartBuffer","SmartBuffer","buff","fromBuffer","offset","readUInt16BE","readBigUIntLE","hex","num","BigInt","readBigUIntBE","readBigUInt64BE","readString","invalidEnumErrorFormatter","readOffset","internalBuffer","bufferLength","sAddress","cAddress","listLength","listContents","tupleLength","tupleContents","clarityName","asciiStrLen","asciiStr","utf8StrLen","utf8Str","hexString","_value","octet","Number","isInteger","leftPadHex","padStart","padEnd","integer","lengthBytes","parseInt","string","cloneDeep","lodashCloneDeep","omit","prop","clone","sha512_256","assign","_ah","_al","_bh","_bl","_ch","_cl","_dh","_dl","_eh","_el","_fh","_fl","_gh","_gl","_hh","_hl","digest","sha512","txidFromData","update","sha256Result","sha256","RIPEMD160","pubKeys","redeemScript","redeemScriptHash","regex","fetchPrivate","init","defaultFetchOpts","referrer","referrerPolicy","fetchOpts","fetch","fetchResult","cvToHex","serialized","hexToCV","hexWithoutPrefix","parseReadOnlyResponse","validateStacksAddress","stacksAddress","e","Deserializable","deserialize","emptyMessageSignature","AuthFieldType","createTransactionAuthField","contents","field","Signature","authFieldType","createSingleSigSpendingCondition","nonce","fee","signer","keyEncoding","Compressed","Uncompressed","createMultiSigSpendingCondition","stacksPublicKeys","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","serializeSingleSigSpendingCondition","serializeMultiSigSpendingCondition","writeUInt16BE","deserializeSingleSigSpendingCondition","deserializeMultiSigSpendingCondition","serializeSpendingCondition","deserializeSpendingCondition","makeSigHashPreSign","curSigHash","authType","hashLength","sigHash","makeSigHashPostSign","pubKeyEncoding","nextSignature","sigHashPreSign","publicKeyEncoding","nextSigHash","nextSig","nextVerification","initialSigHash","newInitialSigHash","spendingCondition","verify","verifySingleSig","Authorization","spendingConditions","sponsorSpendingCondition","intoInitialSighashAuth","Sponsored","setFee","getFee","setNonce","setSponsorNonce","setSponsor","verifyOrigin","serialize","StandardAuthorization","SponsoredAuthorization","originSpendingCondition","sponsorSC","StacksTransaction","auth","postConditions","postConditionMode","anchorMode","chainId","Deny","OnChainOnly","Any","signBegin","tx","txid","verifyBegin","createTxWithSignature","parsedSig","signNextOrigin","signAndAppend","signNextSponsor","appendPubkey","cond","chainIdBuffer","deserializeTransaction","TransactionSigner","transaction","originDone","checkOversign","checkOverlap","createSponsorSigner","originSigHash","signOrigin","nextSighash","appendOrigin","signSponsor","getTxInComplete","resume","ClarityAbiTypeId","isClarityAbiPrimitive","isClarityAbiBuffer","isClarityAbiStringAscii","isClarityAbiStringUtf8","isClarityAbiResponse","response","isClarityAbiOptional","optional","isClarityAbiTuple","tuple","isClarityAbiList","getTypeUnion","ClarityAbiTypeUInt128","ClarityAbiTypeInt128","ClarityAbiTypeBool","ClarityAbiTypePrincipal","ClarityAbiTypeTraitReference","ClarityAbiTypeNone","ClarityAbiTypeBuffer","ClarityAbiTypeResponse","ClarityAbiTypeOptional","ClarityAbiTypeTuple","ClarityAbiTypeList","ClarityAbiTypeStringAscii","ClarityAbiTypeStringUtf8","encodeClarityValue","union","getTypeString","ok","t","abiFunctionToString","func","access","args","matchType","abiType","every","abiTupleEntry","validateContractCall","abi","filtered","functions","abiFunc","abiArgs","payloadArg","abiArg","argNum","parseToCV","typeString","toLowerCase","inputLength","getNonce","network","defaultNetwork","StacksMainnet","url","getAccountApiUrl","msg","text","status","statusText","json","estimateTransfer","requestHeaders","Accept","fetchOptions","headers","getTransferFeeEstimateApiUrl","feeRateResult","txBytes","feeRate","mul","broadcastTransaction","rawTx","getBroadcastApiUrl","broadcastRawTransaction","body","parse","getAbi","getAbiApiUrl","makeUnsignedSTXTokenTransfer","txOptions","defaultOptions","sponsored","authorization","numSignatures","lpPostConditions","txFee","addressVersion","senderAddress","txNonce","makeSTXTokenTransfer","senderKey","pk","signerKeys","estimateContractDeploy","makeContractDeploy","addressHashMode","estimateContractFunctionCall","makeUnsignedContractCall","validateWithAbi","makeContractCall","makeStandardSTXPostCondition","makeContractSTXPostCondition","makeStandardFungiblePostCondition","makeContractFungiblePostCondition","makeStandardNonFungiblePostCondition","makeContractNonFungiblePostCondition","callReadOnlyFunction","readOnlyFunctionOptions","getReadOnlyFunctionCallApiUrl","sender","arguments","responseJson","sponsorTransaction","sponsorOptions","sponsorNonce","sponsorAddressHashmode","StacksTestnet","sponsorPubKey","sponsorPrivateKey"],"mappings":"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"}