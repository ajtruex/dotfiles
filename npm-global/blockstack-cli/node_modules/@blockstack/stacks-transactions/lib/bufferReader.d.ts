/// <reference types="node" />
import { SmartBuffer, SmartBufferOptions } from 'smart-buffer';
/**
 * Type guard to check if a given value is a valid enum value.
 * @param enumVariable - Literal `enum` type.
 * @param value - A value to check against the enum's values.
 * @example
 * ```ts
 * enum Color {
 *   Purple = 3,
 *   Orange = 5
 * }
 * const val: number = 3;
 * if (isEnum(Color, val)) {
 *   // `val` is known as enum type `Color`, e.g.:
 *   const colorVal: Color = val;
 * }
 * ```
 */
export declare function isEnum<T extends string, TEnumValue extends number>(enumVariable: {
    [key in T]: TEnumValue;
}, value: number): value is TEnumValue;
export declare class BufferReader extends SmartBuffer {
    static fromBuffer(buffer: Buffer): BufferReader;
    constructor(options?: SmartBufferOptions | Buffer);
    readBigUIntLE(length: number): bigint;
    readBigUIntBE(length: number): bigint;
    readUInt8Enum<T extends string, TEnumValue extends number>(enumVariable: {
        [key in T]: TEnumValue;
    }, invalidEnumErrorFormatter: (val: number) => Error): TEnumValue;
}
