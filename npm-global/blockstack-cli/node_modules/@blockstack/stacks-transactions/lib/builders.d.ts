import { StacksTransaction } from './transaction';
import { PostCondition, STXPostCondition, FungiblePostCondition, NonFungiblePostCondition } from './postcondition';
import { TransactionVersion, FungibleConditionCode, NonFungibleConditionCode, PostConditionMode, ChainID, AnchorMode } from './constants';
import { AssetInfo } from './types';
import * as BigNum from 'bn.js';
import { ClarityValue, PrincipalCV } from './clarity';
/**
 * STX token transfer transaction options
 *
 * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction
 * @param  {TransactionVersion} version - can be set to mainnet or testnet
 * @param  {String} memo - an arbitrary string to include with the transaction, must be less than
 *                          34 bytes
 * @param  {PostCondition[]} postConditions - an array of post conditions to add to the
 *                                                  transaction
 *
 * @return {StacksTransaction}
 */
export interface TokenTransferOptions {
    nonce?: BigNum;
    version?: TransactionVersion;
    chainId?: ChainID;
    anchorMode?: AnchorMode;
    memo?: string;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
}
/**
 * Generates a Stacks token transfer transaction
 *
 * Returns a signed Stacks token transfer transaction.
 *
 * @param  {String} recipientAddress - the c32check address of the recipient
 * @param  {BigNum} amount - number of tokens to transfer in microstacks
 * @param  {BigNum} fee - transaction fee in microstacks
 * @param  {String} senderKey - hex string sender private key used to sign transaction
 * @param  {TokenTransferOptions} options - an options object for the token transfer
 *
 * @return {StacksTransaction}
 */
export declare function makeSTXTokenTransfer(recipient: string | PrincipalCV, amount: BigNum, fee: BigNum, senderKey: string, options?: TokenTransferOptions): StacksTransaction;
/**
 * Contract deploy transaction options
 *
 * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction
 * @param  {TransactionVersion} version - can be set to mainnet or testnet
 * @param  {PostCondition[]} postConditions - an array of post conditions to add to the
 *                                                  transaction
 *
 * @return {StacksTransaction}
 */
export interface ContractDeployOptions {
    nonce?: BigNum;
    version?: TransactionVersion;
    chainId?: ChainID;
    anchorMode?: AnchorMode;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
}
/**
 * Generates a Clarity smart contract deploy transaction
 *
 * Returns a signed Stacks smart contract deploy transaction.
 *
 * @param  {String} contractName - the contract name
 * @param  {String} codeBody - the code body string
 * @param  {BigNum} fee - transaction fee in microstacks
 * @param  {String} senderKey - hex string sender private key used to sign transaction
 *
 * @return {StacksTransaction}
 */
export declare function makeSmartContractDeploy(contractName: string, codeBody: string, fee: BigNum, senderKey: string, options?: ContractDeployOptions): StacksTransaction;
/**
 * Contract function call transaction options
 *
 * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction
 * @param  {TransactionVersion} version - can be set to mainnet or testnet
 * @param  {PostCondition[]} postConditions - an array of post conditions to add to the
 *                                                  transaction
 *
 * @return {StacksTransaction}
 */
export interface ContractCallOptions {
    nonce?: BigNum;
    version?: TransactionVersion;
    chainId?: ChainID;
    anchorMode?: AnchorMode;
    postConditionMode?: PostConditionMode;
    postConditions?: PostCondition[];
}
/**
 * Generates a Clarity smart contract function call transaction
 *
 * Returns a signed Stacks smart contract deploy transaction.
 *
 * @param  {String} contractAddress - the c32check address of the contract
 * @param  {String} contractName - the contract name
 * @param  {String} functionName - name of the function to be called
 * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call
 * @param  {BigNum} fee - transaction fee rate in microstacks
 * @param  {BigNum} nonce - a nonce must be increased monotonically with each new transaction
 * @param  {String} senderKey - hex string sender private key used to sign transaction
 * @param  {TransactionVersion} version - can be set to mainnet or testnet
 *
 * @return {StacksTransaction}
 */
export declare function makeContractCall(contractAddress: string, contractName: string, functionName: string, functionArgs: ClarityValue[], fee: BigNum, senderKey: string, options?: ContractCallOptions): StacksTransaction;
/**
 * Generates a STX post condition with a standard principal
 *
 * Returns a STX post condition object
 *
 * @param  {String} address - the c32check address
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {BigNum} amount - the amount of STX tokens
 *
 * @return {STXPostCondition}
 */
export declare function makeStandardSTXPostCondition(address: string, conditionCode: FungibleConditionCode, amount: BigNum): STXPostCondition;
/**
 * Generates a STX post condition with a contract principal
 *
 * Returns a STX post condition object
 *
 * @param  {String} address - the c32check address of the contract
 * @param  {String} contractName - the name of the contract
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {BigNum} amount - the amount of STX tokens
 *
 * @return {STXPostCondition}
 */
export declare function makeContractSTXPostCondition(address: string, contractName: string, conditionCode: FungibleConditionCode, amount: BigNum): STXPostCondition;
/**
 * Generates a fungible token post condition with a standard principal
 *
 * Returns a fungible token post condition object
 *
 * @param  {String} address - the c32check address
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {BigNum} amount - the amount of fungible tokens
 * @param  {AssetInfo} assetInfo - asset info describing the fungible token
 *
 * @return {FungiblePostCondition}
 */
export declare function makeStandardFungiblePostCondition(address: string, conditionCode: FungibleConditionCode, amount: BigNum, assetInfo: string | AssetInfo): FungiblePostCondition;
/**
 * Generates a fungible token post condition with a contract principal
 *
 * Returns a fungible token post condition object
 *
 * @param  {String} address - the c32check address
 * @param  {String} contractName - the name of the contract
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {BigNum} amount - the amount of fungible tokens
 * @param  {AssetInfo} assetInfo - asset info describing the fungible token
 *
 * @return {FungiblePostCondition}
 */
export declare function makeContractFungiblePostCondition(address: string, contractName: string, conditionCode: FungibleConditionCode, amount: BigNum, assetInfo: string | AssetInfo): FungiblePostCondition;
/**
 * Generates a non-fungible token post condition with a standard principal
 *
 * Returns a non-fungible token post condition object
 *
 * @param  {String} address - the c32check address
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token
 *
 * @return {NonFungiblePostCondition}
 */
export declare function makeStandardNonFungiblePostCondition(address: string, conditionCode: NonFungibleConditionCode, assetInfo: string | AssetInfo, assetName: ClarityValue): NonFungiblePostCondition;
/**
 * Generates a non-fungible token post condition with a contract principal
 *
 * Returns a non-fungible token post condition object
 *
 * @param  {String} address - the c32check address
 * @param  {String} contractName - the name of the contract
 * @param  {FungibleConditionCode} conditionCode - the condition code
 * @param  {AssetInfo} assetInfo - asset info describing the non-fungible token
 *
 * @return {NonFungiblePostCondition}
 */
export declare function makeContractNonFungiblePostCondition(address: string, contractName: string, conditionCode: NonFungibleConditionCode, assetInfo: string | AssetInfo, assetName: ClarityValue): NonFungiblePostCondition;
