/// <reference types="node" />
import { sha512 } from 'sha.js';
import * as randombytes from 'randombytes';
import 'cross-fetch/polyfill';
export { randombytes as randomBytes };
export declare class BufferArray extends Array<Buffer> {
    appendHexString(hexString: string): void;
    appendByte(octet: number): void;
    concatBuffer(): Buffer;
}
export declare class BufferReader {
    buffer: Buffer;
    index: number;
    constructor(buffer: Buffer);
    read(bytes: number, incrementIndex?: boolean): Buffer;
    readByte(incrementIndex?: boolean): number;
    setIndex(index: number): void;
}
export declare const leftPadHex: (hexString: string) => string;
export declare const leftPadHexToLength: (hexString: string, length: number) => string;
export declare const rightPadHexToLength: (hexString: string, length: number) => string;
export declare const intToHexString: (integer: number, lengthBytes?: number) => string;
export declare const hexStringToInt: (hexString: string) => number;
export declare const exceedsMaxLengthBytes: (string: string, maxLengthBytes: number) => boolean;
export declare class sha512_256 extends sha512 {
    constructor();
    digest(): Buffer;
    digest(encoding: import('crypto').HexBase64Latin1Encoding): string;
}
export declare const txidFromData: (data: Buffer) => string;
export declare const hash160: (input: string) => string;
export declare const hash_p2pkh: (input: string) => string;
export declare function isClarityName(name: string): boolean;
/** @ignore */
export declare function fetchPrivate(input: RequestInfo, init?: RequestInit): Promise<Response>;
