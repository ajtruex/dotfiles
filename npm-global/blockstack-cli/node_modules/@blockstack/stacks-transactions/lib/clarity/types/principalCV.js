"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../types");
const clarityValue_1 = require("../clarityValue");
function principalToString(principal) {
    if (principal.type === clarityValue_1.ClarityType.PrincipalStandard) {
        return types_1.addressToString(principal.address);
    }
    else if (principal.type === clarityValue_1.ClarityType.PrincipalContract) {
        const address = types_1.addressToString(principal.address);
        return `${address}.${principal.contractName.content}`;
    }
    else {
        throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);
    }
}
exports.principalToString = principalToString;
function principalCV(principal) {
    if (principal.includes('.')) {
        const [address, contractName] = principal.split('.');
        return contractPrincipalCV(address, contractName);
    }
    else {
        return standardPrincipalCV(principal);
    }
}
exports.principalCV = principalCV;
function standardPrincipalCV(addressString) {
    const addr = types_1.createAddress(addressString);
    return { type: clarityValue_1.ClarityType.PrincipalStandard, address: addr };
}
exports.standardPrincipalCV = standardPrincipalCV;
function standardPrincipalCVFromAddress(address) {
    return { type: clarityValue_1.ClarityType.PrincipalStandard, address };
}
exports.standardPrincipalCVFromAddress = standardPrincipalCVFromAddress;
function contractPrincipalCV(addressString, contractName) {
    const addr = types_1.createAddress(addressString);
    const lengthPrefixedContractName = types_1.createLPString(contractName);
    return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);
}
exports.contractPrincipalCV = contractPrincipalCV;
function contractPrincipalCVFromAddress(address, contractName) {
    if (Buffer.byteLength(contractName.content) >= 128) {
        throw new Error('Contract name must be less than 128 bytes');
    }
    return { type: clarityValue_1.ClarityType.PrincipalContract, address, contractName };
}
exports.contractPrincipalCVFromAddress = contractPrincipalCVFromAddress;
function contractPrincipalCVFromStandard(sp, contractName) {
    const lengthPrefixedContractName = types_1.createLPString(contractName);
    return {
        type: clarityValue_1.ClarityType.PrincipalContract,
        address: sp.address,
        contractName: lengthPrefixedContractName,
    };
}
exports.contractPrincipalCVFromStandard = contractPrincipalCVFromStandard;
//# sourceMappingURL=principalCV.js.map