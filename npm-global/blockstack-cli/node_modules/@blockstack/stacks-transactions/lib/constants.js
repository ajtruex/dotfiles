"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Unsigned 32-bit integer
 */
var ChainID;
(function (ChainID) {
    ChainID[ChainID["Testnet"] = 2147483648] = "Testnet";
    ChainID[ChainID["Mainnet"] = 1] = "Mainnet";
})(ChainID || (ChainID = {}));
exports.ChainID = ChainID;
const DEFAULT_CHAIN_ID = ChainID.Mainnet;
exports.DEFAULT_CHAIN_ID = DEFAULT_CHAIN_ID;
const MAX_STRING_LENGTH_BYTES = 128;
exports.MAX_STRING_LENGTH_BYTES = MAX_STRING_LENGTH_BYTES;
const CLARITY_INT_SIZE = 128;
exports.CLARITY_INT_SIZE = CLARITY_INT_SIZE;
const COINBASE_BUFFER_LENGTH_BYTES = 32;
exports.COINBASE_BUFFER_LENGTH_BYTES = COINBASE_BUFFER_LENGTH_BYTES;
const RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = 65;
exports.RECOVERABLE_ECDSA_SIG_LENGTH_BYTES = RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;
const COMPRESSED_PUBKEY_LENGTH_BYTES = 32;
exports.COMPRESSED_PUBKEY_LENGTH_BYTES = COMPRESSED_PUBKEY_LENGTH_BYTES;
const UNCOMPRESSED_PUBKEY_LENGTH_BYTES = 64;
exports.UNCOMPRESSED_PUBKEY_LENGTH_BYTES = UNCOMPRESSED_PUBKEY_LENGTH_BYTES;
const MEMO_MAX_LENGTH_BYTES = 34;
exports.MEMO_MAX_LENGTH_BYTES = MEMO_MAX_LENGTH_BYTES;
const DEFAULT_CORE_NODE_API_URL = 'https://core.blockstack.org';
exports.DEFAULT_CORE_NODE_API_URL = DEFAULT_CORE_NODE_API_URL;
var StacksMessageType;
(function (StacksMessageType) {
    StacksMessageType[StacksMessageType["Address"] = 0] = "Address";
    StacksMessageType[StacksMessageType["Principal"] = 1] = "Principal";
    StacksMessageType[StacksMessageType["LengthPrefixedString"] = 2] = "LengthPrefixedString";
    StacksMessageType[StacksMessageType["MemoString"] = 3] = "MemoString";
    StacksMessageType[StacksMessageType["AssetInfo"] = 4] = "AssetInfo";
    StacksMessageType[StacksMessageType["PostCondition"] = 5] = "PostCondition";
    StacksMessageType[StacksMessageType["PublicKey"] = 6] = "PublicKey";
    StacksMessageType[StacksMessageType["LengthPrefixedList"] = 7] = "LengthPrefixedList";
    StacksMessageType[StacksMessageType["Payload"] = 8] = "Payload";
})(StacksMessageType || (StacksMessageType = {}));
exports.StacksMessageType = StacksMessageType;
var PayloadType;
(function (PayloadType) {
    PayloadType[PayloadType["TokenTransfer"] = 0] = "TokenTransfer";
    PayloadType[PayloadType["SmartContract"] = 1] = "SmartContract";
    PayloadType[PayloadType["ContractCall"] = 2] = "ContractCall";
    PayloadType[PayloadType["PoisonMicroblock"] = 3] = "PoisonMicroblock";
    PayloadType[PayloadType["Coinbase"] = 4] = "Coinbase";
})(PayloadType || (PayloadType = {}));
exports.PayloadType = PayloadType;
var AnchorMode;
(function (AnchorMode) {
    AnchorMode[AnchorMode["OnChainOnly"] = 1] = "OnChainOnly";
    AnchorMode[AnchorMode["OffChainOnly"] = 2] = "OffChainOnly";
    AnchorMode[AnchorMode["Any"] = 3] = "Any";
})(AnchorMode || (AnchorMode = {}));
exports.AnchorMode = AnchorMode;
var TransactionVersion;
(function (TransactionVersion) {
    TransactionVersion[TransactionVersion["Mainnet"] = 0] = "Mainnet";
    TransactionVersion[TransactionVersion["Testnet"] = 128] = "Testnet";
})(TransactionVersion || (TransactionVersion = {}));
exports.TransactionVersion = TransactionVersion;
const DEFAULT_TRANSACTION_VERSION = TransactionVersion.Mainnet;
exports.DEFAULT_TRANSACTION_VERSION = DEFAULT_TRANSACTION_VERSION;
var PostConditionMode;
(function (PostConditionMode) {
    PostConditionMode[PostConditionMode["Allow"] = 1] = "Allow";
    PostConditionMode[PostConditionMode["Deny"] = 2] = "Deny";
})(PostConditionMode || (PostConditionMode = {}));
exports.PostConditionMode = PostConditionMode;
var PostConditionType;
(function (PostConditionType) {
    PostConditionType[PostConditionType["STX"] = 0] = "STX";
    PostConditionType[PostConditionType["Fungible"] = 1] = "Fungible";
    PostConditionType[PostConditionType["NonFungible"] = 2] = "NonFungible";
})(PostConditionType || (PostConditionType = {}));
exports.PostConditionType = PostConditionType;
var AuthType;
(function (AuthType) {
    AuthType[AuthType["Standard"] = 4] = "Standard";
    AuthType[AuthType["Sponsored"] = 5] = "Sponsored";
})(AuthType || (AuthType = {}));
exports.AuthType = AuthType;
var AddressHashMode;
(function (AddressHashMode) {
    // serialization modes for public keys to addresses.
    // We support four different modes due to legacy compatibility with Stacks v1 addresses:
    /** SingleSigHashMode - hash160(public-key), same as bitcoin's p2pkh */
    AddressHashMode[AddressHashMode["SerializeP2PKH"] = 0] = "SerializeP2PKH";
    /** SingleSigHashMode - hash160(multisig-redeem-script), same as bitcoin's multisig p2sh */
    AddressHashMode[AddressHashMode["SerializeP2SH"] = 1] = "SerializeP2SH";
    /** MultiSigHashMode - hash160(segwit-program-00(p2pkh)), same as bitcoin's p2sh-p2wpkh */
    AddressHashMode[AddressHashMode["SerializeP2WPKH"] = 2] = "SerializeP2WPKH";
    /** MultiSigHashMode - hash160(segwit-program-00(public-keys)), same as bitcoin's p2sh-p2wsh */
    AddressHashMode[AddressHashMode["SerializeP2WSH"] = 3] = "SerializeP2WSH";
})(AddressHashMode || (AddressHashMode = {}));
exports.AddressHashMode = AddressHashMode;
var AddressVersion;
(function (AddressVersion) {
    AddressVersion[AddressVersion["MainnetSingleSig"] = 22] = "MainnetSingleSig";
    AddressVersion[AddressVersion["MainnetMultiSig"] = 20] = "MainnetMultiSig";
    AddressVersion[AddressVersion["TestnetSingleSig"] = 26] = "TestnetSingleSig";
    AddressVersion[AddressVersion["TestnetMultiSig"] = 21] = "TestnetMultiSig";
})(AddressVersion || (AddressVersion = {}));
exports.AddressVersion = AddressVersion;
var PubKeyEncoding;
(function (PubKeyEncoding) {
    PubKeyEncoding[PubKeyEncoding["Compressed"] = 0] = "Compressed";
    PubKeyEncoding[PubKeyEncoding["Uncompressed"] = 1] = "Uncompressed";
})(PubKeyEncoding || (PubKeyEncoding = {}));
exports.PubKeyEncoding = PubKeyEncoding;
var FungibleConditionCode;
(function (FungibleConditionCode) {
    FungibleConditionCode[FungibleConditionCode["Equal"] = 1] = "Equal";
    FungibleConditionCode[FungibleConditionCode["Greater"] = 2] = "Greater";
    FungibleConditionCode[FungibleConditionCode["GreaterEqual"] = 3] = "GreaterEqual";
    FungibleConditionCode[FungibleConditionCode["Less"] = 4] = "Less";
    FungibleConditionCode[FungibleConditionCode["LessEqual"] = 5] = "LessEqual";
})(FungibleConditionCode || (FungibleConditionCode = {}));
exports.FungibleConditionCode = FungibleConditionCode;
var NonFungibleConditionCode;
(function (NonFungibleConditionCode) {
    NonFungibleConditionCode[NonFungibleConditionCode["DoesNotOwn"] = 16] = "DoesNotOwn";
    NonFungibleConditionCode[NonFungibleConditionCode["Owns"] = 17] = "Owns";
})(NonFungibleConditionCode || (NonFungibleConditionCode = {}));
exports.NonFungibleConditionCode = NonFungibleConditionCode;
var PostConditionPrincipalID;
(function (PostConditionPrincipalID) {
    PostConditionPrincipalID[PostConditionPrincipalID["Origin"] = 1] = "Origin";
    PostConditionPrincipalID[PostConditionPrincipalID["Standard"] = 2] = "Standard";
    PostConditionPrincipalID[PostConditionPrincipalID["Contract"] = 3] = "Contract";
})(PostConditionPrincipalID || (PostConditionPrincipalID = {}));
exports.PostConditionPrincipalID = PostConditionPrincipalID;
var AssetType;
(function (AssetType) {
    AssetType[AssetType["STX"] = 0] = "STX";
    AssetType[AssetType["Fungible"] = 1] = "Fungible";
    AssetType[AssetType["NonFungible"] = 2] = "NonFungible";
})(AssetType || (AssetType = {}));
exports.AssetType = AssetType;
/**
 * Type IDs corresponding to each of the Clarity value types as described here:
 * {@link https://github.com/blockstack/blockstack-core/blob/sip/sip-005/sip/sip-005-blocks-and-transactions.md#clarity-value-representation}
 */
var ClarityType;
(function (ClarityType) {
    ClarityType[ClarityType["Int"] = 0] = "Int";
    ClarityType[ClarityType["UInt"] = 1] = "UInt";
    ClarityType[ClarityType["Buffer"] = 2] = "Buffer";
    ClarityType[ClarityType["BoolTrue"] = 3] = "BoolTrue";
    ClarityType[ClarityType["BoolFalse"] = 4] = "BoolFalse";
    ClarityType[ClarityType["PrincipalStandard"] = 5] = "PrincipalStandard";
    ClarityType[ClarityType["PrincipalContract"] = 6] = "PrincipalContract";
    ClarityType[ClarityType["ResponseOk"] = 7] = "ResponseOk";
    ClarityType[ClarityType["ResponseErr"] = 8] = "ResponseErr";
    ClarityType[ClarityType["OptionalNone"] = 9] = "OptionalNone";
    ClarityType[ClarityType["OptionalSome"] = 10] = "OptionalSome";
    ClarityType[ClarityType["List"] = 11] = "List";
    ClarityType[ClarityType["Tuple"] = 12] = "Tuple";
})(ClarityType || (ClarityType = {}));
//# sourceMappingURL=constants.js.map